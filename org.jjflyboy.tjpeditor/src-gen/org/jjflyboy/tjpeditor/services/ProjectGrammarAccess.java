/*
* generated by Xtext
*/

package org.jjflyboy.tjpeditor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ProjectGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProjectProjectParserRuleCall_0_0 = (RuleCall)cProjectAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesGlobalAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		////
		//// The pattern used here for specifying attributes
		//// XXXX:
		////  'xxxx' ..... ( '{' attributes+=XxxxAttribute* '}' )?;
		////
		//// XxxxAttribute:
		////    Yyyy | Zzzz | ....
		////
		//// See Account below for real life example.  This pattern is
		//// in use because TaskJuggler permits attributes in any
		//// order and permits repeats
		////
		//Global:
		//	project=Project attributes+=GlobalAttribute*;
		public ParserRule getRule() { return rule; }

		//project=Project attributes+=GlobalAttribute*
		public Group getGroup() { return cGroup; }

		//project=Project
		public Assignment getProjectAssignment_0() { return cProjectAssignment_0; }

		//Project
		public RuleCall getProjectProjectParserRuleCall_0_0() { return cProjectProjectParserRuleCall_0_0; }

		//attributes+=GlobalAttribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//GlobalAttribute
		public RuleCall getAttributesGlobalAttributeParserRuleCall_1_0() { return cAttributesGlobalAttributeParserRuleCall_1_0; }
	}

	public class GlobalAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBalanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCopyrightParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFlagsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLimitsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cResourceReportParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTaskReportParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTextReportParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cResourceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cShiftParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSupplementAccountParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSupplementReportParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSupplementResourceParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cSupplementTaskParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cTagFileParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cTaskParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cTrackingScenarioParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cVacationParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		
		//GlobalAttribute:
		//	Account //	| Export
		//	//	| Macro
		//	//	| Navigator
		//	//	| NikuReport
		//	//	| StatusSheet
		//	//	| StatusSheetReport
		//	//	| Timesheet
		//	//	| TimesheetReport
		//	| Balance | Copyright | Flags | Limits | Rate | ResourceReport | TaskReport | TextReport | Resource | Shift |
		//	SupplementAccount | SupplementReport | SupplementResource | SupplementTask | TagFile | Task | TrackingScenario |
		//	Vacation;
		public ParserRule getRule() { return rule; }

		//Account //	| Export
		////	| Macro
		////	| Navigator
		////	| NikuReport
		////	| StatusSheet
		////	| StatusSheetReport
		////	| Timesheet
		////	| TimesheetReport
		//| Balance | Copyright | Flags | Limits | Rate | ResourceReport | TaskReport | TextReport | Resource | Shift |
		//SupplementAccount | SupplementReport | SupplementResource | SupplementTask | TagFile | Task | TrackingScenario |
		//Vacation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Account
		public RuleCall getAccountParserRuleCall_0() { return cAccountParserRuleCall_0; }

		//Balance
		public RuleCall getBalanceParserRuleCall_1() { return cBalanceParserRuleCall_1; }

		//Copyright
		public RuleCall getCopyrightParserRuleCall_2() { return cCopyrightParserRuleCall_2; }

		//Flags
		public RuleCall getFlagsParserRuleCall_3() { return cFlagsParserRuleCall_3; }

		//Limits
		public RuleCall getLimitsParserRuleCall_4() { return cLimitsParserRuleCall_4; }

		//Rate
		public RuleCall getRateParserRuleCall_5() { return cRateParserRuleCall_5; }

		//ResourceReport
		public RuleCall getResourceReportParserRuleCall_6() { return cResourceReportParserRuleCall_6; }

		//TaskReport
		public RuleCall getTaskReportParserRuleCall_7() { return cTaskReportParserRuleCall_7; }

		//TextReport
		public RuleCall getTextReportParserRuleCall_8() { return cTextReportParserRuleCall_8; }

		//Resource
		public RuleCall getResourceParserRuleCall_9() { return cResourceParserRuleCall_9; }

		//Shift
		public RuleCall getShiftParserRuleCall_10() { return cShiftParserRuleCall_10; }

		//SupplementAccount
		public RuleCall getSupplementAccountParserRuleCall_11() { return cSupplementAccountParserRuleCall_11; }

		//SupplementReport
		public RuleCall getSupplementReportParserRuleCall_12() { return cSupplementReportParserRuleCall_12; }

		//SupplementResource
		public RuleCall getSupplementResourceParserRuleCall_13() { return cSupplementResourceParserRuleCall_13; }

		//SupplementTask
		public RuleCall getSupplementTaskParserRuleCall_14() { return cSupplementTaskParserRuleCall_14; }

		//TagFile
		public RuleCall getTagFileParserRuleCall_15() { return cTagFileParserRuleCall_15; }

		//Task
		public RuleCall getTaskParserRuleCall_16() { return cTaskParserRuleCall_16; }

		//TrackingScenario
		public RuleCall getTrackingScenarioParserRuleCall_17() { return cTrackingScenarioParserRuleCall_17; }

		//Vacation
		public RuleCall getVacationParserRuleCall_18() { return cVacationParserRuleCall_18; }
	}

	public class AccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Account");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAccountAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/account.html
		//Account:
		//	"account" id=ID? name=STRING ("{" attributes+=AccountAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"account" id=ID? name=STRING ("{" attributes+=AccountAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"account"
		public Keyword getAccountKeyword_0() { return cAccountKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("{" attributes+=AccountAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=AccountAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//AccountAttribute
		public RuleCall getAttributesAccountAttributeParserRuleCall_3_1_0() { return cAttributesAccountAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class AccountAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccountAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreditParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlagsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AccountAttribute:
		//	Account | Credit | Flags;
		public ParserRule getRule() { return rule; }

		//Account | Credit | Flags
		public Alternatives getAlternatives() { return cAlternatives; }

		//Account
		public RuleCall getAccountParserRuleCall_0() { return cAccountParserRuleCall_0; }

		//Credit
		public RuleCall getCreditParserRuleCall_1() { return cCreditParserRuleCall_1; }

		//Flags
		public RuleCall getFlagsParserRuleCall_2() { return cFlagsParserRuleCall_2; }
	}

	public class SupplementAccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupplementAccount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAccountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAccountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAccountAccountCrossReference_2_0 = (CrossReference)cAccountAssignment_2.eContents().get(0);
		private final RuleCall cAccountAccountIDTerminalRuleCall_2_0_1 = (RuleCall)cAccountAccountCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAccountAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.html
		//SupplementAccount:
		//	"supplement" "account" account=[Account] ("{" attributes+=AccountAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"supplement" "account" account=[Account] ("{" attributes+=AccountAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"supplement"
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }

		//"account"
		public Keyword getAccountKeyword_1() { return cAccountKeyword_1; }

		//account=[Account]
		public Assignment getAccountAssignment_2() { return cAccountAssignment_2; }

		//[Account]
		public CrossReference getAccountAccountCrossReference_2_0() { return cAccountAccountCrossReference_2_0; }

		//ID
		public RuleCall getAccountAccountIDTerminalRuleCall_2_0_1() { return cAccountAccountIDTerminalRuleCall_2_0_1; }

		//("{" attributes+=AccountAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=AccountAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//AccountAttribute
		public RuleCall getAttributesAccountAttributeParserRuleCall_3_1_0() { return cAttributesAccountAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Assignment cIntervalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntervalInterval2ParserRuleCall_4_0 = (RuleCall)cIntervalAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesProjectAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/project.html
		//Project:
		//	"project" id=ID? name=STRING version=STRING? interval=Interval2 ("{" attributes+=ProjectAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"project" id=ID? name=STRING version=STRING? interval=Interval2 ("{" attributes+=ProjectAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"project"
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//version=STRING?
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_0() { return cVersionSTRINGTerminalRuleCall_3_0; }

		//interval=Interval2
		public Assignment getIntervalAssignment_4() { return cIntervalAssignment_4; }

		//Interval2
		public RuleCall getIntervalInterval2ParserRuleCall_4_0() { return cIntervalInterval2ParserRuleCall_4_0; }

		//("{" attributes+=ProjectAttribute* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//attributes+=ProjectAttribute*
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }

		//ProjectAttribute
		public RuleCall getAttributesProjectAttributeParserRuleCall_5_1_0() { return cAttributesProjectAttributeParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class ProjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProjectAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCurrencyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCurrencyFormatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDailyWorkingHoursParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncludeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJournalEntryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNowParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNumberFormatParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cScenarioParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cShortTimeFormatParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTimezoneParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTimingResolutionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cWeekStartsParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWorkingHoursParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cYearlyWorkingDaysParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//ProjectAttribute:
		//	Currency //		| ExtendTask
		//	//		| ExtendResource
		//	| CurrencyFormat | DailyWorkingHours | Include | JournalEntry | Now | NumberFormat | Scenario | ShortTimeFormat |
		//	Timezone | TimingResolution | WeekStarts | WorkingHours | YearlyWorkingDays;
		public ParserRule getRule() { return rule; }

		//Currency //		| ExtendTask
		////		| ExtendResource
		//| CurrencyFormat | DailyWorkingHours | Include | JournalEntry | Now | NumberFormat | Scenario | ShortTimeFormat |
		//Timezone | TimingResolution | WeekStarts | WorkingHours | YearlyWorkingDays
		public Alternatives getAlternatives() { return cAlternatives; }

		//Currency
		public RuleCall getCurrencyParserRuleCall_0() { return cCurrencyParserRuleCall_0; }

		//CurrencyFormat
		public RuleCall getCurrencyFormatParserRuleCall_1() { return cCurrencyFormatParserRuleCall_1; }

		//DailyWorkingHours
		public RuleCall getDailyWorkingHoursParserRuleCall_2() { return cDailyWorkingHoursParserRuleCall_2; }

		//Include
		public RuleCall getIncludeParserRuleCall_3() { return cIncludeParserRuleCall_3; }

		//JournalEntry
		public RuleCall getJournalEntryParserRuleCall_4() { return cJournalEntryParserRuleCall_4; }

		//Now
		public RuleCall getNowParserRuleCall_5() { return cNowParserRuleCall_5; }

		//NumberFormat
		public RuleCall getNumberFormatParserRuleCall_6() { return cNumberFormatParserRuleCall_6; }

		//Scenario
		public RuleCall getScenarioParserRuleCall_7() { return cScenarioParserRuleCall_7; }

		//ShortTimeFormat
		public RuleCall getShortTimeFormatParserRuleCall_8() { return cShortTimeFormatParserRuleCall_8; }

		//Timezone
		public RuleCall getTimezoneParserRuleCall_9() { return cTimezoneParserRuleCall_9; }

		//TimingResolution
		public RuleCall getTimingResolutionParserRuleCall_10() { return cTimingResolutionParserRuleCall_10; }

		//WeekStarts
		public RuleCall getWeekStartsParserRuleCall_11() { return cWeekStartsParserRuleCall_11; }

		//WorkingHours
		public RuleCall getWorkingHoursParserRuleCall_12() { return cWorkingHoursParserRuleCall_12; }

		//YearlyWorkingDays
		public RuleCall getYearlyWorkingDaysParserRuleCall_13() { return cYearlyWorkingDaysParserRuleCall_13; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTaskAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/task.html
		//Task:
		//	"task" id=ID? name=STRING ("{" attributes+=TaskAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"task" id=ID? name=STRING ("{" attributes+=TaskAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("{" attributes+=TaskAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=TaskAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//TaskAttribute
		public RuleCall getAttributesTaskAttributeParserRuleCall_3_1_0() { return cAttributesTaskAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class SupplementTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupplementTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_2_0 = (CrossReference)cTaskAssignment_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cTaskTaskCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTaskAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
		//SupplementTask:
		//	"supplement" "task" task=[Task] ("{" attributes+=TaskAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"supplement" "task" task=[Task] ("{" attributes+=TaskAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"supplement"
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }

		//"task"
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }

		//task=[Task]
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_2_0() { return cTaskTaskCrossReference_2_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_0_1() { return cTaskTaskIDTerminalRuleCall_2_0_1; }

		//("{" attributes+=TaskAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=TaskAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//TaskAttribute
		public RuleCall getAttributesTaskAttributeParserRuleCall_3_1_0() { return cAttributesTaskAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class TaskAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllocateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBookingTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChargeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChargeSetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCompleteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDependsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDurationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEffortParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEndParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEndCreditParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFlagsParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cJournalEntryParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLengthParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLimitsParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cMaxEndParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cMaxStartParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cMilestoneParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cMinEndParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cMinStartParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cNoteParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cPeriodParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cPrecedesParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cPriorityParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cProjectIdParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cPurgeParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cResponsibleParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cScheduledParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cSchedulingParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cShiftsParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cStartParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cStartCreditParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cSupplementTaskParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cTaskParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		
		//TaskAttribute:
		//	Allocate //		| Warn
		//	| BookingTask | Charge | ChargeSet | Complete | Depends | Duration | Effort | End | EndCredit | Flags | JournalEntry |
		//	Length | Limits | MaxEnd | MaxStart | Milestone | MinEnd | MinStart | Note | Period | Precedes | Priority | ProjectId
		//	| Purge | Responsible | Scheduled | Scheduling | Shifts | Start | StartCredit | SupplementTask | Task;
		public ParserRule getRule() { return rule; }

		//Allocate //		| Warn
		//| BookingTask | Charge | ChargeSet | Complete | Depends | Duration | Effort | End | EndCredit | Flags | JournalEntry |
		//Length | Limits | MaxEnd | MaxStart | Milestone | MinEnd | MinStart | Note | Period | Precedes | Priority | ProjectId |
		//Purge | Responsible | Scheduled | Scheduling | Shifts | Start | StartCredit | SupplementTask | Task
		public Alternatives getAlternatives() { return cAlternatives; }

		//Allocate
		public RuleCall getAllocateParserRuleCall_0() { return cAllocateParserRuleCall_0; }

		//BookingTask
		public RuleCall getBookingTaskParserRuleCall_1() { return cBookingTaskParserRuleCall_1; }

		//Charge
		public RuleCall getChargeParserRuleCall_2() { return cChargeParserRuleCall_2; }

		//ChargeSet
		public RuleCall getChargeSetParserRuleCall_3() { return cChargeSetParserRuleCall_3; }

		//Complete
		public RuleCall getCompleteParserRuleCall_4() { return cCompleteParserRuleCall_4; }

		//Depends
		public RuleCall getDependsParserRuleCall_5() { return cDependsParserRuleCall_5; }

		//Duration
		public RuleCall getDurationParserRuleCall_6() { return cDurationParserRuleCall_6; }

		//Effort
		public RuleCall getEffortParserRuleCall_7() { return cEffortParserRuleCall_7; }

		//End
		public RuleCall getEndParserRuleCall_8() { return cEndParserRuleCall_8; }

		//EndCredit
		public RuleCall getEndCreditParserRuleCall_9() { return cEndCreditParserRuleCall_9; }

		//Flags
		public RuleCall getFlagsParserRuleCall_10() { return cFlagsParserRuleCall_10; }

		//JournalEntry
		public RuleCall getJournalEntryParserRuleCall_11() { return cJournalEntryParserRuleCall_11; }

		//Length
		public RuleCall getLengthParserRuleCall_12() { return cLengthParserRuleCall_12; }

		//Limits
		public RuleCall getLimitsParserRuleCall_13() { return cLimitsParserRuleCall_13; }

		//MaxEnd
		public RuleCall getMaxEndParserRuleCall_14() { return cMaxEndParserRuleCall_14; }

		//MaxStart
		public RuleCall getMaxStartParserRuleCall_15() { return cMaxStartParserRuleCall_15; }

		//Milestone
		public RuleCall getMilestoneParserRuleCall_16() { return cMilestoneParserRuleCall_16; }

		//MinEnd
		public RuleCall getMinEndParserRuleCall_17() { return cMinEndParserRuleCall_17; }

		//MinStart
		public RuleCall getMinStartParserRuleCall_18() { return cMinStartParserRuleCall_18; }

		//Note
		public RuleCall getNoteParserRuleCall_19() { return cNoteParserRuleCall_19; }

		//Period
		public RuleCall getPeriodParserRuleCall_20() { return cPeriodParserRuleCall_20; }

		//Precedes
		public RuleCall getPrecedesParserRuleCall_21() { return cPrecedesParserRuleCall_21; }

		//Priority
		public RuleCall getPriorityParserRuleCall_22() { return cPriorityParserRuleCall_22; }

		//ProjectId
		public RuleCall getProjectIdParserRuleCall_23() { return cProjectIdParserRuleCall_23; }

		//Purge
		public RuleCall getPurgeParserRuleCall_24() { return cPurgeParserRuleCall_24; }

		//Responsible
		public RuleCall getResponsibleParserRuleCall_25() { return cResponsibleParserRuleCall_25; }

		//Scheduled
		public RuleCall getScheduledParserRuleCall_26() { return cScheduledParserRuleCall_26; }

		//Scheduling
		public RuleCall getSchedulingParserRuleCall_27() { return cSchedulingParserRuleCall_27; }

		//Shifts
		public RuleCall getShiftsParserRuleCall_28() { return cShiftsParserRuleCall_28; }

		//Start
		public RuleCall getStartParserRuleCall_29() { return cStartParserRuleCall_29; }

		//StartCredit
		public RuleCall getStartCreditParserRuleCall_30() { return cStartCreditParserRuleCall_30; }

		//SupplementTask
		public RuleCall getSupplementTaskParserRuleCall_31() { return cSupplementTaskParserRuleCall_31; }

		//Task
		public RuleCall getTaskParserRuleCall_32() { return cTaskParserRuleCall_32; }
	}

	public class ReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Report");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesReportAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/report.html
		//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
		//// http://www.taskjuggler.org/tj3/manual/taskreport.html
		//// http://www.taskjuggler.org/tj3/manual/textreport.html
		//Report:
		//	id=ID? name=STRING ("{" attributes+=ReportAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//id=ID? name=STRING ("{" attributes+=ReportAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//id=ID?
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//("{" attributes+=ReportAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=ReportAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//ReportAttribute
		public RuleCall getAttributesReportAttributeParserRuleCall_2_1_0() { return cAttributesReportAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class SupplementReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupplementReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cReportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReportAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReportReportCrossReference_2_0 = (CrossReference)cReportAssignment_2.eContents().get(0);
		private final RuleCall cReportReportIDTerminalRuleCall_2_0_1 = (RuleCall)cReportReportCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesReportAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.html
		//SupplementReport:
		//	"supplement" "report" report=[Report] ("{" attributes+=ReportAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"supplement" "report" report=[Report] ("{" attributes+=ReportAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"supplement"
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }

		//"report"
		public Keyword getReportKeyword_1() { return cReportKeyword_1; }

		//report=[Report]
		public Assignment getReportAssignment_2() { return cReportAssignment_2; }

		//[Report]
		public CrossReference getReportReportCrossReference_2_0() { return cReportReportCrossReference_2_0; }

		//ID
		public RuleCall getReportReportIDTerminalRuleCall_2_0_1() { return cReportReportIDTerminalRuleCall_2_0_1; }

		//("{" attributes+=ReportAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=ReportAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//ReportAttribute
		public RuleCall getAttributesReportAttributeParserRuleCall_3_1_0() { return cAttributesReportAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBalanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCenterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColumnsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEndParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEpilogParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFlagsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFooterParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFormatsParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cHeaderParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cHeadlineParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLeftParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLoadUnitParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cPeriodParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPrologParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cResourceReportParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cTaskReportParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cTextReportParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRightParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cScenariosParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSelfContainedParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cSortResourcesParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cSortTasksParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cStartParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cTaskRootParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cTimeFormatParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cTitleParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		
		//ReportAttribute:
		//	Balance //	| HideResource
		//	//	| HideTask
		//	//	| RollupTask
		//	| Caption | Center | Columns | End | Epilog | Flags | Footer | Formats | Header | Headline | Left | LoadUnit | Period |
		//	Prolog | ResourceReport | TaskReport | TextReport | Right | Scenarios | SelfContained | SortResources | SortTasks |
		//	Start | TaskRoot | TimeFormat | Title;
		public ParserRule getRule() { return rule; }

		//Balance //	| HideResource
		////	| HideTask
		////	| RollupTask
		//| Caption | Center | Columns | End | Epilog | Flags | Footer | Formats | Header | Headline | Left | LoadUnit | Period |
		//Prolog | ResourceReport | TaskReport | TextReport | Right | Scenarios | SelfContained | SortResources | SortTasks |
		//Start | TaskRoot | TimeFormat | Title
		public Alternatives getAlternatives() { return cAlternatives; }

		//Balance
		public RuleCall getBalanceParserRuleCall_0() { return cBalanceParserRuleCall_0; }

		//Caption
		public RuleCall getCaptionParserRuleCall_1() { return cCaptionParserRuleCall_1; }

		//Center
		public RuleCall getCenterParserRuleCall_2() { return cCenterParserRuleCall_2; }

		//Columns
		public RuleCall getColumnsParserRuleCall_3() { return cColumnsParserRuleCall_3; }

		//End
		public RuleCall getEndParserRuleCall_4() { return cEndParserRuleCall_4; }

		//Epilog
		public RuleCall getEpilogParserRuleCall_5() { return cEpilogParserRuleCall_5; }

		//Flags
		public RuleCall getFlagsParserRuleCall_6() { return cFlagsParserRuleCall_6; }

		//Footer
		public RuleCall getFooterParserRuleCall_7() { return cFooterParserRuleCall_7; }

		//Formats
		public RuleCall getFormatsParserRuleCall_8() { return cFormatsParserRuleCall_8; }

		//Header
		public RuleCall getHeaderParserRuleCall_9() { return cHeaderParserRuleCall_9; }

		//Headline
		public RuleCall getHeadlineParserRuleCall_10() { return cHeadlineParserRuleCall_10; }

		//Left
		public RuleCall getLeftParserRuleCall_11() { return cLeftParserRuleCall_11; }

		//LoadUnit
		public RuleCall getLoadUnitParserRuleCall_12() { return cLoadUnitParserRuleCall_12; }

		//Period
		public RuleCall getPeriodParserRuleCall_13() { return cPeriodParserRuleCall_13; }

		//Prolog
		public RuleCall getPrologParserRuleCall_14() { return cPrologParserRuleCall_14; }

		//ResourceReport
		public RuleCall getResourceReportParserRuleCall_15() { return cResourceReportParserRuleCall_15; }

		//TaskReport
		public RuleCall getTaskReportParserRuleCall_16() { return cTaskReportParserRuleCall_16; }

		//TextReport
		public RuleCall getTextReportParserRuleCall_17() { return cTextReportParserRuleCall_17; }

		//Right
		public RuleCall getRightParserRuleCall_18() { return cRightParserRuleCall_18; }

		//Scenarios
		public RuleCall getScenariosParserRuleCall_19() { return cScenariosParserRuleCall_19; }

		//SelfContained
		public RuleCall getSelfContainedParserRuleCall_20() { return cSelfContainedParserRuleCall_20; }

		//SortResources
		public RuleCall getSortResourcesParserRuleCall_21() { return cSortResourcesParserRuleCall_21; }

		//SortTasks
		public RuleCall getSortTasksParserRuleCall_22() { return cSortTasksParserRuleCall_22; }

		//Start
		public RuleCall getStartParserRuleCall_23() { return cStartParserRuleCall_23; }

		//TaskRoot
		public RuleCall getTaskRootParserRuleCall_24() { return cTaskRootParserRuleCall_24; }

		//TimeFormat
		public RuleCall getTimeFormatParserRuleCall_25() { return cTimeFormatParserRuleCall_25; }

		//Title
		public RuleCall getTitleParserRuleCall_26() { return cTitleParserRuleCall_26; }
	}

	public class IcalReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IcalReport");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/icalreport.html
		//// TODO: ical report
		//IcalReport:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// TODO: export report
		//// http://www.taskjuggler.org/tj3/manual/export.html
		//Export:
		//	"export" STRING;
		public ParserRule getRule() { return rule; }

		//"export" STRING
		public Group getGroup() { return cGroup; }

		//"export"
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesResourceAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/resource.html
		//Resource:
		//	"resource" id=ID? name=STRING ("{" attributes+=ResourceAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"resource" id=ID? name=STRING ("{" attributes+=ResourceAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"resource"
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("{" attributes+=ResourceAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=ResourceAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//ResourceAttribute
		public RuleCall getAttributesResourceAttributeParserRuleCall_3_1_0() { return cAttributesResourceAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class SupplementResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupplementResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cResourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cResourceResourceCrossReference_2_0 = (CrossReference)cResourceAssignment_2.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_2_0_1 = (RuleCall)cResourceResourceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesResourceAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SupplementResource:
		//	"supplement" "resource" resource=[Resource] ("{" attributes+=ResourceAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"supplement" "resource" resource=[Resource] ("{" attributes+=ResourceAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"supplement"
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }

		//"resource"
		public Keyword getResourceKeyword_1() { return cResourceKeyword_1; }

		//resource=[Resource]
		public Assignment getResourceAssignment_2() { return cResourceAssignment_2; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_2_0() { return cResourceResourceCrossReference_2_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_2_0_1() { return cResourceResourceIDTerminalRuleCall_2_0_1; }

		//("{" attributes+=ResourceAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=ResourceAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//ResourceAttribute
		public RuleCall getAttributesResourceAttributeParserRuleCall_3_1_0() { return cAttributesResourceAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ResourceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVacationResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBookingResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWorkingHoursParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEfficiencyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFlagsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLimitsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPurgeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRateParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cResourceParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cShiftsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSupplementResourceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//ResourceAttribute:
		//	VacationResource | BookingResource | WorkingHours | Efficiency | Flags | Limits | Purge | Rate | Resource | Shifts |
		//	SupplementResource;
		public ParserRule getRule() { return rule; }

		//VacationResource | BookingResource | WorkingHours | Efficiency | Flags | Limits | Purge | Rate | Resource | Shifts |
		//SupplementResource
		public Alternatives getAlternatives() { return cAlternatives; }

		//VacationResource
		public RuleCall getVacationResourceParserRuleCall_0() { return cVacationResourceParserRuleCall_0; }

		//BookingResource
		public RuleCall getBookingResourceParserRuleCall_1() { return cBookingResourceParserRuleCall_1; }

		//WorkingHours
		public RuleCall getWorkingHoursParserRuleCall_2() { return cWorkingHoursParserRuleCall_2; }

		//Efficiency
		public RuleCall getEfficiencyParserRuleCall_3() { return cEfficiencyParserRuleCall_3; }

		//Flags
		public RuleCall getFlagsParserRuleCall_4() { return cFlagsParserRuleCall_4; }

		//Limits
		public RuleCall getLimitsParserRuleCall_5() { return cLimitsParserRuleCall_5; }

		//Purge
		public RuleCall getPurgeParserRuleCall_6() { return cPurgeParserRuleCall_6; }

		//Rate
		public RuleCall getRateParserRuleCall_7() { return cRateParserRuleCall_7; }

		//Resource
		public RuleCall getResourceParserRuleCall_8() { return cResourceParserRuleCall_8; }

		//Shifts
		public RuleCall getShiftsParserRuleCall_9() { return cShiftsParserRuleCall_9; }

		//SupplementResource
		public RuleCall getSupplementResourceParserRuleCall_10() { return cSupplementResourceParserRuleCall_10; }
	}

	public class AllocateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Allocate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourcesAllocateResourceParserRuleCall_1_0 = (RuleCall)cResourcesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cResourcesAllocateResourceParserRuleCall_2_1_0 = (RuleCall)cResourcesAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/allocate.html
		//Allocate:
		//	"allocate" resources+=AllocateResource ("," resources+=AllocateResource)*;
		public ParserRule getRule() { return rule; }

		//"allocate" resources+=AllocateResource ("," resources+=AllocateResource)*
		public Group getGroup() { return cGroup; }

		//"allocate"
		public Keyword getAllocateKeyword_0() { return cAllocateKeyword_0; }

		//resources+=AllocateResource
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }

		//AllocateResource
		public RuleCall getResourcesAllocateResourceParserRuleCall_1_0() { return cResourcesAllocateResourceParserRuleCall_1_0; }

		//("," resources+=AllocateResource)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//resources+=AllocateResource
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }

		//AllocateResource
		public RuleCall getResourcesAllocateResourceParserRuleCall_2_1_0() { return cResourcesAllocateResourceParserRuleCall_2_1_0; }
	}

	public class AllocateResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllocateResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourceResourceCrossReference_0_0 = (CrossReference)cResourceAssignment_0.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_0_0_1 = (RuleCall)cResourceResourceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAllocateResourceAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AllocateResource:
		//	resource=[Resource] ("{" attributes+=AllocateResourceAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//resource=[Resource] ("{" attributes+=AllocateResourceAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//resource=[Resource]
		public Assignment getResourceAssignment_0() { return cResourceAssignment_0; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_0_0() { return cResourceResourceCrossReference_0_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_0_0_1() { return cResourceResourceIDTerminalRuleCall_0_0_1; }

		//("{" attributes+=AllocateResourceAttribute* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//attributes+=AllocateResourceAttribute*
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }

		//AllocateResourceAttribute
		public RuleCall getAttributesAllocateResourceAttributeParserRuleCall_1_1_0() { return cAttributesAllocateResourceAttributeParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class AllocateResourceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllocateResourceAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLimitsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPersistentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSelectParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShiftsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AllocateResourceAttribute:
		//	Alternative | Limits | Mandatory | Persistent | Select | Shifts;
		public ParserRule getRule() { return rule; }

		//Alternative | Limits | Mandatory | Persistent | Select | Shifts
		public Alternatives getAlternatives() { return cAlternatives; }

		//Alternative
		public RuleCall getAlternativeParserRuleCall_0() { return cAlternativeParserRuleCall_0; }

		//Limits
		public RuleCall getLimitsParserRuleCall_1() { return cLimitsParserRuleCall_1; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_2() { return cMandatoryParserRuleCall_2; }

		//Persistent
		public RuleCall getPersistentParserRuleCall_3() { return cPersistentParserRuleCall_3; }

		//Select
		public RuleCall getSelectParserRuleCall_4() { return cSelectParserRuleCall_4; }

		//Shifts
		public RuleCall getShiftsParserRuleCall_5() { return cShiftsParserRuleCall_5; }
	}

	public class NavigatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Navigator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesNavigatorAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/navigator.html
		//Navigator:
		//	"navigator" id=ID ("{" attributes+=NavigatorAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"navigator" id=ID ("{" attributes+=NavigatorAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"navigator"
		public Keyword getNavigatorKeyword_0() { return cNavigatorKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//("{" attributes+=NavigatorAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=NavigatorAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//NavigatorAttribute
		public RuleCall getAttributesNavigatorAttributeParserRuleCall_2_1_0() { return cAttributesNavigatorAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class NavigatorAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigatorAttribute");
		private final RuleCall cHideReportParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigatorAttribute:
		//	HideReport;
		public ParserRule getRule() { return rule; }

		//HideReport
		public RuleCall getHideReportParserRuleCall() { return cHideReportParserRuleCall; }
	}

	public class NewTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesNewTaskAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/newtask.html
		//NewTask:
		//	"newtask" id=ID text=STRING ("{" attributes+=NewTaskAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"newtask" id=ID text=STRING ("{" attributes+=NewTaskAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"newtask"
		public Keyword getNewtaskKeyword_0() { return cNewtaskKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }

		//("{" attributes+=NewTaskAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=NewTaskAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//NewTaskAttribute
		public RuleCall getAttributesNewTaskAttributeParserRuleCall_3_1_0() { return cAttributesNewTaskAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class NewTaskAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewTaskAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPriorityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemainingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWorkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NewTaskAttribute:
		//	End //	| StatusTimesheet
		//	| Priority | Remaining | Work;
		public ParserRule getRule() { return rule; }

		//End //	| StatusTimesheet
		//| Priority | Remaining | Work
		public Alternatives getAlternatives() { return cAlternatives; }

		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }

		//Priority
		public RuleCall getPriorityParserRuleCall_1() { return cPriorityParserRuleCall_1; }

		//Remaining
		public RuleCall getRemainingParserRuleCall_2() { return cRemainingParserRuleCall_2; }

		//Work
		public RuleCall getWorkParserRuleCall_3() { return cWorkParserRuleCall_3; }
	}

	public class NikuReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NikuReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_0_0 = (RuleCall)cFilenameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesNikuReportAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/nikureport.html
		//NikuReport:
		//	filename=STRING ("{" attributes+=NikuReportAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//filename=STRING ("{" attributes+=NikuReportAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//filename=STRING
		public Assignment getFilenameAssignment_0() { return cFilenameAssignment_0; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_0_0() { return cFilenameSTRINGTerminalRuleCall_0_0; }

		//("{" attributes+=NikuReportAttribute* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//attributes+=NikuReportAttribute*
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }

		//NikuReportAttribute
		public RuleCall getAttributesNikuReportAttributeParserRuleCall_1_1_0() { return cAttributesNikuReportAttributeParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class NikuReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NikuReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormatsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeadlineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHideResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHideTaskParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumberFormatParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPeriodParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStartParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTimeoffParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTitleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//NikuReportAttribute:
		//	End | Formats | Headline | HideResource | HideTask | NumberFormat | Period | Start | Timeoff | Title;
		public ParserRule getRule() { return rule; }

		//End | Formats | Headline | HideResource | HideTask | NumberFormat | Period | Start | Timeoff | Title
		public Alternatives getAlternatives() { return cAlternatives; }

		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }

		//Formats
		public RuleCall getFormatsParserRuleCall_1() { return cFormatsParserRuleCall_1; }

		//Headline
		public RuleCall getHeadlineParserRuleCall_2() { return cHeadlineParserRuleCall_2; }

		//HideResource
		public RuleCall getHideResourceParserRuleCall_3() { return cHideResourceParserRuleCall_3; }

		//HideTask
		public RuleCall getHideTaskParserRuleCall_4() { return cHideTaskParserRuleCall_4; }

		//NumberFormat
		public RuleCall getNumberFormatParserRuleCall_5() { return cNumberFormatParserRuleCall_5; }

		//Period
		public RuleCall getPeriodParserRuleCall_6() { return cPeriodParserRuleCall_6; }

		//Start
		public RuleCall getStartParserRuleCall_7() { return cStartParserRuleCall_7; }

		//Timeoff
		public RuleCall getTimeoffParserRuleCall_8() { return cTimeoffParserRuleCall_8; }

		//Title
		public RuleCall getTitleParserRuleCall_9() { return cTitleParserRuleCall_9; }
	}

	public class AlertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelAlertLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/alert.html
		//Alert:
		//	"alert" level=AlertLevel;
		public ParserRule getRule() { return rule; }

		//"alert" level=AlertLevel
		public Group getGroup() { return cGroup; }

		//"alert"
		public Keyword getAlertKeyword_0() { return cAlertKeyword_0; }

		//level=AlertLevel
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }

		//AlertLevel
		public RuleCall getLevelAlertLevelEnumRuleCall_1_0() { return cLevelAlertLevelEnumRuleCall_1_0; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourcesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourcesResourceCrossReference_0_0 = (CrossReference)cResourcesAssignment_0.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_0_0_1 = (RuleCall)cResourcesResourceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cResourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_1_1_0 = (CrossReference)cResourcesAssignment_1_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_1_1_0_1 = (RuleCall)cResourcesResourceCrossReference_1_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/alternative.html
		//Alternative:
		//	resources+=[Resource] ("," resources+=[Resource])*;
		public ParserRule getRule() { return rule; }

		//resources+=[Resource] ("," resources+=[Resource])*
		public Group getGroup() { return cGroup; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_0() { return cResourcesAssignment_0; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_0_0() { return cResourcesResourceCrossReference_0_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_0_0_1() { return cResourcesResourceIDTerminalRuleCall_0_0_1; }

		//("," resources+=[Resource])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_1_1() { return cResourcesAssignment_1_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_1_1_0() { return cResourcesResourceCrossReference_1_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_1_1_0_1() { return cResourcesResourceIDTerminalRuleCall_1_1_0_1; }
	}

	public class AuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Author");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/author.html
		//Author:
		//	"author" resource=[Resource];
		public ParserRule getRule() { return rule; }

		//"author" resource=[Resource]
		public Group getGroup() { return cGroup; }

		//"author"
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }

		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
	}

	public class BalanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Balance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBalanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCostAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCostAccountCrossReference_1_0 = (CrossReference)cCostAssignment_1.eContents().get(0);
		private final RuleCall cCostAccountIDTerminalRuleCall_1_0_1 = (RuleCall)cCostAccountCrossReference_1_0.eContents().get(1);
		private final Assignment cRevenueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRevenueAccountCrossReference_2_0 = (CrossReference)cRevenueAssignment_2.eContents().get(0);
		private final RuleCall cRevenueAccountIDTerminalRuleCall_2_0_1 = (RuleCall)cRevenueAccountCrossReference_2_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/balance.html
		//Balance:
		//	"balance" cost=[Account] revenue=[Account];
		public ParserRule getRule() { return rule; }

		//"balance" cost=[Account] revenue=[Account]
		public Group getGroup() { return cGroup; }

		//"balance"
		public Keyword getBalanceKeyword_0() { return cBalanceKeyword_0; }

		//cost=[Account]
		public Assignment getCostAssignment_1() { return cCostAssignment_1; }

		//[Account]
		public CrossReference getCostAccountCrossReference_1_0() { return cCostAccountCrossReference_1_0; }

		//ID
		public RuleCall getCostAccountIDTerminalRuleCall_1_0_1() { return cCostAccountIDTerminalRuleCall_1_0_1; }

		//revenue=[Account]
		public Assignment getRevenueAssignment_2() { return cRevenueAssignment_2; }

		//[Account]
		public CrossReference getRevenueAccountCrossReference_2_0() { return cRevenueAccountCrossReference_2_0; }

		//ID
		public RuleCall getRevenueAccountIDTerminalRuleCall_2_0_1() { return cRevenueAccountIDTerminalRuleCall_2_0_1; }
	}

	public class BookingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Booking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cBookingTaskParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cBookingResourceParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalInterval4ParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cOvertimeKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cOvertimeAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cOvertimeINTTerminalRuleCall_3_1_0_1_0 = (RuleCall)cOvertimeAssignment_3_1_0_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cUnorderedGroup_3_1.eContents().get(1);
		private final Keyword cSloppyKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cSloppyAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cSloppyINTTerminalRuleCall_3_1_1_1_0 = (RuleCall)cSloppyAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/booking.html	
		//// http://www.taskjuggler.org/tj3/manual/booking.task.html
		//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
		//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
		////	WORKING_TIME_ONLY = '0' |
		////	PLUS_OFF_DUTY = '1' |
		////	PLUS_VACATION = '2'
		//Booking:
		//	"booking" (BookingTask | BookingResource) interval=Interval4 ("{" (("overtime" overtime=INT)? & ("sloppy"
		//	sloppy=INT)?) "}")?;
		public ParserRule getRule() { return rule; }

		//"booking" (BookingTask | BookingResource) interval=Interval4 ("{" (("overtime" overtime=INT)? & ("sloppy" sloppy=INT)?)
		//"}")?
		public Group getGroup() { return cGroup; }

		//"booking"
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }

		//BookingTask | BookingResource
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//BookingTask
		public RuleCall getBookingTaskParserRuleCall_1_0() { return cBookingTaskParserRuleCall_1_0; }

		//BookingResource
		public RuleCall getBookingResourceParserRuleCall_1_1() { return cBookingResourceParserRuleCall_1_1; }

		//interval=Interval4
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }

		//Interval4
		public RuleCall getIntervalInterval4ParserRuleCall_2_0() { return cIntervalInterval4ParserRuleCall_2_0; }

		//("{" (("overtime" overtime=INT)? & ("sloppy" sloppy=INT)?) "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("overtime" overtime=INT)? & ("sloppy" sloppy=INT)?
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }

		//("overtime" overtime=INT)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"overtime"
		public Keyword getOvertimeKeyword_3_1_0_0() { return cOvertimeKeyword_3_1_0_0; }

		//overtime=INT
		public Assignment getOvertimeAssignment_3_1_0_1() { return cOvertimeAssignment_3_1_0_1; }

		//INT
		public RuleCall getOvertimeINTTerminalRuleCall_3_1_0_1_0() { return cOvertimeINTTerminalRuleCall_3_1_0_1_0; }

		//("sloppy" sloppy=INT)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//"sloppy"
		public Keyword getSloppyKeyword_3_1_1_0() { return cSloppyKeyword_3_1_1_0; }

		//sloppy=INT
		public Assignment getSloppyAssignment_3_1_1_1() { return cSloppyAssignment_3_1_1_1; }

		//INT
		public RuleCall getSloppyINTTerminalRuleCall_3_1_1_1_0() { return cSloppyINTTerminalRuleCall_3_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class BookingTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BookingTask");
		private final Assignment cResourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_0 = (CrossReference)cResourceAssignment.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_0_1 = (RuleCall)cResourceResourceCrossReference_0.eContents().get(1);
		
		//BookingTask:
		//	resource=[Resource];
		public ParserRule getRule() { return rule; }

		//resource=[Resource]
		public Assignment getResourceAssignment() { return cResourceAssignment; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_0() { return cResourceResourceCrossReference_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_0_1() { return cResourceResourceIDTerminalRuleCall_0_1; }
	}

	public class BookingResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BookingResource");
		private final Assignment cTaskAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_0 = (CrossReference)cTaskAssignment.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_0_1 = (RuleCall)cTaskTaskCrossReference_0.eContents().get(1);
		
		//BookingResource:
		//	task=[Task];
		public ParserRule getRule() { return rule; }

		//task=[Task]
		public Assignment getTaskAssignment() { return cTaskAssignment; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_0() { return cTaskTaskCrossReference_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_0_1() { return cTaskTaskIDTerminalRuleCall_0_1; }
	}

	public class CaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Caption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/caption.html
		//Caption:
		//	"caption" RichText;
		public ParserRule getRule() { return rule; }

		//"caption" RichText
		public Group getGroup() { return cGroup; }

		//"caption"
		public Keyword getCaptionKeyword_0() { return cCaptionKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class CellColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellcolorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorSTRINGTerminalRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/cellcolor.column.html
		//CellColor:
		//	"cellcolor" expression=LogicalExpression color=STRING;
		public ParserRule getRule() { return rule; }

		//"cellcolor" expression=LogicalExpression color=STRING
		public Group getGroup() { return cGroup; }

		//"cellcolor"
		public Keyword getCellcolorKeyword_0() { return cCellcolorKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }

		//color=STRING
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//STRING
		public RuleCall getColorSTRINGTerminalRuleCall_2_0() { return cColorSTRINGTerminalRuleCall_2_0; }
	}

	public class CellTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCelltextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cExpresssionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpresssionLogicalExpressionParserRuleCall_2_0 = (RuleCall)cExpresssionAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/celltext.column.html
		//CellText:
		//	"celltext" text=STRING expresssion=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"celltext" text=STRING expresssion=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"celltext"
		public Keyword getCelltextKeyword_0() { return cCelltextKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }

		//expresssion=LogicalExpression
		public Assignment getExpresssionAssignment_2() { return cExpresssionAssignment_2; }

		//LogicalExpression
		public RuleCall getExpresssionLogicalExpressionParserRuleCall_2_0() { return cExpresssionLogicalExpressionParserRuleCall_2_0; }
	}

	public class CenterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Center");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCenterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/center.html
		//Center:
		//	"center" RichText;
		public ParserRule getRule() { return rule; }

		//"center" RichText
		public Group getGroup() { return cGroup; }

		//"center"
		public Keyword getCenterKeyword_0() { return cCenterKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class ChargeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Charge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChargeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountXFloatParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		private final Assignment cAppliesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAppliesChargeAppliesEnumRuleCall_2_0 = (RuleCall)cAppliesAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/charge.html
		//Charge:
		//	"charge" amount=XFloat applies=ChargeApplies;
		public ParserRule getRule() { return rule; }

		//"charge" amount=XFloat applies=ChargeApplies
		public Group getGroup() { return cGroup; }

		//"charge"
		public Keyword getChargeKeyword_0() { return cChargeKeyword_0; }

		//amount=XFloat
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }

		//XFloat
		public RuleCall getAmountXFloatParserRuleCall_1_0() { return cAmountXFloatParserRuleCall_1_0; }

		//applies=ChargeApplies
		public Assignment getAppliesAssignment_2() { return cAppliesAssignment_2; }

		//ChargeApplies
		public RuleCall getAppliesChargeAppliesEnumRuleCall_2_0() { return cAppliesChargeAppliesEnumRuleCall_2_0; }
	}

	public class ChargeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChargeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChargesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccountSharesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccountSharesAccountShareParserRuleCall_1_0 = (RuleCall)cAccountSharesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAccountSharesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAccountSharesAccountShareParserRuleCall_2_1_0 = (RuleCall)cAccountSharesAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/chargeset.html
		//ChargeSet:
		//	"chargeset" accountShares+=AccountShare ("," accountShares+=AccountShare)*;
		public ParserRule getRule() { return rule; }

		//"chargeset" accountShares+=AccountShare ("," accountShares+=AccountShare)*
		public Group getGroup() { return cGroup; }

		//"chargeset"
		public Keyword getChargesetKeyword_0() { return cChargesetKeyword_0; }

		//accountShares+=AccountShare
		public Assignment getAccountSharesAssignment_1() { return cAccountSharesAssignment_1; }

		//AccountShare
		public RuleCall getAccountSharesAccountShareParserRuleCall_1_0() { return cAccountSharesAccountShareParserRuleCall_1_0; }

		//("," accountShares+=AccountShare)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//accountShares+=AccountShare
		public Assignment getAccountSharesAssignment_2_1() { return cAccountSharesAssignment_2_1; }

		//AccountShare
		public RuleCall getAccountSharesAccountShareParserRuleCall_2_1_0() { return cAccountSharesAccountShareParserRuleCall_2_1_0; }
	}

	public class ColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Columns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_1_0 = (RuleCall)cColumnsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColumnsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_2_1_0 = (RuleCall)cColumnsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/columns.html
		//Columns:
		//	"columns" columns+=Column ("," columns+=Column)*;
		public ParserRule getRule() { return rule; }

		//"columns" columns+=Column ("," columns+=Column)*
		public Group getGroup() { return cGroup; }

		//"columns"
		public Keyword getColumnsKeyword_0() { return cColumnsKeyword_0; }

		//columns+=Column
		public Assignment getColumnsAssignment_1() { return cColumnsAssignment_1; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_1_0() { return cColumnsColumnParserRuleCall_1_0; }

		//("," columns+=Column)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//columns+=Column
		public Assignment getColumnsAssignment_2_1() { return cColumnsAssignment_2_1; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_1_0() { return cColumnsColumnParserRuleCall_2_1_0; }
	}

	public class CompleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Complete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompleteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompleteXFloatParserRuleCall_1_0 = (RuleCall)cCompleteAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/complete.html
		//Complete:
		//	"complete" complete=XFloat;
		public ParserRule getRule() { return rule; }

		//"complete" complete=XFloat
		public Group getGroup() { return cGroup; }

		//"complete"
		public Keyword getCompleteKeyword_0() { return cCompleteKeyword_0; }

		//complete=XFloat
		public Assignment getCompleteAssignment_1() { return cCompleteAssignment_1; }

		//XFloat
		public RuleCall getCompleteXFloatParserRuleCall_1_0() { return cCompleteXFloatParserRuleCall_1_0; }
	}

	public class CopyrightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Copyright");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyrightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/copyright.html
		//Copyright:
		//	"copyright" text=STRING;
		public ParserRule getRule() { return rule; }

		//"copyright" text=STRING
		public Group getGroup() { return cGroup; }

		//"copyright"
		public Keyword getCopyrightKeyword_0() { return cCopyrightKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class CreditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Credit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreditKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateISODATETerminalRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountXFloatParserRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/credit.html	
		//Credit:
		//	"credit" date=ISODATE description=STRING amount=XFloat;
		public ParserRule getRule() { return rule; }

		//"credit" date=ISODATE description=STRING amount=XFloat
		public Group getGroup() { return cGroup; }

		//"credit"
		public Keyword getCreditKeyword_0() { return cCreditKeyword_0; }

		//date=ISODATE
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }

		//ISODATE
		public RuleCall getDateISODATETerminalRuleCall_1_0() { return cDateISODATETerminalRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//amount=XFloat
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }

		//XFloat
		public RuleCall getAmountXFloatParserRuleCall_3_0() { return cAmountXFloatParserRuleCall_3_0; }
	}

	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Currency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCurrencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCurrencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCurrencySTRINGTerminalRuleCall_1_0 = (RuleCall)cCurrencyAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/currency.html
		//Currency:
		//	"currency" currency=STRING;
		public ParserRule getRule() { return rule; }

		//"currency" currency=STRING
		public Group getGroup() { return cGroup; }

		//"currency"
		public Keyword getCurrencyKeyword_0() { return cCurrencyKeyword_0; }

		//currency=STRING
		public Assignment getCurrencyAssignment_1() { return cCurrencyAssignment_1; }

		//STRING
		public RuleCall getCurrencySTRINGTerminalRuleCall_1_0() { return cCurrencySTRINGTerminalRuleCall_1_0; }
	}

	public class CurrencyFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CurrencyFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCurrencyformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRealFormatParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
		//CurrencyFormat:
		//	"currencyformat" RealFormat;
		public ParserRule getRule() { return rule; }

		//"currencyformat" RealFormat
		public Group getGroup() { return cGroup; }

		//"currencyformat"
		public Keyword getCurrencyformatKeyword_0() { return cCurrencyformatKeyword_0; }

		//RealFormat
		public RuleCall getRealFormatParserRuleCall_1() { return cRealFormatParserRuleCall_1; }
	}

	public class DateExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateExtend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExtendAttributeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/date.extend.html
		//DateExtend:
		//	"date" ExtendAttribute;
		public ParserRule getRule() { return rule; }

		//"date" ExtendAttribute
		public Group getGroup() { return cGroup; }

		//"date"
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }

		//ExtendAttribute
		public RuleCall getExtendAttributeParserRuleCall_1() { return cExtendAttributeParserRuleCall_1; }
	}

	public class DailyMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DailyMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDailymaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/dailymax.html
		//DailyMax:
		//	"dailymax" Limit;
		public ParserRule getRule() { return rule; }

		//"dailymax" Limit
		public Group getGroup() { return cGroup; }

		//"dailymax"
		public Keyword getDailymaxKeyword_0() { return cDailymaxKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class DailyMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DailyMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDailyminKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/dailymin.html
		//DailyMin:
		//	"dailymin" Limit;
		public ParserRule getRule() { return rule; }

		//"dailymin" Limit
		public Group getGroup() { return cGroup; }

		//"dailymin"
		public Keyword getDailyminKeyword_0() { return cDailyminKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class DailyWorkingHoursElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DailyWorkingHours");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDailyworkinghoursKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDailyWorkingHoursAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDailyWorkingHoursXFloatParserRuleCall_1_0 = (RuleCall)cDailyWorkingHoursAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/dailyworkinghours.html
		//DailyWorkingHours:
		//	"dailyworkinghours" dailyWorkingHours=XFloat;
		public ParserRule getRule() { return rule; }

		//"dailyworkinghours" dailyWorkingHours=XFloat
		public Group getGroup() { return cGroup; }

		//"dailyworkinghours"
		public Keyword getDailyworkinghoursKeyword_0() { return cDailyworkinghoursKeyword_0; }

		//dailyWorkingHours=XFloat
		public Assignment getDailyWorkingHoursAssignment_1() { return cDailyWorkingHoursAssignment_1; }

		//XFloat
		public RuleCall getDailyWorkingHoursXFloatParserRuleCall_1_0() { return cDailyWorkingHoursXFloatParserRuleCall_1_0; }
	}

	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definitions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_0 = (Keyword)cAllAssignment_0.eContents().get(0);
		private final Assignment cNoneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_0 = (Keyword)cNoneAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cAlternatives.eContents().get(2);
		private final Assignment cFlagsAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cFlagsFlagsKeyword_2_0_0 = (Keyword)cFlagsAssignment_2_0.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cResourcesResourcesKeyword_2_1_0 = (Keyword)cResourcesAssignment_2_1.eContents().get(0);
		private final Assignment cTasksAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cTasksTasksKeyword_2_2_0 = (Keyword)cTasksAssignment_2_2.eContents().get(0);
		private final Assignment cProjectAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cProjectProjectKeyword_2_3_0 = (Keyword)cProjectAssignment_2_3.eContents().get(0);
		private final Assignment cProjectidsAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cProjectidsProjectidsKeyword_2_4_0 = (Keyword)cProjectidsAssignment_2_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/date.html
		//// http://www.taskjuggler.org/tj3/manual/date.extend.html
		//// Date: see ISODATE below
		//// http://www.taskjuggler.org/tj3/manual/definitions.html
		//Definitions:
		//	all?="*" | none?="-" | flags?="flags" & resources?="resources" & tasks?="tasks" & project?="project" &
		//	projectids?="projectids";
		public ParserRule getRule() { return rule; }

		//all?="*" | none?="-" | flags?="flags" & resources?="resources" & tasks?="tasks" & project?="project" &
		//projectids?="projectids"
		public Alternatives getAlternatives() { return cAlternatives; }

		//all?="*"
		public Assignment getAllAssignment_0() { return cAllAssignment_0; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_0() { return cAllAsteriskKeyword_0_0; }

		//none?="-"
		public Assignment getNoneAssignment_1() { return cNoneAssignment_1; }

		//"-"
		public Keyword getNoneHyphenMinusKeyword_1_0() { return cNoneHyphenMinusKeyword_1_0; }

		//flags?="flags" & resources?="resources" & tasks?="tasks" & project?="project" & projectids?="projectids"
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//flags?="flags"
		public Assignment getFlagsAssignment_2_0() { return cFlagsAssignment_2_0; }

		//"flags"
		public Keyword getFlagsFlagsKeyword_2_0_0() { return cFlagsFlagsKeyword_2_0_0; }

		//resources?="resources"
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }

		//"resources"
		public Keyword getResourcesResourcesKeyword_2_1_0() { return cResourcesResourcesKeyword_2_1_0; }

		//tasks?="tasks"
		public Assignment getTasksAssignment_2_2() { return cTasksAssignment_2_2; }

		//"tasks"
		public Keyword getTasksTasksKeyword_2_2_0() { return cTasksTasksKeyword_2_2_0; }

		//project?="project"
		public Assignment getProjectAssignment_2_3() { return cProjectAssignment_2_3; }

		//"project"
		public Keyword getProjectProjectKeyword_2_3_0() { return cProjectProjectKeyword_2_3_0; }

		//projectids?="projectids"
		public Assignment getProjectidsAssignment_2_4() { return cProjectidsAssignment_2_4; }

		//"projectids"
		public Keyword getProjectidsProjectidsKeyword_2_4_0() { return cProjectidsProjectidsKeyword_2_4_0; }
	}

	public class DependsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Depends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTaskDependencyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/depends.html
		//Depends:
		//	"depends" TaskDependency;
		public ParserRule getRule() { return rule; }

		//"depends" TaskDependency
		public Group getGroup() { return cGroup; }

		//"depends"
		public Keyword getDependsKeyword_0() { return cDependsKeyword_0; }

		//TaskDependency
		public RuleCall getTaskDependencyParserRuleCall_1() { return cTaskDependencyParserRuleCall_1; }
	}

	public class DetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Details");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDetailsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/details.html
		//Details:
		//	"details" RichText;
		public ParserRule getRule() { return rule; }

		//"details" RichText
		public Group getGroup() { return cGroup; }

		//"details"
		public Keyword getDetailsKeyword_0() { return cDetailsKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/duration.html
		//Duration:
		//	"duration" duration=DurationQuantity;
		public ParserRule getRule() { return rule; }

		//"duration" duration=DurationQuantity
		public Group getGroup() { return cGroup; }

		//"duration"
		public Keyword getDurationKeyword_0() { return cDurationKeyword_0; }

		//duration=DurationQuantity
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }

		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_0() { return cDurationDurationQuantityParserRuleCall_1_0; }
	}

	public class EfficiencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Efficiency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEfficiencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEfficiencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEfficiencyXFloatParserRuleCall_1_0 = (RuleCall)cEfficiencyAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/efficiency.html
		//Efficiency:
		//	"efficiency" efficiency=XFloat;
		public ParserRule getRule() { return rule; }

		//"efficiency" efficiency=XFloat
		public Group getGroup() { return cGroup; }

		//"efficiency"
		public Keyword getEfficiencyKeyword_0() { return cEfficiencyKeyword_0; }

		//efficiency=XFloat
		public Assignment getEfficiencyAssignment_1() { return cEfficiencyAssignment_1; }

		//XFloat
		public RuleCall getEfficiencyXFloatParserRuleCall_1_0() { return cEfficiencyXFloatParserRuleCall_1_0; }
	}

	public class EffortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffortDurationQuantityParserRuleCall_1_0 = (RuleCall)cEffortAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/effort.html
		//Effort:
		//	"effort" effort=DurationQuantity;
		public ParserRule getRule() { return rule; }

		//"effort" effort=DurationQuantity
		public Group getGroup() { return cGroup; }

		//"effort"
		public Keyword getEffortKeyword_0() { return cEffortKeyword_0; }

		//effort=DurationQuantity
		public Assignment getEffortAssignment_1() { return cEffortAssignment_1; }

		//DurationQuantity
		public RuleCall getEffortDurationQuantityParserRuleCall_1_0() { return cEffortDurationQuantityParserRuleCall_1_0; }
	}

	public class EmailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Email");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAddressAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddressSTRINGTerminalRuleCall_1_0 = (RuleCall)cAddressAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/email.html
		//Email:
		//	"email" address=STRING;
		public ParserRule getRule() { return rule; }

		//"email" address=STRING
		public Group getGroup() { return cGroup; }

		//"email"
		public Keyword getEmailKeyword_0() { return cEmailKeyword_0; }

		//address=STRING
		public Assignment getAddressAssignment_1() { return cAddressAssignment_1; }

		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_1_0() { return cAddressSTRINGTerminalRuleCall_1_0; }
	}

	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndISODATETerminalRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/end.html
		//End:
		//	"end" end=ISODATE;
		public ParserRule getRule() { return rule; }

		//"end" end=ISODATE
		public Group getGroup() { return cGroup; }

		//"end"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }

		//end=ISODATE
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }

		//ISODATE
		public RuleCall getEndISODATETerminalRuleCall_1_0() { return cEndISODATETerminalRuleCall_1_0; }
	}

	public class EndCreditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndCredit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndcreditKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCreditAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCreditXFloatParserRuleCall_1_0 = (RuleCall)cCreditAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/endcredit.html
		//EndCredit:
		//	"endcredit" credit=XFloat;
		public ParserRule getRule() { return rule; }

		//"endcredit" credit=XFloat
		public Group getGroup() { return cGroup; }

		//"endcredit"
		public Keyword getEndcreditKeyword_0() { return cEndcreditKeyword_0; }

		//credit=XFloat
		public Assignment getCreditAssignment_1() { return cCreditAssignment_1; }

		//XFloat
		public RuleCall getCreditXFloatParserRuleCall_1_0() { return cCreditXFloatParserRuleCall_1_0; }
	}

	public class EpilogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Epilog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEpilogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/epilog.html
		//Epilog:
		//	"epilog" RichText;
		public ParserRule getRule() { return rule; }

		//"epilog" RichText
		public Group getGroup() { return cGroup; }

		//"epilog"
		public Keyword getEpilogKeyword_0() { return cEpilogKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeTaskKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeReourceKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cReferenceAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cReferenceReferenceExtendParserRuleCall_2_0_1_0 = (RuleCall)cReferenceAssignment_2_0_1.eContents().get(0);
		private final Assignment cDateAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cDateDateExtendParserRuleCall_2_1_0 = (RuleCall)cDateAssignment_2_1.eContents().get(0);
		private final Assignment cRichtextAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cRichtextRichTextExtendParserRuleCall_2_2_0 = (RuleCall)cRichtextAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Assignment cTextAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cTextTextExtendParserRuleCall_2_3_0_0 = (RuleCall)cTextAssignment_2_3_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/extend.html
		//Extend:
		//	"extend" type=("task" | "reource") ("{" reference=ReferenceExtend & date=DateExtend & richtext=RichTextExtend &
		//	text=TextExtend "}")?;
		public ParserRule getRule() { return rule; }

		//"extend" type=("task" | "reource") ("{" reference=ReferenceExtend & date=DateExtend & richtext=RichTextExtend &
		//text=TextExtend "}")?
		public Group getGroup() { return cGroup; }

		//"extend"
		public Keyword getExtendKeyword_0() { return cExtendKeyword_0; }

		//type=("task" | "reource")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"task" | "reource"
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//"task"
		public Keyword getTypeTaskKeyword_1_0_0() { return cTypeTaskKeyword_1_0_0; }

		//"reource"
		public Keyword getTypeReourceKeyword_1_0_1() { return cTypeReourceKeyword_1_0_1; }

		//("{" reference=ReferenceExtend & date=DateExtend & richtext=RichTextExtend & text=TextExtend "}")?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"{" reference=ReferenceExtend
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//reference=ReferenceExtend
		public Assignment getReferenceAssignment_2_0_1() { return cReferenceAssignment_2_0_1; }

		//ReferenceExtend
		public RuleCall getReferenceReferenceExtendParserRuleCall_2_0_1_0() { return cReferenceReferenceExtendParserRuleCall_2_0_1_0; }

		//date=DateExtend
		public Assignment getDateAssignment_2_1() { return cDateAssignment_2_1; }

		//DateExtend
		public RuleCall getDateDateExtendParserRuleCall_2_1_0() { return cDateDateExtendParserRuleCall_2_1_0; }

		//richtext=RichTextExtend
		public Assignment getRichtextAssignment_2_2() { return cRichtextAssignment_2_2; }

		//RichTextExtend
		public RuleCall getRichtextRichTextExtendParserRuleCall_2_2_0() { return cRichtextRichTextExtendParserRuleCall_2_2_0; }

		//text=TextExtend "}"
		public Group getGroup_2_3() { return cGroup_2_3; }

		//text=TextExtend
		public Assignment getTextAssignment_2_3_0() { return cTextAssignment_2_3_0; }

		//TextExtend
		public RuleCall getTextTextExtendParserRuleCall_2_3_0_0() { return cTextTextExtendParserRuleCall_2_3_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3_1() { return cRightCurlyBracketKeyword_2_3_1; }
	}

	public class FailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/fail.html
		//Fail:
		//	"fail" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"fail" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"fail"
		public Keyword getFailKeyword_0() { return cFailKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class FlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlagsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlagsIDTerminalRuleCall_1_0 = (RuleCall)cFlagsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFlagsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFlagsIDTerminalRuleCall_2_1_0 = (RuleCall)cFlagsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/flags.html
		//Flags:
		//	"flags" flags+=ID ("," flags+=ID)*;
		public ParserRule getRule() { return rule; }

		//"flags" flags+=ID ("," flags+=ID)*
		public Group getGroup() { return cGroup; }

		//"flags"
		public Keyword getFlagsKeyword_0() { return cFlagsKeyword_0; }

		//flags+=ID
		public Assignment getFlagsAssignment_1() { return cFlagsAssignment_1; }

		//ID
		public RuleCall getFlagsIDTerminalRuleCall_1_0() { return cFlagsIDTerminalRuleCall_1_0; }

		//("," flags+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//flags+=ID
		public Assignment getFlagsAssignment_2_1() { return cFlagsAssignment_2_1; }

		//ID
		public RuleCall getFlagsIDTerminalRuleCall_2_1_0() { return cFlagsIDTerminalRuleCall_2_1_0; }
	}

	public class FontColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontcolorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorSTRINGTerminalRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/fontcolor.column.html
		//FontColor:
		//	"fontcolor" color=STRING;
		public ParserRule getRule() { return rule; }

		//"fontcolor" color=STRING
		public Group getGroup() { return cGroup; }

		//"fontcolor"
		public Keyword getFontcolorKeyword_0() { return cFontcolorKeyword_0; }

		//color=STRING
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//STRING
		public RuleCall getColorSTRINGTerminalRuleCall_1_0() { return cColorSTRINGTerminalRuleCall_1_0; }
	}

	public class FooterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Footer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFooterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/footer.html
		//Footer:
		//	"footer" RichText;
		public ParserRule getRule() { return rule; }

		//"footer" RichText
		public Group getGroup() { return cGroup; }

		//"footer"
		public Keyword getFooterKeyword_0() { return cFooterKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class FormatsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formats");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormatsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormatsReportFormatEnumRuleCall_1_0 = (RuleCall)cFormatsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatsReportFormatEnumRuleCall_2_1_0 = (RuleCall)cFormatsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/formats.html
		//Formats:
		//	"formats" formats+=ReportFormat ("," formats+=ReportFormat)*;
		public ParserRule getRule() { return rule; }

		//"formats" formats+=ReportFormat ("," formats+=ReportFormat)*
		public Group getGroup() { return cGroup; }

		//"formats"
		public Keyword getFormatsKeyword_0() { return cFormatsKeyword_0; }

		//formats+=ReportFormat
		public Assignment getFormatsAssignment_1() { return cFormatsAssignment_1; }

		//ReportFormat
		public RuleCall getFormatsReportFormatEnumRuleCall_1_0() { return cFormatsReportFormatEnumRuleCall_1_0; }

		//("," formats+=ReportFormat)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//formats+=ReportFormat
		public Assignment getFormatsAssignment_2_1() { return cFormatsAssignment_2_1; }

		//ReportFormat
		public RuleCall getFormatsReportFormatEnumRuleCall_2_1_0() { return cFormatsReportFormatEnumRuleCall_2_1_0; }
	}

	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Functions");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/functions.html
		//// TODO: Functions
		//Functions:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class GapDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GapDuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGapdurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDurationQuantityParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/gapduration.html
		//GapDuration:
		//	"gapduration" DurationQuantity;
		public ParserRule getRule() { return rule; }

		//"gapduration" DurationQuantity
		public Group getGroup() { return cGroup; }

		//"gapduration"
		public Keyword getGapdurationKeyword_0() { return cGapdurationKeyword_0; }

		//DurationQuantity
		public RuleCall getDurationQuantityParserRuleCall_1() { return cDurationQuantityParserRuleCall_1; }
	}

	public class GapLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GapLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGaplengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDurationQuantityParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/gaplength.html
		//GapLength:
		//	"gaplength" DurationQuantity;
		public ParserRule getRule() { return rule; }

		//"gaplength" DurationQuantity
		public Group getGroup() { return cGroup; }

		//"gaplength"
		public Keyword getGaplengthKeyword_0() { return cGaplengthKeyword_0; }

		//DurationQuantity
		public RuleCall getDurationQuantityParserRuleCall_1() { return cDurationQuantityParserRuleCall_1; }
	}

	public class HAlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HAlign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cJustificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJustificationJustificationEnumRuleCall_1_0 = (RuleCall)cJustificationAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/halign.column.html
		//// http://www.taskjuggler.org/tj3/manual/halign.center.html
		//// http://www.taskjuggler.org/tj3/manual/halign.left.html
		//// http://www.taskjuggler.org/tj3/manual/halign.right.html
		//HAlign:
		//	expression=LogicalExpression justification=Justification;
		public ParserRule getRule() { return rule; }

		//expression=LogicalExpression justification=Justification
		public Group getGroup() { return cGroup; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_0_0() { return cExpressionLogicalExpressionParserRuleCall_0_0; }

		//justification=Justification
		public Assignment getJustificationAssignment_1() { return cJustificationAssignment_1; }

		//Justification
		public RuleCall getJustificationJustificationEnumRuleCall_1_0() { return cJustificationJustificationEnumRuleCall_1_0; }
	}

	public class HasAlertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HasAlert");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/hasalert.html
		//// TODO - has alert
		//HasAlert:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeaderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/header.html
		//Header:
		//	"header" RichText;
		public ParserRule getRule() { return rule; }

		//"header" RichText
		public Group getGroup() { return cGroup; }

		//"header"
		public Keyword getHeaderKeyword_0() { return cHeaderKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class HeadlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Headline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadlineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/headline.html
		//Headline:
		//	"headline" RichText;
		public ParserRule getRule() { return rule; }

		//"headline" RichText
		public Group getGroup() { return cGroup; }

		//"headline"
		public Keyword getHeadlineKeyword_0() { return cHeadlineKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class HideJournalEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideJournalEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHidejournalentryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLogicalFlagExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/hidejournalentry.html
		//HideJournalEntry:
		//	"hidejournalentry" LogicalFlagExpression;
		public ParserRule getRule() { return rule; }

		//"hidejournalentry" LogicalFlagExpression
		public Group getGroup() { return cGroup; }

		//"hidejournalentry"
		public Keyword getHidejournalentryKeyword_0() { return cHidejournalentryKeyword_0; }

		//LogicalFlagExpression
		public RuleCall getLogicalFlagExpressionParserRuleCall_1() { return cLogicalFlagExpressionParserRuleCall_1; }
	}

	public class HideReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHidereportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/hidereport.html
		//HideReport:
		//	"hidereport" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"hidereport" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"hidereport"
		public Keyword getHidereportKeyword_0() { return cHidereportKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class HideResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHideresourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/hideresource.html
		//HideResource:
		//	"hideresource" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"hideresource" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"hideresource"
		public Keyword getHideresourceKeyword_0() { return cHideresourceKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class HideTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHidetaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/hidetask.html
		//HideTask:
		//	"hidetask" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"hidetask" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"hidetask"
		public Keyword getHidetaskKeyword_0() { return cHidetaskKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/include.macro.html
		//// http://www.taskjuggler.org/tj3/manual/include.project.html
		//// TODO
		//Include:
		//	"include" filename=STRING;
		public ParserRule getRule() { return rule; }

		//"include" filename=STRING
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//filename=STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }
	}

	public class Interval1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interval1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATETerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATETerminalRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/include.properties.html
		//// TODO
		//// not sure how this include and the above include can be differentiated by parser
		//// http://www.taskjuggler.org/tj3/manual/inherit.extend.html
		//// do not implement.
		//// http://www.taskjuggler.org/tj3/manual/interval1.html
		//Interval1:
		//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity);
		public ParserRule getRule() { return rule; }

		//start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)
		public Group getGroup() { return cGroup; }

		//start=ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//ISODATE
		public RuleCall getStartISODATETerminalRuleCall_0_0() { return cStartISODATETerminalRuleCall_0_0; }

		//"-" end=ISODATE | "+" duration=DurationQuantity
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"-" end=ISODATE
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }

		//end=ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }

		//ISODATE
		public RuleCall getEndISODATETerminalRuleCall_1_0_1_0() { return cEndISODATETerminalRuleCall_1_0_1_0; }

		//"+" duration=DurationQuantity
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }

		//duration=DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }

		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}

	public class Interval2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interval2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATETerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATETerminalRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/interval2.html
		//Interval2:
		//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity);
		public ParserRule getRule() { return rule; }

		//start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)
		public Group getGroup() { return cGroup; }

		//start=ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//ISODATE
		public RuleCall getStartISODATETerminalRuleCall_0_0() { return cStartISODATETerminalRuleCall_0_0; }

		//"-" end=ISODATE | "+" duration=DurationQuantity
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"-" end=ISODATE
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }

		//end=ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }

		//ISODATE
		public RuleCall getEndISODATETerminalRuleCall_1_0_1_0() { return cEndISODATETerminalRuleCall_1_0_1_0; }

		//"+" duration=DurationQuantity
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }

		//duration=DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }

		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}

	public class Interval3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interval3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATETerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATETerminalRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/interval3.html
		//Interval3:
		//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)?;
		public ParserRule getRule() { return rule; }

		//start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)?
		public Group getGroup() { return cGroup; }

		//start=ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//ISODATE
		public RuleCall getStartISODATETerminalRuleCall_0_0() { return cStartISODATETerminalRuleCall_0_0; }

		//("-" end=ISODATE | "+" duration=DurationQuantity)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"-" end=ISODATE
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }

		//end=ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }

		//ISODATE
		public RuleCall getEndISODATETerminalRuleCall_1_0_1_0() { return cEndISODATETerminalRuleCall_1_0_1_0; }

		//"+" duration=DurationQuantity
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }

		//duration=DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }

		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}

	public class Interval4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interval4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATETerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATETerminalRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/interval4.html
		//Interval4:
		//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)?;
		public ParserRule getRule() { return rule; }

		//start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)?
		public Group getGroup() { return cGroup; }

		//start=ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//ISODATE
		public RuleCall getStartISODATETerminalRuleCall_0_0() { return cStartISODATETerminalRuleCall_0_0; }

		//("-" end=ISODATE | "+" duration=DurationQuantity)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"-" end=ISODATE
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }

		//end=ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }

		//ISODATE
		public RuleCall getEndISODATETerminalRuleCall_1_0_1_0() { return cEndISODATETerminalRuleCall_1_0_1_0; }

		//"+" duration=DurationQuantity
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }

		//duration=DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }

		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}

	public class JournalAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JournalAttributes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_0 = (Keyword)cAllAssignment_0.eContents().get(0);
		private final Assignment cNoneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_0 = (Keyword)cNoneAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cAlternatives.eContents().get(2);
		private final Assignment cFlagsAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cFlagsFlagsKeyword_2_0_0 = (Keyword)cFlagsAssignment_2_0.eContents().get(0);
		private final Assignment cPropertyAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cPropertyPropertyKeyword_2_1_0 = (Keyword)cPropertyAssignment_2_1.eContents().get(0);
		private final Assignment cDetailsAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cDetailsDetailsKeyword_2_2_0 = (Keyword)cDetailsAssignment_2_2.eContents().get(0);
		private final Assignment cAuthorAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cAuthorAuthorKeyword_2_3_0 = (Keyword)cAuthorAssignment_2_3.eContents().get(0);
		private final Assignment cHeadlineAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cHeadlineHeadlineKeyword_2_4_0 = (Keyword)cHeadlineAssignment_2_4.eContents().get(0);
		private final Assignment cDateAssignment_2_5 = (Assignment)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cDateDateKeyword_2_5_0 = (Keyword)cDateAssignment_2_5.eContents().get(0);
		private final Assignment cTimesheetAssignment_2_6 = (Assignment)cUnorderedGroup_2.eContents().get(6);
		private final Keyword cTimesheetTimesheetKeyword_2_6_0 = (Keyword)cTimesheetAssignment_2_6.eContents().get(0);
		private final Assignment cPropertyidAssignment_2_7 = (Assignment)cUnorderedGroup_2.eContents().get(7);
		private final Keyword cPropertyidPropertyidKeyword_2_7_0 = (Keyword)cPropertyidAssignment_2_7.eContents().get(0);
		private final Assignment cSummaryAssignment_2_8 = (Assignment)cUnorderedGroup_2.eContents().get(8);
		private final Keyword cSummarySummaryKeyword_2_8_0 = (Keyword)cSummaryAssignment_2_8.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/isactive.html
		//// http://www.taskjuggler.org/tj3/manual/ischildof.html
		//// http://www.taskjuggler.org/tj3/manual/isdependencyof.html
		//// http://www.taskjuggler.org/tj3/manual/isdutyof.html
		//// http://www.taskjuggler.org/tj3/manual/isfeatureof.html
		//// http://www.taskjuggler.org/tj3/manual/isleaf.html
		//// http://www.taskjuggler.org/tj3/manual/ismilestone.html
		//// http://www.taskjuggler.org/tj3/manual/isongoing.html
		//// http://www.taskjuggler.org/tj3/manual/isresource.html
		//// http://www.taskjuggler.org/tj3/manual/istask.html
		//// TODO
		//// http://www.taskjuggler.org/tj3/manual/journalattributes.html
		//JournalAttributes:
		//	all?="*" | none?="-" | flags?="flags" & property?="property" & details?="details" & author?="author" &
		//	headline?="headline" & date?="date" & timesheet?="timesheet" & propertyid?="propertyid" & summary?="summary";
		public ParserRule getRule() { return rule; }

		//all?="*" | none?="-" | flags?="flags" & property?="property" & details?="details" & author?="author" &
		//headline?="headline" & date?="date" & timesheet?="timesheet" & propertyid?="propertyid" & summary?="summary"
		public Alternatives getAlternatives() { return cAlternatives; }

		//all?="*"
		public Assignment getAllAssignment_0() { return cAllAssignment_0; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_0() { return cAllAsteriskKeyword_0_0; }

		//none?="-"
		public Assignment getNoneAssignment_1() { return cNoneAssignment_1; }

		//"-"
		public Keyword getNoneHyphenMinusKeyword_1_0() { return cNoneHyphenMinusKeyword_1_0; }

		//flags?="flags" & property?="property" & details?="details" & author?="author" & headline?="headline" & date?="date" &
		//timesheet?="timesheet" & propertyid?="propertyid" & summary?="summary"
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//flags?="flags"
		public Assignment getFlagsAssignment_2_0() { return cFlagsAssignment_2_0; }

		//"flags"
		public Keyword getFlagsFlagsKeyword_2_0_0() { return cFlagsFlagsKeyword_2_0_0; }

		//property?="property"
		public Assignment getPropertyAssignment_2_1() { return cPropertyAssignment_2_1; }

		//"property"
		public Keyword getPropertyPropertyKeyword_2_1_0() { return cPropertyPropertyKeyword_2_1_0; }

		//details?="details"
		public Assignment getDetailsAssignment_2_2() { return cDetailsAssignment_2_2; }

		//"details"
		public Keyword getDetailsDetailsKeyword_2_2_0() { return cDetailsDetailsKeyword_2_2_0; }

		//author?="author"
		public Assignment getAuthorAssignment_2_3() { return cAuthorAssignment_2_3; }

		//"author"
		public Keyword getAuthorAuthorKeyword_2_3_0() { return cAuthorAuthorKeyword_2_3_0; }

		//headline?="headline"
		public Assignment getHeadlineAssignment_2_4() { return cHeadlineAssignment_2_4; }

		//"headline"
		public Keyword getHeadlineHeadlineKeyword_2_4_0() { return cHeadlineHeadlineKeyword_2_4_0; }

		//date?="date"
		public Assignment getDateAssignment_2_5() { return cDateAssignment_2_5; }

		//"date"
		public Keyword getDateDateKeyword_2_5_0() { return cDateDateKeyword_2_5_0; }

		//timesheet?="timesheet"
		public Assignment getTimesheetAssignment_2_6() { return cTimesheetAssignment_2_6; }

		//"timesheet"
		public Keyword getTimesheetTimesheetKeyword_2_6_0() { return cTimesheetTimesheetKeyword_2_6_0; }

		//propertyid?="propertyid"
		public Assignment getPropertyidAssignment_2_7() { return cPropertyidAssignment_2_7; }

		//"propertyid"
		public Keyword getPropertyidPropertyidKeyword_2_7_0() { return cPropertyidPropertyidKeyword_2_7_0; }

		//summary?="summary"
		public Assignment getSummaryAssignment_2_8() { return cSummaryAssignment_2_8; }

		//"summary"
		public Keyword getSummarySummaryKeyword_2_8_0() { return cSummarySummaryKeyword_2_8_0; }
	}

	public class JournalEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JournalEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJournalentryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateISODATETerminalRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Assignment cHeadlineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeadlineSTRINGTerminalRuleCall_2_0 = (RuleCall)cHeadlineAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Assignment cAlertAssignment_3_1_0 = (Assignment)cUnorderedGroup_3_1.eContents().get(0);
		private final RuleCall cAlertAlertParserRuleCall_3_1_0_0 = (RuleCall)cAlertAssignment_3_1_0.eContents().get(0);
		private final Assignment cAuthorAssignment_3_1_1 = (Assignment)cUnorderedGroup_3_1.eContents().get(1);
		private final RuleCall cAuthorAuthorParserRuleCall_3_1_1_0 = (RuleCall)cAuthorAssignment_3_1_1.eContents().get(0);
		private final Assignment cDetailsAssignment_3_1_2 = (Assignment)cUnorderedGroup_3_1.eContents().get(2);
		private final RuleCall cDetailsDetailsParserRuleCall_3_1_2_0 = (RuleCall)cDetailsAssignment_3_1_2.eContents().get(0);
		private final Assignment cSummaryAssignment_3_1_3 = (Assignment)cUnorderedGroup_3_1.eContents().get(3);
		private final RuleCall cSummarySummaryParserRuleCall_3_1_3_0 = (RuleCall)cSummaryAssignment_3_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/journalentry.html
		//JournalEntry:
		//	"journalentry" date=ISODATE headline=STRING ("{" (alert=Alert & author=Author & details=Details & summary=Summary)
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"journalentry" date=ISODATE headline=STRING ("{" (alert=Alert & author=Author & details=Details & summary=Summary) "}")?
		public Group getGroup() { return cGroup; }

		//"journalentry"
		public Keyword getJournalentryKeyword_0() { return cJournalentryKeyword_0; }

		//date=ISODATE
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }

		//ISODATE
		public RuleCall getDateISODATETerminalRuleCall_1_0() { return cDateISODATETerminalRuleCall_1_0; }

		//headline=STRING
		public Assignment getHeadlineAssignment_2() { return cHeadlineAssignment_2; }

		//STRING
		public RuleCall getHeadlineSTRINGTerminalRuleCall_2_0() { return cHeadlineSTRINGTerminalRuleCall_2_0; }

		//("{" (alert=Alert & author=Author & details=Details & summary=Summary) "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//alert=Alert & author=Author & details=Details & summary=Summary
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }

		//alert=Alert
		public Assignment getAlertAssignment_3_1_0() { return cAlertAssignment_3_1_0; }

		//Alert
		public RuleCall getAlertAlertParserRuleCall_3_1_0_0() { return cAlertAlertParserRuleCall_3_1_0_0; }

		//author=Author
		public Assignment getAuthorAssignment_3_1_1() { return cAuthorAssignment_3_1_1; }

		//Author
		public RuleCall getAuthorAuthorParserRuleCall_3_1_1_0() { return cAuthorAuthorParserRuleCall_3_1_1_0; }

		//details=Details
		public Assignment getDetailsAssignment_3_1_2() { return cDetailsAssignment_3_1_2; }

		//Details
		public RuleCall getDetailsDetailsParserRuleCall_3_1_2_0() { return cDetailsDetailsParserRuleCall_3_1_2_0; }

		//summary=Summary
		public Assignment getSummaryAssignment_3_1_3() { return cSummaryAssignment_3_1_3; }

		//Summary
		public RuleCall getSummarySummaryParserRuleCall_3_1_3_0() { return cSummarySummaryParserRuleCall_3_1_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class JournalModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JournalMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJournalmodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModeJournalModeValueEnumRuleCall_1_0 = (RuleCall)cModeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/journalmode.html
		//JournalMode:
		//	"journalmode" mode=JournalModeValue;
		public ParserRule getRule() { return rule; }

		//"journalmode" mode=JournalModeValue
		public Group getGroup() { return cGroup; }

		//"journalmode"
		public Keyword getJournalmodeKeyword_0() { return cJournalmodeKeyword_0; }

		//mode=JournalModeValue
		public Assignment getModeAssignment_1() { return cModeAssignment_1; }

		//JournalModeValue
		public RuleCall getModeJournalModeValueEnumRuleCall_1_0() { return cModeJournalModeValueEnumRuleCall_1_0; }
	}

	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/left.html	
		//Left:
		//	"left" RichText;
		public ParserRule getRule() { return rule; }

		//"left" RichText
		public Group getGroup() { return cGroup; }

		//"left"
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Length");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthDurationQuantityParserRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/length.html
		//Length:
		//	"length" length=DurationQuantity;
		public ParserRule getRule() { return rule; }

		//"length" length=DurationQuantity
		public Group getGroup() { return cGroup; }

		//"length"
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }

		//length=DurationQuantity
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//DurationQuantity
		public RuleCall getLengthDurationQuantityParserRuleCall_1_0() { return cLengthDurationQuantityParserRuleCall_1_0; }
	}

	public class LimitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Limits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLimitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLimitsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesLimitsAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/limits.task.html
		//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
		//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
		//// http://www.taskjuggler.org/tj3/manual/limits.html
		//Limits:
		//	"limits" {Limits} ("{" attributes+=LimitsAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"limits" {Limits} ("{" attributes+=LimitsAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"limits"
		public Keyword getLimitsKeyword_0() { return cLimitsKeyword_0; }

		//{Limits}
		public Action getLimitsAction_1() { return cLimitsAction_1; }

		//("{" attributes+=LimitsAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=LimitsAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//LimitsAttribute
		public RuleCall getAttributesLimitsAttributeParserRuleCall_2_1_0() { return cAttributesLimitsAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class LimitsAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitsAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDailyMaxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDailyMinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaximumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinimumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMonthlyMaxParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMonthlyMinParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWeeklyMaxParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cWeeklyMinParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//LimitsAttribute:
		//	DailyMax | DailyMin | Maximum | Minimum | MonthlyMax | MonthlyMin | WeeklyMax | WeeklyMin;
		public ParserRule getRule() { return rule; }

		//DailyMax | DailyMin | Maximum | Minimum | MonthlyMax | MonthlyMin | WeeklyMax | WeeklyMin
		public Alternatives getAlternatives() { return cAlternatives; }

		//DailyMax
		public RuleCall getDailyMaxParserRuleCall_0() { return cDailyMaxParserRuleCall_0; }

		//DailyMin
		public RuleCall getDailyMinParserRuleCall_1() { return cDailyMinParserRuleCall_1; }

		//Maximum
		public RuleCall getMaximumParserRuleCall_2() { return cMaximumParserRuleCall_2; }

		//Minimum
		public RuleCall getMinimumParserRuleCall_3() { return cMinimumParserRuleCall_3; }

		//MonthlyMax
		public RuleCall getMonthlyMaxParserRuleCall_4() { return cMonthlyMaxParserRuleCall_4; }

		//MonthlyMin
		public RuleCall getMonthlyMinParserRuleCall_5() { return cMonthlyMinParserRuleCall_5; }

		//WeeklyMax
		public RuleCall getWeeklyMaxParserRuleCall_6() { return cWeeklyMaxParserRuleCall_6; }

		//WeeklyMin
		public RuleCall getWeeklyMinParserRuleCall_7() { return cWeeklyMinParserRuleCall_7; }
	}

	public class ListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListitemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/listitem.column.html
		//ListItem:
		//	"listitem" RichText;
		public ParserRule getRule() { return rule; }

		//"listitem" RichText
		public Group getGroup() { return cGroup; }

		//"listitem"
		public Keyword getListitemKeyword_0() { return cListitemKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeListTypeValuesEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
		//ListType:
		//	"listtype" type=ListTypeValues;
		public ParserRule getRule() { return rule; }

		//"listtype" type=ListTypeValues
		public Group getGroup() { return cGroup; }

		//"listtype"
		public Keyword getListtypeKeyword_0() { return cListtypeKeyword_0; }

		//type=ListTypeValues
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ListTypeValues
		public RuleCall getTypeListTypeValuesEnumRuleCall_1_0() { return cTypeListTypeValuesEnumRuleCall_1_0; }
	}

	public class LoadUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadunitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitLoadDisplayUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/loadunit.html
		//LoadUnit:
		//	"loadunit" unit=LoadDisplayUnit;
		public ParserRule getRule() { return rule; }

		//"loadunit" unit=LoadDisplayUnit
		public Group getGroup() { return cGroup; }

		//"loadunit"
		public Keyword getLoadunitKeyword_0() { return cLoadunitKeyword_0; }

		//unit=LoadDisplayUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//LoadDisplayUnit
		public RuleCall getUnitLoadDisplayUnitEnumRuleCall_1_0() { return cUnitLoadDisplayUnitEnumRuleCall_1_0; }
	}

	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/logicalexpression.html
		//LogicalExpression:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class LogicalFlagExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalFlagExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/logicalflagexpression.html
		//LogicalFlagExpression:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMacroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/macro.html
		//// TODO
		//Macro:
		//	"macro" STRING;
		public ParserRule getRule() { return rule; }

		//"macro" STRING
		public Group getGroup() { return cGroup; }

		//"macro"
		public Keyword getMacroKeyword_0() { return cMacroKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ManagersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Managers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_1_0 = (CrossReference)cResourcesAssignment_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourcesResourceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_1_0 = (CrossReference)cResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/managers.html
		//Managers:
		//	"managers" resources+=[Resource] ("," resources+=[Resource])*;
		public ParserRule getRule() { return rule; }

		//"managers" resources+=[Resource] ("," resources+=[Resource])*
		public Group getGroup() { return cGroup; }

		//"managers"
		public Keyword getManagersKeyword_0() { return cManagersKeyword_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_1_0() { return cResourcesResourceCrossReference_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_1_0_1() { return cResourcesResourceIDTerminalRuleCall_1_0_1; }

		//("," resources+=[Resource])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_1_0() { return cResourcesResourceCrossReference_2_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_1_0_1; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Assignment cMandatoryAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_0 = (Keyword)cMandatoryAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/mandatory.html
		//Mandatory:
		//	mandatory?="mandatory";
		public ParserRule getRule() { return rule; }

		//mandatory?="mandatory"
		public Assignment getMandatoryAssignment() { return cMandatoryAssignment; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_0() { return cMandatoryMandatoryKeyword_0; }
	}

	public class MaxEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxEndISODATETerminalRuleCall_1_0 = (RuleCall)cMaxEndAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/maxend.html
		//MaxEnd:
		//	"maxend" maxEnd=ISODATE;
		public ParserRule getRule() { return rule; }

		//"maxend" maxEnd=ISODATE
		public Group getGroup() { return cGroup; }

		//"maxend"
		public Keyword getMaxendKeyword_0() { return cMaxendKeyword_0; }

		//maxEnd=ISODATE
		public Assignment getMaxEndAssignment_1() { return cMaxEndAssignment_1; }

		//ISODATE
		public RuleCall getMaxEndISODATETerminalRuleCall_1_0() { return cMaxEndISODATETerminalRuleCall_1_0; }
	}

	public class MaximumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Maximum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaximumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/maximum.html
		//Maximum:
		//	"maximum" Limit;
		public ParserRule getRule() { return rule; }

		//"maximum" Limit
		public Group getGroup() { return cGroup; }

		//"maximum"
		public Keyword getMaximumKeyword_0() { return cMaximumKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class MaxStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxstartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxStartISODATETerminalRuleCall_1_0 = (RuleCall)cMaxStartAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/maxstart.html
		//MaxStart:
		//	"maxstart" maxStart=ISODATE;
		public ParserRule getRule() { return rule; }

		//"maxstart" maxStart=ISODATE
		public Group getGroup() { return cGroup; }

		//"maxstart"
		public Keyword getMaxstartKeyword_0() { return cMaxstartKeyword_0; }

		//maxStart=ISODATE
		public Assignment getMaxStartAssignment_1() { return cMaxStartAssignment_1; }

		//ISODATE
		public RuleCall getMaxStartISODATETerminalRuleCall_1_0() { return cMaxStartISODATETerminalRuleCall_1_0; }
	}

	public class MilestoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Milestone");
		private final Assignment cMilestoneAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMilestoneMilestoneKeyword_0 = (Keyword)cMilestoneAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/milestone.html
		//Milestone:
		//	milestone?="milestone";
		public ParserRule getRule() { return rule; }

		//milestone?="milestone"
		public Assignment getMilestoneAssignment() { return cMilestoneAssignment; }

		//"milestone"
		public Keyword getMilestoneMilestoneKeyword_0() { return cMilestoneMilestoneKeyword_0; }
	}

	public class MinimumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Minimum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinimumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/minimum.html
		//Minimum:
		//	"minimum" Limit;
		public ParserRule getRule() { return rule; }

		//"minimum" Limit
		public Group getGroup() { return cGroup; }

		//"minimum"
		public Keyword getMinimumKeyword_0() { return cMinimumKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class MinEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinEndISODATETerminalRuleCall_1_0 = (RuleCall)cMinEndAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/minend.html
		//MinEnd:
		//	"minend" minEnd=ISODATE;
		public ParserRule getRule() { return rule; }

		//"minend" minEnd=ISODATE
		public Group getGroup() { return cGroup; }

		//"minend"
		public Keyword getMinendKeyword_0() { return cMinendKeyword_0; }

		//minEnd=ISODATE
		public Assignment getMinEndAssignment_1() { return cMinEndAssignment_1; }

		//ISODATE
		public RuleCall getMinEndISODATETerminalRuleCall_1_0() { return cMinEndISODATETerminalRuleCall_1_0; }
	}

	public class MinStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinstartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinStartISODATETerminalRuleCall_1_0 = (RuleCall)cMinStartAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/minstart.html
		//MinStart:
		//	"minstart" minStart=ISODATE;
		public ParserRule getRule() { return rule; }

		//"minstart" minStart=ISODATE
		public Group getGroup() { return cGroup; }

		//"minstart"
		public Keyword getMinstartKeyword_0() { return cMinstartKeyword_0; }

		//minStart=ISODATE
		public Assignment getMinStartAssignment_1() { return cMinStartAssignment_1; }

		//ISODATE
		public RuleCall getMinStartISODATETerminalRuleCall_1_0() { return cMinStartISODATETerminalRuleCall_1_0; }
	}

	public class MonthlyMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MonthlyMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonthlymaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/monthlymax.html
		//MonthlyMax:
		//	"monthlymax" Limit;
		public ParserRule getRule() { return rule; }

		//"monthlymax" Limit
		public Group getGroup() { return cGroup; }

		//"monthlymax"
		public Keyword getMonthlymaxKeyword_0() { return cMonthlymaxKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class MonthlyMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MonthlyMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonthlyminKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/monthlymin.html
		//MonthlyMin:
		//	"monthlymin" Limit;
		public ParserRule getRule() { return rule; }

		//"monthlymin" Limit
		public Group getGroup() { return cGroup; }

		//"monthlymin"
		public Keyword getMonthlyminKeyword_0() { return cMonthlyminKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteSTRINGTerminalRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/note.task.html
		//Note:
		//	"note" note=STRING;
		public ParserRule getRule() { return rule; }

		//"note" note=STRING
		public Group getGroup() { return cGroup; }

		//"note"
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }

		//note=STRING
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }

		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_1_0() { return cNoteSTRINGTerminalRuleCall_1_0; }
	}

	public class NowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Now");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNowISODATETerminalRuleCall_1_0 = (RuleCall)cNowAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/now.html
		//Now:
		//	"now" now=ISODATE;
		public ParserRule getRule() { return rule; }

		//"now" now=ISODATE
		public Group getGroup() { return cGroup; }

		//"now"
		public Keyword getNowKeyword_0() { return cNowKeyword_0; }

		//now=ISODATE
		public Assignment getNowAssignment_1() { return cNowAssignment_1; }

		//ISODATE
		public RuleCall getNowISODATETerminalRuleCall_1_0() { return cNowISODATETerminalRuleCall_1_0; }
	}

	public class NumberFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRealFormatParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/numberformat.html
		//NumberFormat:
		//	"numberformat" RealFormat;
		public ParserRule getRule() { return rule; }

		//"numberformat" RealFormat
		public Group getGroup() { return cGroup; }

		//"numberformat"
		public Keyword getNumberformatKeyword_0() { return cNumberformatKeyword_0; }

		//RealFormat
		public RuleCall getRealFormatParserRuleCall_1() { return cRealFormatParserRuleCall_1; }
	}

	public class PeriodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Period");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeriodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPeriodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPeriodInterval2ParserRuleCall_1_0 = (RuleCall)cPeriodAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/onend.html
		//// http://www.taskjuggler.org/tj3/manual/onstart.html
		//// See DependPolicy
		//// http://www.taskjuggler.org/tj3/manual/opennodes.html
		//// internal use only
		//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
		//// See BookingRestriction
		//// http://www.taskjuggler.org/tj3/manual/period.column.html
		//Period:
		//	"period" period=Interval2;
		public ParserRule getRule() { return rule; }

		//"period" period=Interval2
		public Group getGroup() { return cGroup; }

		//"period"
		public Keyword getPeriodKeyword_0() { return cPeriodKeyword_0; }

		//period=Interval2
		public Assignment getPeriodAssignment_1() { return cPeriodAssignment_1; }

		//Interval2
		public RuleCall getPeriodInterval2ParserRuleCall_1_0() { return cPeriodInterval2ParserRuleCall_1_0; }
	}

	public class PersistentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Persistent");
		private final Assignment cPersistentAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPersistentPersistentKeyword_0 = (Keyword)cPersistentAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/persistent.html
		//Persistent:
		//	persistent?="persistent";
		public ParserRule getRule() { return rule; }

		//persistent?="persistent"
		public Assignment getPersistentAssignment() { return cPersistentAssignment; }

		//"persistent"
		public Keyword getPersistentPersistentKeyword_0() { return cPersistentPersistentKeyword_0; }
	}

	public class PrecedesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Precedes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrecedesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTaskDependencyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/precedes.html
		//Precedes:
		//	"precedes" TaskDependency;
		public ParserRule getRule() { return rule; }

		//"precedes" TaskDependency
		public Group getGroup() { return cGroup; }

		//"precedes"
		public Keyword getPrecedesKeyword_0() { return cPrecedesKeyword_0; }

		//TaskDependency
		public RuleCall getTaskDependencyParserRuleCall_1() { return cTaskDependencyParserRuleCall_1; }
	}

	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPriorityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_1_0 = (RuleCall)cPriorityAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/priority.html
		//Priority:
		//	"priority" priority=INT;
		public ParserRule getRule() { return rule; }

		//"priority" priority=INT
		public Group getGroup() { return cGroup; }

		//"priority"
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }

		//priority=INT
		public Assignment getPriorityAssignment_1() { return cPriorityAssignment_1; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_1_0() { return cPriorityINTTerminalRuleCall_1_0; }
	}

	public class ProjectIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProjectId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProjectIdIDTerminalRuleCall_1_0 = (RuleCall)cProjectIdAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/projectid.html
		//ProjectId:
		//	"projectid" projectId=ID;
		public ParserRule getRule() { return rule; }

		//"projectid" projectId=ID
		public Group getGroup() { return cGroup; }

		//"projectid"
		public Keyword getProjectidKeyword_0() { return cProjectidKeyword_0; }

		//projectId=ID
		public Assignment getProjectIdAssignment_1() { return cProjectIdAssignment_1; }

		//ID
		public RuleCall getProjectIdIDTerminalRuleCall_1_0() { return cProjectIdIDTerminalRuleCall_1_0; }
	}

	public class ProjectIdsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProjectIds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectidsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_1_0 = (RuleCall)cIdsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_2_1_0 = (RuleCall)cIdsAssignment_2_1.eContents().get(0);
		
		////http://www.taskjuggler.org/tj3/manual/projectids.html
		//ProjectIds:
		//	"projectids" ids+=ID ("," ids+=ID)*;
		public ParserRule getRule() { return rule; }

		//"projectids" ids+=ID ("," ids+=ID)*
		public Group getGroup() { return cGroup; }

		//"projectids"
		public Keyword getProjectidsKeyword_0() { return cProjectidsKeyword_0; }

		//ids+=ID
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }

		//ID
		public RuleCall getIdsIDTerminalRuleCall_1_0() { return cIdsIDTerminalRuleCall_1_0; }

		//("," ids+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ids+=ID
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }

		//ID
		public RuleCall getIdsIDTerminalRuleCall_2_1_0() { return cIdsIDTerminalRuleCall_2_1_0; }
	}

	public class PrologElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prolog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrologKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/projection.html
		//// deprecated
		//// http://www.taskjuggler.org/tj3/manual/prolog.html
		//Prolog:
		//	"prolog" RichText;
		public ParserRule getRule() { return rule; }

		//"prolog" RichText
		public Group getGroup() { return cGroup; }

		//"prolog"
		public Keyword getPrologKeyword_0() { return cPrologKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class PurgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Purge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPurgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListAttributeSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAttributeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/purge.html
		//// TODO: I wonder what a 'list attribute' is.
		//Purge:
		//	"purge" listAttribute=STRING;
		public ParserRule getRule() { return rule; }

		//"purge" listAttribute=STRING
		public Group getGroup() { return cGroup; }

		//"purge"
		public Keyword getPurgeKeyword_0() { return cPurgeKeyword_0; }

		//listAttribute=STRING
		public Assignment getListAttributeAssignment_1() { return cListAttributeAssignment_1; }

		//STRING
		public RuleCall getListAttributeSTRINGTerminalRuleCall_1_0() { return cListAttributeSTRINGTerminalRuleCall_1_0; }
	}

	public class RateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRateXFloatParserRuleCall_1_0 = (RuleCall)cRateAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rate.html
		//Rate:
		//	"rate" rate=XFloat;
		public ParserRule getRule() { return rule; }

		//"rate" rate=XFloat
		public Group getGroup() { return cGroup; }

		//"rate"
		public Keyword getRateKeyword_0() { return cRateKeyword_0; }

		//rate=XFloat
		public Assignment getRateAssignment_1() { return cRateAssignment_1; }

		//XFloat
		public RuleCall getRateXFloatParserRuleCall_1_0() { return cRateXFloatParserRuleCall_1_0; }
	}

	public class ReferenceExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceExtend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExtendAttributeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/reference.extend.html
		//ReferenceExtend:
		//	"reference" ExtendAttribute;
		public ParserRule getRule() { return rule; }

		//"reference" ExtendAttribute
		public Group getGroup() { return cGroup; }

		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }

		//ExtendAttribute
		public RuleCall getExtendAttributeParserRuleCall_1() { return cExtendAttributeParserRuleCall_1; }
	}

	public class RemainingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Remaining");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemainingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRemainingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRemainingDurationQuantityParserRuleCall_1_0 = (RuleCall)cRemainingAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/remaining.html
		//Remaining:
		//	"remaining" remaining=DurationQuantity;
		public ParserRule getRule() { return rule; }

		//"remaining" remaining=DurationQuantity
		public Group getGroup() { return cGroup; }

		//"remaining"
		public Keyword getRemainingKeyword_0() { return cRemainingKeyword_0; }

		//remaining=DurationQuantity
		public Assignment getRemainingAssignment_1() { return cRemainingAssignment_1; }

		//DurationQuantity
		public RuleCall getRemainingDurationQuantityParserRuleCall_1_0() { return cRemainingDurationQuantityParserRuleCall_1_0; }
	}

	public class ReportPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReportPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReportprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReportReportCrossReference_1_0 = (CrossReference)cReportAssignment_1.eContents().get(0);
		private final RuleCall cReportReportIDTerminalRuleCall_1_0_1 = (RuleCall)cReportReportCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/replace.html
		//// see Shift
		//// http://www.taskjuggler.org/tj3/manual/reportprefix.html
		//ReportPrefix:
		//	"reportprefix" report=[Report];
		public ParserRule getRule() { return rule; }

		//"reportprefix" report=[Report]
		public Group getGroup() { return cGroup; }

		//"reportprefix"
		public Keyword getReportprefixKeyword_0() { return cReportprefixKeyword_0; }

		//report=[Report]
		public Assignment getReportAssignment_1() { return cReportAssignment_1; }

		//[Report]
		public CrossReference getReportReportCrossReference_1_0() { return cReportReportCrossReference_1_0; }

		//ID
		public RuleCall getReportReportIDTerminalRuleCall_1_0_1() { return cReportReportIDTerminalRuleCall_1_0_1; }
	}

	public class ResourceAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceAttributes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_0 = (Keyword)cAllAssignment_0.eContents().get(0);
		private final Assignment cNoneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_0 = (Keyword)cNoneAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cAlternatives.eContents().get(2);
		private final Assignment cVacationAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cVacationVacationKeyword_2_0_0 = (Keyword)cVacationAssignment_2_0.eContents().get(0);
		private final Assignment cBookingAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cBookingBookingKeyword_2_1_0 = (Keyword)cBookingAssignment_2_1.eContents().get(0);
		private final Assignment cWorkingHoursAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cWorkingHoursWorkinghoursKeyword_2_2_0 = (Keyword)cWorkingHoursAssignment_2_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/resourceattributes.html
		//ResourceAttributes:
		//	all?="*" | none?="-" | vacation?="vacation" & booking?="booking" & workingHours?="workinghours";
		public ParserRule getRule() { return rule; }

		//all?="*" | none?="-" | vacation?="vacation" & booking?="booking" & workingHours?="workinghours"
		public Alternatives getAlternatives() { return cAlternatives; }

		//all?="*"
		public Assignment getAllAssignment_0() { return cAllAssignment_0; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_0() { return cAllAsteriskKeyword_0_0; }

		//none?="-"
		public Assignment getNoneAssignment_1() { return cNoneAssignment_1; }

		//"-"
		public Keyword getNoneHyphenMinusKeyword_1_0() { return cNoneHyphenMinusKeyword_1_0; }

		//vacation?="vacation" & booking?="booking" & workingHours?="workinghours"
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//vacation?="vacation"
		public Assignment getVacationAssignment_2_0() { return cVacationAssignment_2_0; }

		//"vacation"
		public Keyword getVacationVacationKeyword_2_0_0() { return cVacationVacationKeyword_2_0_0; }

		//booking?="booking"
		public Assignment getBookingAssignment_2_1() { return cBookingAssignment_2_1; }

		//"booking"
		public Keyword getBookingBookingKeyword_2_1_0() { return cBookingBookingKeyword_2_1_0; }

		//workingHours?="workinghours"
		public Assignment getWorkingHoursAssignment_2_2() { return cWorkingHoursAssignment_2_2; }

		//"workinghours"
		public Keyword getWorkingHoursWorkinghoursKeyword_2_2_0() { return cWorkingHoursWorkinghoursKeyword_2_2_0; }
	}

	public class ResourcePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourcePrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resourceprefix.html
		//ResourcePrefix:
		//	"resourceprefix" resource=[Resource];
		public ParserRule getRule() { return rule; }

		//"resourceprefix" resource=[Resource]
		public Group getGroup() { return cGroup; }

		//"resourceprefix"
		public Keyword getResourceprefixKeyword_0() { return cResourceprefixKeyword_0; }

		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
	}

	public class ResourceReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcereportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
		//ResourceReport:
		//	"resourcereport" Report;
		public ParserRule getRule() { return rule; }

		//"resourcereport" Report
		public Group getGroup() { return cGroup; }

		//"resourcereport"
		public Keyword getResourcereportKeyword_0() { return cResourcereportKeyword_0; }

		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}

	public class ResourceRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcerootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resourceroot.html
		//ResourceRoot:
		//	"resourceroot" resource=[Resource];
		public ParserRule getRule() { return rule; }

		//"resourceroot" resource=[Resource]
		public Group getGroup() { return cGroup; }

		//"resourceroot"
		public Keyword getResourcerootKeyword_0() { return cResourcerootKeyword_0; }

		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
	}

	public class ResponsibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Responsible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResponsibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_1_0 = (CrossReference)cResourcesAssignment_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourcesResourceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_1_0 = (CrossReference)cResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resources.limit.html
		//// See Limit
		//// http://www.taskjuggler.org/tj3/manual/responsible.html
		//Responsible:
		//	"responsible" resources+=[Resource] ("," resources+=[Resource])*;
		public ParserRule getRule() { return rule; }

		//"responsible" resources+=[Resource] ("," resources+=[Resource])*
		public Group getGroup() { return cGroup; }

		//"responsible"
		public Keyword getResponsibleKeyword_0() { return cResponsibleKeyword_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_1_0() { return cResourcesResourceCrossReference_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_1_0_1() { return cResourcesResourceIDTerminalRuleCall_1_0_1; }

		//("," resources+=[Resource])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_1_0() { return cResourcesResourceCrossReference_2_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_1_0_1; }
	}

	public class RichTextExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichTextExtend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRichtextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExtendAttributeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/richtext.extend.html
		//RichTextExtend:
		//	"richtext" ExtendAttribute;
		public ParserRule getRule() { return rule; }

		//"richtext" ExtendAttribute
		public Group getGroup() { return cGroup; }

		//"richtext"
		public Keyword getRichtextKeyword_0() { return cRichtextKeyword_0; }

		//ExtendAttribute
		public RuleCall getExtendAttributeParserRuleCall_1() { return cExtendAttributeParserRuleCall_1; }
	}

	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/right.html
		//Right:
		//	"right" RichText;
		public ParserRule getRule() { return rule; }

		//"right" RichText
		public Group getGroup() { return cGroup; }

		//"right"
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class RollupResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RollupResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRollupresourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rollupresource.html
		//RollupResource:
		//	"rollupresource" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"rollupresource" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"rollupresource"
		public Keyword getRollupresourceKeyword_0() { return cRollupresourceKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class RollupTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RollupTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRolluptaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rolluptask.html
		//RollupTask:
		//	"rolluptask" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"rolluptask" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"rolluptask"
		public Keyword getRolluptaskKeyword_0() { return cRolluptaskKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class ScaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScaleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cScaleAlternatives_1_0 = (Alternatives)cScaleAssignment_1.eContents().get(0);
		private final Keyword cScaleHourKeyword_1_0_0 = (Keyword)cScaleAlternatives_1_0.eContents().get(0);
		private final Keyword cScaleDayKeyword_1_0_1 = (Keyword)cScaleAlternatives_1_0.eContents().get(1);
		private final Keyword cScaleWeekKeyword_1_0_2 = (Keyword)cScaleAlternatives_1_0.eContents().get(2);
		private final Keyword cScaleMonthKeyword_1_0_3 = (Keyword)cScaleAlternatives_1_0.eContents().get(3);
		private final Keyword cScaleQuarterKeyword_1_0_4 = (Keyword)cScaleAlternatives_1_0.eContents().get(4);
		private final Keyword cScaleYearKeyword_1_0_5 = (Keyword)cScaleAlternatives_1_0.eContents().get(5);
		
		//// http://www.taskjuggler.org/tj3/manual/scale.column.html
		//Scale:
		//	"scale" scale=("hour" | "day" | "week" | "month" | "quarter" | "year");
		public ParserRule getRule() { return rule; }

		//"scale" scale=("hour" | "day" | "week" | "month" | "quarter" | "year")
		public Group getGroup() { return cGroup; }

		//"scale"
		public Keyword getScaleKeyword_0() { return cScaleKeyword_0; }

		//scale=("hour" | "day" | "week" | "month" | "quarter" | "year")
		public Assignment getScaleAssignment_1() { return cScaleAssignment_1; }

		//"hour" | "day" | "week" | "month" | "quarter" | "year"
		public Alternatives getScaleAlternatives_1_0() { return cScaleAlternatives_1_0; }

		//"hour"
		public Keyword getScaleHourKeyword_1_0_0() { return cScaleHourKeyword_1_0_0; }

		//"day"
		public Keyword getScaleDayKeyword_1_0_1() { return cScaleDayKeyword_1_0_1; }

		//"week"
		public Keyword getScaleWeekKeyword_1_0_2() { return cScaleWeekKeyword_1_0_2; }

		//"month"
		public Keyword getScaleMonthKeyword_1_0_3() { return cScaleMonthKeyword_1_0_3; }

		//"quarter"
		public Keyword getScaleQuarterKeyword_1_0_4() { return cScaleQuarterKeyword_1_0_4; }

		//"year"
		public Keyword getScaleYearKeyword_1_0_5() { return cScaleYearKeyword_1_0_5; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cActiveKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cActiveAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cActiveYesNoEnumRuleCall_3_1_0_1_0 = (RuleCall)cActiveAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cScenarioAssignment_3_1_1 = (Assignment)cUnorderedGroup_3_1.eContents().get(1);
		private final RuleCall cScenarioScenarioParserRuleCall_3_1_1_0 = (RuleCall)cScenarioAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/scenario.html	
		//Scenario:
		//	"scenario" id=ID name=STRING ("{" (("active" active=YesNo)? & scenario=Scenario?) "}")?;
		public ParserRule getRule() { return rule; }

		//"scenario" id=ID name=STRING ("{" (("active" active=YesNo)? & scenario=Scenario?) "}")?
		public Group getGroup() { return cGroup; }

		//"scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("{" (("active" active=YesNo)? & scenario=Scenario?) "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("active" active=YesNo)? & scenario=Scenario?
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }

		//("active" active=YesNo)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"active"
		public Keyword getActiveKeyword_3_1_0_0() { return cActiveKeyword_3_1_0_0; }

		//active=YesNo
		public Assignment getActiveAssignment_3_1_0_1() { return cActiveAssignment_3_1_0_1; }

		//YesNo
		public RuleCall getActiveYesNoEnumRuleCall_3_1_0_1_0() { return cActiveYesNoEnumRuleCall_3_1_0_1_0; }

		//scenario=Scenario?
		public Assignment getScenarioAssignment_3_1_1() { return cScenarioAssignment_3_1_1; }

		//Scenario
		public RuleCall getScenarioScenarioParserRuleCall_3_1_1_0() { return cScenarioScenarioParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ScenarioIcalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScenarioIcal");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/scenario.ical.html
		//// TODO
		//ScenarioIcal:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class ScenariosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenarios");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenariosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenariosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScenariosScenarioCrossReference_1_0 = (CrossReference)cScenariosAssignment_1.eContents().get(0);
		private final RuleCall cScenariosScenarioIDTerminalRuleCall_1_0_1 = (RuleCall)cScenariosScenarioCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScenariosAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cScenariosScenarioCrossReference_2_1_0 = (CrossReference)cScenariosAssignment_2_1.eContents().get(0);
		private final RuleCall cScenariosScenarioIDTerminalRuleCall_2_1_0_1 = (RuleCall)cScenariosScenarioCrossReference_2_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/scenarios.html
		//Scenarios:
		//	"scenarios" scenarios+=[Scenario] ("," scenarios+=[Scenario])*;
		public ParserRule getRule() { return rule; }

		//"scenarios" scenarios+=[Scenario] ("," scenarios+=[Scenario])*
		public Group getGroup() { return cGroup; }

		//"scenarios"
		public Keyword getScenariosKeyword_0() { return cScenariosKeyword_0; }

		//scenarios+=[Scenario]
		public Assignment getScenariosAssignment_1() { return cScenariosAssignment_1; }

		//[Scenario]
		public CrossReference getScenariosScenarioCrossReference_1_0() { return cScenariosScenarioCrossReference_1_0; }

		//ID
		public RuleCall getScenariosScenarioIDTerminalRuleCall_1_0_1() { return cScenariosScenarioIDTerminalRuleCall_1_0_1; }

		//("," scenarios+=[Scenario])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//scenarios+=[Scenario]
		public Assignment getScenariosAssignment_2_1() { return cScenariosAssignment_2_1; }

		//[Scenario]
		public CrossReference getScenariosScenarioCrossReference_2_1_0() { return cScenariosScenarioCrossReference_2_1_0; }

		//ID
		public RuleCall getScenariosScenarioIDTerminalRuleCall_2_1_0_1() { return cScenariosScenarioIDTerminalRuleCall_2_1_0_1; }
	}

	public class ScheduledElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scheduled");
		private final Assignment cScheduledAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cScheduledScheduledKeyword_0 = (Keyword)cScheduledAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
		//// see ExtendAttribute
		//// http://www.taskjuggler.org/tj3/manual/scheduled.html
		//Scheduled:
		//	scheduled?="scheduled";
		public ParserRule getRule() { return rule; }

		//scheduled?="scheduled"
		public Assignment getScheduledAssignment() { return cScheduledAssignment; }

		//"scheduled"
		public Keyword getScheduledScheduledKeyword_0() { return cScheduledScheduledKeyword_0; }
	}

	public class SchedulingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scheduling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchedulingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchedulingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchedulingSchedulingPolicyEnumRuleCall_1_0 = (RuleCall)cSchedulingAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/scheduling.html
		//Scheduling:
		//	"scheduling" scheduling=SchedulingPolicy;
		public ParserRule getRule() { return rule; }

		//"scheduling" scheduling=SchedulingPolicy
		public Group getGroup() { return cGroup; }

		//"scheduling"
		public Keyword getSchedulingKeyword_0() { return cSchedulingKeyword_0; }

		//scheduling=SchedulingPolicy
		public Assignment getSchedulingAssignment_1() { return cSchedulingAssignment_1; }

		//SchedulingPolicy
		public RuleCall getSchedulingSchedulingPolicyEnumRuleCall_1_0() { return cSchedulingSchedulingPolicyEnumRuleCall_1_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentSelectArgumentEnumRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/select.html
		//Select:
		//	"select" argument=SelectArgument;
		public ParserRule getRule() { return rule; }

		//"select" argument=SelectArgument
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//argument=SelectArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }

		//SelectArgument
		public RuleCall getArgumentSelectArgumentEnumRuleCall_1_0() { return cArgumentSelectArgumentEnumRuleCall_1_0; }
	}

	public class SelfContainedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfContained");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfcontainedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelfcontainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelfcontainedYesNoEnumRuleCall_1_0 = (RuleCall)cSelfcontainedAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/selfcontained.html
		//SelfContained:
		//	"selfcontained" selfcontained=YesNo;
		public ParserRule getRule() { return rule; }

		//"selfcontained" selfcontained=YesNo
		public Group getGroup() { return cGroup; }

		//"selfcontained"
		public Keyword getSelfcontainedKeyword_0() { return cSelfcontainedKeyword_0; }

		//selfcontained=YesNo
		public Assignment getSelfcontainedAssignment_1() { return cSelfcontainedAssignment_1; }

		//YesNo
		public RuleCall getSelfcontainedYesNoEnumRuleCall_1_0() { return cSelfcontainedYesNoEnumRuleCall_1_0; }
	}

	public class ShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Assignment cReplaceAssignment_3_1_0 = (Assignment)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cReplaceReplaceKeyword_3_1_0_0 = (Keyword)cReplaceAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cUnorderedGroup_3_1.eContents().get(1);
		private final Keyword cTimezoneKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cTimezoneAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cTimezoneSTRINGTerminalRuleCall_3_1_1_1_0 = (RuleCall)cTimezoneAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cUnorderedGroup_3_1.eContents().get(2);
		private final Keyword cVacationKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cVacationAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cVacationVacationShiftParserRuleCall_3_1_2_1_0 = (RuleCall)cVacationAssignment_3_1_2_1.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cUnorderedGroup_3_1.eContents().get(3);
		private final Keyword cShiftKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cShiftAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cShiftShiftParserRuleCall_3_1_3_1_0 = (RuleCall)cShiftAssignment_3_1_3_1.eContents().get(0);
		private final Group cGroup_3_1_4 = (Group)cUnorderedGroup_3_1.eContents().get(4);
		private final Keyword cWorkinghoursKeyword_3_1_4_0 = (Keyword)cGroup_3_1_4.eContents().get(0);
		private final Assignment cWorkingHoursAssignment_3_1_4_1 = (Assignment)cGroup_3_1_4.eContents().get(1);
		private final RuleCall cWorkingHoursWorkingHoursParserRuleCall_3_1_4_1_0 = (RuleCall)cWorkingHoursAssignment_3_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/shift.html
		//// http://www.taskjuggler.org/tj3/manual/shift.resource.html
		//// http://www.taskjuggler.org/tj3/manual/shifts.task.html
		//Shift:
		//	"shift" id=ID? name=STRING ("{" (replace="replace"? & ("timezone" timezone=STRING)? & ("vacation"
		//	vacation=VacationShift)? & ("shift" shift=Shift)? & ("workinghours" workingHours=WorkingHours)?) "}")?;
		public ParserRule getRule() { return rule; }

		//"shift" id=ID? name=STRING ("{" (replace="replace"? & ("timezone" timezone=STRING)? & ("vacation"
		//vacation=VacationShift)? & ("shift" shift=Shift)? & ("workinghours" workingHours=WorkingHours)?) "}")?
		public Group getGroup() { return cGroup; }

		//"shift"
		public Keyword getShiftKeyword_0() { return cShiftKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("{" (replace="replace"? & ("timezone" timezone=STRING)? & ("vacation" vacation=VacationShift)? & ("shift" shift=Shift)?
		//& ("workinghours" workingHours=WorkingHours)?) "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//replace="replace"? & ("timezone" timezone=STRING)? & ("vacation" vacation=VacationShift)? & ("shift" shift=Shift)? &
		//("workinghours" workingHours=WorkingHours)?
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }

		//replace="replace"?
		public Assignment getReplaceAssignment_3_1_0() { return cReplaceAssignment_3_1_0; }

		//"replace"
		public Keyword getReplaceReplaceKeyword_3_1_0_0() { return cReplaceReplaceKeyword_3_1_0_0; }

		//("timezone" timezone=STRING)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//"timezone"
		public Keyword getTimezoneKeyword_3_1_1_0() { return cTimezoneKeyword_3_1_1_0; }

		//timezone=STRING
		public Assignment getTimezoneAssignment_3_1_1_1() { return cTimezoneAssignment_3_1_1_1; }

		//STRING
		public RuleCall getTimezoneSTRINGTerminalRuleCall_3_1_1_1_0() { return cTimezoneSTRINGTerminalRuleCall_3_1_1_1_0; }

		//("vacation" vacation=VacationShift)?
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//"vacation"
		public Keyword getVacationKeyword_3_1_2_0() { return cVacationKeyword_3_1_2_0; }

		//vacation=VacationShift
		public Assignment getVacationAssignment_3_1_2_1() { return cVacationAssignment_3_1_2_1; }

		//VacationShift
		public RuleCall getVacationVacationShiftParserRuleCall_3_1_2_1_0() { return cVacationVacationShiftParserRuleCall_3_1_2_1_0; }

		//("shift" shift=Shift)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//"shift"
		public Keyword getShiftKeyword_3_1_3_0() { return cShiftKeyword_3_1_3_0; }

		//shift=Shift
		public Assignment getShiftAssignment_3_1_3_1() { return cShiftAssignment_3_1_3_1; }

		//Shift
		public RuleCall getShiftShiftParserRuleCall_3_1_3_1_0() { return cShiftShiftParserRuleCall_3_1_3_1_0; }

		//("workinghours" workingHours=WorkingHours)?
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }

		//"workinghours"
		public Keyword getWorkinghoursKeyword_3_1_4_0() { return cWorkinghoursKeyword_3_1_4_0; }

		//workingHours=WorkingHours
		public Assignment getWorkingHoursAssignment_3_1_4_1() { return cWorkingHoursAssignment_3_1_4_1; }

		//WorkingHours
		public RuleCall getWorkingHoursWorkingHoursParserRuleCall_3_1_4_1_0() { return cWorkingHoursWorkingHoursParserRuleCall_3_1_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ShiftTimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftTimesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShiftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cShiftShiftCrossReference_1_0 = (CrossReference)cShiftAssignment_1.eContents().get(0);
		private final RuleCall cShiftShiftIDTerminalRuleCall_1_0_1 = (RuleCall)cShiftShiftCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/shift.timesheet.html
		//ShiftTimesheet:
		//	"shift" shift=[Shift];
		public ParserRule getRule() { return rule; }

		//"shift" shift=[Shift]
		public Group getGroup() { return cGroup; }

		//"shift"
		public Keyword getShiftKeyword_0() { return cShiftKeyword_0; }

		//shift=[Shift]
		public Assignment getShiftAssignment_1() { return cShiftAssignment_1; }

		//[Shift]
		public CrossReference getShiftShiftCrossReference_1_0() { return cShiftShiftCrossReference_1_0; }

		//ID
		public RuleCall getShiftShiftIDTerminalRuleCall_1_0_1() { return cShiftShiftIDTerminalRuleCall_1_0_1; }
	}

	public class ShiftsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shifts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLimitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitsShiftLimitParserRuleCall_1_0 = (RuleCall)cLimitsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLimitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLimitsShiftLimitParserRuleCall_2_1_0 = (RuleCall)cLimitsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/shifts.resource.html
		//// http://www.taskjuggler.org/tj3/manual/shifts.task.html
		//// http://www.taskjuggler.org/tj3/manual/shifts.allocate.html
		//Shifts:
		//	"shifts" limits+=ShiftLimit ("," limits+=ShiftLimit)*;
		public ParserRule getRule() { return rule; }

		//"shifts" limits+=ShiftLimit ("," limits+=ShiftLimit)*
		public Group getGroup() { return cGroup; }

		//"shifts"
		public Keyword getShiftsKeyword_0() { return cShiftsKeyword_0; }

		//limits+=ShiftLimit
		public Assignment getLimitsAssignment_1() { return cLimitsAssignment_1; }

		//ShiftLimit
		public RuleCall getLimitsShiftLimitParserRuleCall_1_0() { return cLimitsShiftLimitParserRuleCall_1_0; }

		//("," limits+=ShiftLimit)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//limits+=ShiftLimit
		public Assignment getLimitsAssignment_2_1() { return cLimitsAssignment_2_1; }

		//ShiftLimit
		public RuleCall getLimitsShiftLimitParserRuleCall_2_1_0() { return cLimitsShiftLimitParserRuleCall_2_1_0; }
	}

	public class ShortTimeFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortTimeFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShorttimeformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShortTimeFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShortTimeFormatSTRINGTerminalRuleCall_1_0 = (RuleCall)cShortTimeFormatAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/shorttimeformat.html
		//ShortTimeFormat:
		//	"shorttimeformat" shortTimeFormat=STRING;
		public ParserRule getRule() { return rule; }

		//"shorttimeformat" shortTimeFormat=STRING
		public Group getGroup() { return cGroup; }

		//"shorttimeformat"
		public Keyword getShorttimeformatKeyword_0() { return cShorttimeformatKeyword_0; }

		//shortTimeFormat=STRING
		public Assignment getShortTimeFormatAssignment_1() { return cShortTimeFormatAssignment_1; }

		//STRING
		public RuleCall getShortTimeFormatSTRINGTerminalRuleCall_1_0() { return cShortTimeFormatSTRINGTerminalRuleCall_1_0; }
	}

	public class SortJournalEntriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortJournalEntries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortjournalentriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCriteriaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCriteriaJournalEntrySortCriterionEnumRuleCall_1_0 = (RuleCall)cCriteriaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCriteriaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCriteriaJournalEntrySortCriterionEnumRuleCall_2_1_0 = (RuleCall)cCriteriaAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
		//// http://www.taskjuggler.org/tj3/manual/sloppy.projection.html
		//// see Booking
		//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
		//SortJournalEntries:
		//	"sortjournalentries" criteria+=JournalEntrySortCriterion ("," criteria+=JournalEntrySortCriterion)*;
		public ParserRule getRule() { return rule; }

		//"sortjournalentries" criteria+=JournalEntrySortCriterion ("," criteria+=JournalEntrySortCriterion)*
		public Group getGroup() { return cGroup; }

		//"sortjournalentries"
		public Keyword getSortjournalentriesKeyword_0() { return cSortjournalentriesKeyword_0; }

		//criteria+=JournalEntrySortCriterion
		public Assignment getCriteriaAssignment_1() { return cCriteriaAssignment_1; }

		//JournalEntrySortCriterion
		public RuleCall getCriteriaJournalEntrySortCriterionEnumRuleCall_1_0() { return cCriteriaJournalEntrySortCriterionEnumRuleCall_1_0; }

		//("," criteria+=JournalEntrySortCriterion)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//criteria+=JournalEntrySortCriterion
		public Assignment getCriteriaAssignment_2_1() { return cCriteriaAssignment_2_1; }

		//JournalEntrySortCriterion
		public RuleCall getCriteriaJournalEntrySortCriterionEnumRuleCall_2_1_0() { return cCriteriaJournalEntrySortCriterionEnumRuleCall_2_1_0; }
	}

	public class SortResourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortResources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortresourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//SortResources:
		//	"sortresources" Sort;
		public ParserRule getRule() { return rule; }

		//"sortresources" Sort
		public Group getGroup() { return cGroup; }

		//"sortresources"
		public Keyword getSortresourcesKeyword_0() { return cSortresourcesKeyword_0; }

		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}

	public class SortTasksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortTasks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSorttasksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//SortTasks:
		//	"sorttasks" Sort;
		public ParserRule getRule() { return rule; }

		//"sorttasks" Sort
		public Group getGroup() { return cGroup; }

		//"sorttasks"
		public Keyword getSorttasksKeyword_0() { return cSorttasksKeyword_0; }

		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}

	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartISODATETerminalRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/start.html
		//// http://www.taskjuggler.org/tj3/manual/start.column.html
		//// http://www.taskjuggler.org/tj3/manual/start.limit.html
		//// http://www.taskjuggler.org/tj3/manual/start.report.html
		//Start:
		//	"start" start=ISODATE;
		public ParserRule getRule() { return rule; }

		//"start" start=ISODATE
		public Group getGroup() { return cGroup; }

		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }

		//start=ISODATE
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//ISODATE
		public RuleCall getStartISODATETerminalRuleCall_1_0() { return cStartISODATETerminalRuleCall_1_0; }
	}

	public class StartCreditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartCredit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartcreditKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartCreditAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartCreditXFloatParserRuleCall_1_0 = (RuleCall)cStartCreditAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/startcredit.html
		//StartCredit:
		//	"startcredit" startCredit=XFloat;
		public ParserRule getRule() { return rule; }

		//"startcredit" startCredit=XFloat
		public Group getGroup() { return cGroup; }

		//"startcredit"
		public Keyword getStartcreditKeyword_0() { return cStartcreditKeyword_0; }

		//startCredit=XFloat
		public Assignment getStartCreditAssignment_1() { return cStartCreditAssignment_1; }

		//XFloat
		public RuleCall getStartCreditXFloatParserRuleCall_1_0() { return cStartCreditXFloatParserRuleCall_1_0; }
	}

	public class StatusStatusSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatusStatusSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelAlertLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesStatusStatusSheetAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/status.statussheet.html
		//StatusStatusSheet:
		//	"status" level=AlertLevel text=STRING ("{" attributes+=StatusStatusSheetAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"status" level=AlertLevel text=STRING ("{" attributes+=StatusStatusSheetAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"status"
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }

		//level=AlertLevel
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }

		//AlertLevel
		public RuleCall getLevelAlertLevelEnumRuleCall_1_0() { return cLevelAlertLevelEnumRuleCall_1_0; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }

		//("{" attributes+=StatusStatusSheetAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=StatusStatusSheetAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//StatusStatusSheetAttribute
		public RuleCall getAttributesStatusStatusSheetAttributeParserRuleCall_3_1_0() { return cAttributesStatusStatusSheetAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class StatusStatusSheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatusStatusSheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAuthorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDetailsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlagsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSummaryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StatusStatusSheetAttribute:
		//	Author | Details | Flags | Summary;
		public ParserRule getRule() { return rule; }

		//Author | Details | Flags | Summary
		public Alternatives getAlternatives() { return cAlternatives; }

		//Author
		public RuleCall getAuthorParserRuleCall_0() { return cAuthorParserRuleCall_0; }

		//Details
		public RuleCall getDetailsParserRuleCall_1() { return cDetailsParserRuleCall_1; }

		//Flags
		public RuleCall getFlagsParserRuleCall_2() { return cFlagsParserRuleCall_2; }

		//Summary
		public RuleCall getSummaryParserRuleCall_3() { return cSummaryParserRuleCall_3; }
	}

	public class StatusSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatusSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatussheetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/status.timesheet.html
		////StatusTimesheet: 'statusB' level=AlertLevel text=STRING 
		////	(details = Details & flags = Flags & summary = Summary);
		//// http://www.taskjuggler.org/tj3/manual/statussheet.html
		//// TODO
		//StatusSheet:
		//	"statussheet" STRING;
		public ParserRule getRule() { return rule; }

		//"statussheet" STRING
		public Group getGroup() { return cGroup; }

		//"statussheet"
		public Keyword getStatussheetKeyword_0() { return cStatussheetKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class StatusSheetReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatusSheetReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatussheetreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/statussheetreport.html
		//// TODO
		//StatusSheetReport:
		//	"statussheetreport" STRING;
		public ParserRule getRule() { return rule; }

		//"statussheetreport" STRING
		public Group getGroup() { return cGroup; }

		//"statussheetreport"
		public Keyword getStatussheetreportKeyword_0() { return cStatussheetreportKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class SummaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Summary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSummaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/strict.projection.html
		//// deprecated.
		//// http://www.taskjuggler.org/tj3/manual/summary.html
		//// TODO: limit to 240 characters
		//Summary:
		//	"summary" RichText;
		public ParserRule getRule() { return rule; }

		//"summary" RichText
		public Group getGroup() { return cGroup; }

		//"summary"
		public Keyword getSummaryKeyword_0() { return cSummaryKeyword_0; }

		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}

	public class TagFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cHideResourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cHideResourceHideResourceParserRuleCall_3_0_1_0 = (RuleCall)cHideResourceAssignment_3_0_1.eContents().get(0);
		private final Assignment cHideTaskAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cHideTaskHideTaskParserRuleCall_3_1_0 = (RuleCall)cHideTaskAssignment_3_1.eContents().get(0);
		private final Assignment cRollupResourceAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cRollupResourceRollupResourceParserRuleCall_3_2_0 = (RuleCall)cRollupResourceAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Assignment cRollupTaskAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cRollupTaskRollupTaskParserRuleCall_3_3_0_0 = (RuleCall)cRollupTaskAssignment_3_3_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.html
		//// http://www.taskjuggler.org/tj3/manual/supplement.resource.html
		//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
		//// TODO
		//// http://www.taskjuggler.org/tj3/manual/tagfile.html
		//TagFile:
		//	"tagfile" id=ID? filename=STRING ("{" hideResource=HideResource? & hideTask=HideTask? & rollupResource=RollupResource?
		//	& rollupTask=RollupTask? "}")?;
		public ParserRule getRule() { return rule; }

		//"tagfile" id=ID? filename=STRING ("{" hideResource=HideResource? & hideTask=HideTask? & rollupResource=RollupResource? &
		//rollupTask=RollupTask? "}")?
		public Group getGroup() { return cGroup; }

		//"tagfile"
		public Keyword getTagfileKeyword_0() { return cTagfileKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//filename=STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }

		//("{" hideResource=HideResource? & hideTask=HideTask? & rollupResource=RollupResource? & rollupTask=RollupTask? "}")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"{" hideResource=HideResource?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }

		//hideResource=HideResource?
		public Assignment getHideResourceAssignment_3_0_1() { return cHideResourceAssignment_3_0_1; }

		//HideResource
		public RuleCall getHideResourceHideResourceParserRuleCall_3_0_1_0() { return cHideResourceHideResourceParserRuleCall_3_0_1_0; }

		//hideTask=HideTask?
		public Assignment getHideTaskAssignment_3_1() { return cHideTaskAssignment_3_1; }

		//HideTask
		public RuleCall getHideTaskHideTaskParserRuleCall_3_1_0() { return cHideTaskHideTaskParserRuleCall_3_1_0; }

		//rollupResource=RollupResource?
		public Assignment getRollupResourceAssignment_3_2() { return cRollupResourceAssignment_3_2; }

		//RollupResource
		public RuleCall getRollupResourceRollupResourceParserRuleCall_3_2_0() { return cRollupResourceRollupResourceParserRuleCall_3_2_0; }

		//rollupTask=RollupTask? "}"
		public Group getGroup_3_3() { return cGroup_3_3; }

		//rollupTask=RollupTask?
		public Assignment getRollupTaskAssignment_3_3_0() { return cRollupTaskAssignment_3_3_0; }

		//RollupTask
		public RuleCall getRollupTaskRollupTaskParserRuleCall_3_3_0_0() { return cRollupTaskRollupTaskParserRuleCall_3_3_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3_1() { return cRightCurlyBracketKeyword_3_3_1; }
	}

	public class TaskStatusSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskStatusSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesTaskStatusSheetAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/task.statussheet.html
		//TaskStatusSheet:
		//	"task" task=[Task] ("{" attributes+=TaskStatusSheetAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"task" task=[Task] ("{" attributes+=TaskStatusSheetAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }

		//("{" attributes+=TaskStatusSheetAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=TaskStatusSheetAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//TaskStatusSheetAttribute
		public RuleCall getAttributesTaskStatusSheetAttributeParserRuleCall_2_1_0() { return cAttributesTaskStatusSheetAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class TaskStatusSheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskStatusSheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskStatusSheetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatusSheetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TaskStatusSheetAttribute:
		//	TaskStatusSheet | StatusStatusSheet;
		public ParserRule getRule() { return rule; }

		//TaskStatusSheet | StatusStatusSheet
		public Alternatives getAlternatives() { return cAlternatives; }

		//TaskStatusSheet
		public RuleCall getTaskStatusSheetParserRuleCall_0() { return cTaskStatusSheetParserRuleCall_0; }

		//StatusStatusSheet
		public RuleCall getStatusStatusSheetParserRuleCall_1() { return cStatusStatusSheetParserRuleCall_1; }
	}

	public class TaskTimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskTimesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesTaskTimesheetAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
		//TaskTimesheet:
		//	"task" task=[Task] ("{" attributes+=TaskTimesheetAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"task" task=[Task] ("{" attributes+=TaskTimesheetAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }

		//("{" attributes+=TaskTimesheetAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=TaskTimesheetAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//TaskTimesheetAttribute
		public RuleCall getAttributesTaskTimesheetAttributeParserRuleCall_2_1_0() { return cAttributesTaskTimesheetAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class TaskAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskAttributes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_0_0 = (Keyword)cAllAssignment_0.eContents().get(0);
		private final Assignment cNoneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_0 = (Keyword)cNoneAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cAlternatives.eContents().get(2);
		private final Assignment cResponsibleAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cResponsibleResponsibleKeyword_2_0_0 = (Keyword)cResponsibleAssignment_2_0.eContents().get(0);
		private final Assignment cFlagsAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cFlagsFlagsKeyword_2_1_0 = (Keyword)cFlagsAssignment_2_1.eContents().get(0);
		private final Assignment cMaxstartAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cMaxstartMaxstartKeyword_2_2_0 = (Keyword)cMaxstartAssignment_2_2.eContents().get(0);
		private final Assignment cMaxendAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cMaxendMaxstartKeyword_2_3_0 = (Keyword)cMaxendAssignment_2_3.eContents().get(0);
		private final Assignment cPriorityAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cPriorityPriorityKeyword_2_4_0 = (Keyword)cPriorityAssignment_2_4.eContents().get(0);
		private final Assignment cBookingAssignment_2_5 = (Assignment)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cBookingPriorityKeyword_2_5_0 = (Keyword)cBookingAssignment_2_5.eContents().get(0);
		private final Assignment cNoteAssignment_2_6 = (Assignment)cUnorderedGroup_2.eContents().get(6);
		private final Keyword cNoteNoteKeyword_2_6_0 = (Keyword)cNoteAssignment_2_6.eContents().get(0);
		private final Assignment cMinstartAssignment_2_7 = (Assignment)cUnorderedGroup_2.eContents().get(7);
		private final Keyword cMinstartMinstartKeyword_2_7_0 = (Keyword)cMinstartAssignment_2_7.eContents().get(0);
		private final Assignment cMinendAssignment_2_8 = (Assignment)cUnorderedGroup_2.eContents().get(8);
		private final Keyword cMinendMinendKeyword_2_8_0 = (Keyword)cMinendAssignment_2_8.eContents().get(0);
		private final Assignment cCompleteAssignment_2_9 = (Assignment)cUnorderedGroup_2.eContents().get(9);
		private final Keyword cCompleteCompleteKeyword_2_9_0 = (Keyword)cCompleteAssignment_2_9.eContents().get(0);
		private final Assignment cDependsAssignment_2_10 = (Assignment)cUnorderedGroup_2.eContents().get(10);
		private final Keyword cDependsDependsKeyword_2_10_0 = (Keyword)cDependsAssignment_2_10.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/taskattributes.html
		//TaskAttributes:
		//	all?="*" | none?="-" | responsible?="responsible" & flags?="flags" & maxstart?="maxstart" & maxend?="maxstart" &
		//	priority?="priority" & booking?="priority" & note?="note" & minstart?="minstart" & minend?="minend" &
		//	complete?="complete" & depends?="depends";
		public ParserRule getRule() { return rule; }

		//all?="*" | none?="-" | responsible?="responsible" & flags?="flags" & maxstart?="maxstart" & maxend?="maxstart" &
		//priority?="priority" & booking?="priority" & note?="note" & minstart?="minstart" & minend?="minend" &
		//complete?="complete" & depends?="depends"
		public Alternatives getAlternatives() { return cAlternatives; }

		//all?="*"
		public Assignment getAllAssignment_0() { return cAllAssignment_0; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_0() { return cAllAsteriskKeyword_0_0; }

		//none?="-"
		public Assignment getNoneAssignment_1() { return cNoneAssignment_1; }

		//"-"
		public Keyword getNoneHyphenMinusKeyword_1_0() { return cNoneHyphenMinusKeyword_1_0; }

		//responsible?="responsible" & flags?="flags" & maxstart?="maxstart" & maxend?="maxstart" & priority?="priority" &
		//booking?="priority" & note?="note" & minstart?="minstart" & minend?="minend" & complete?="complete" &
		//depends?="depends"
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//responsible?="responsible"
		public Assignment getResponsibleAssignment_2_0() { return cResponsibleAssignment_2_0; }

		//"responsible"
		public Keyword getResponsibleResponsibleKeyword_2_0_0() { return cResponsibleResponsibleKeyword_2_0_0; }

		//flags?="flags"
		public Assignment getFlagsAssignment_2_1() { return cFlagsAssignment_2_1; }

		//"flags"
		public Keyword getFlagsFlagsKeyword_2_1_0() { return cFlagsFlagsKeyword_2_1_0; }

		//maxstart?="maxstart"
		public Assignment getMaxstartAssignment_2_2() { return cMaxstartAssignment_2_2; }

		//"maxstart"
		public Keyword getMaxstartMaxstartKeyword_2_2_0() { return cMaxstartMaxstartKeyword_2_2_0; }

		//maxend?="maxstart"
		public Assignment getMaxendAssignment_2_3() { return cMaxendAssignment_2_3; }

		//"maxstart"
		public Keyword getMaxendMaxstartKeyword_2_3_0() { return cMaxendMaxstartKeyword_2_3_0; }

		//priority?="priority"
		public Assignment getPriorityAssignment_2_4() { return cPriorityAssignment_2_4; }

		//"priority"
		public Keyword getPriorityPriorityKeyword_2_4_0() { return cPriorityPriorityKeyword_2_4_0; }

		//booking?="priority"
		public Assignment getBookingAssignment_2_5() { return cBookingAssignment_2_5; }

		//"priority"
		public Keyword getBookingPriorityKeyword_2_5_0() { return cBookingPriorityKeyword_2_5_0; }

		//note?="note"
		public Assignment getNoteAssignment_2_6() { return cNoteAssignment_2_6; }

		//"note"
		public Keyword getNoteNoteKeyword_2_6_0() { return cNoteNoteKeyword_2_6_0; }

		//minstart?="minstart"
		public Assignment getMinstartAssignment_2_7() { return cMinstartAssignment_2_7; }

		//"minstart"
		public Keyword getMinstartMinstartKeyword_2_7_0() { return cMinstartMinstartKeyword_2_7_0; }

		//minend?="minend"
		public Assignment getMinendAssignment_2_8() { return cMinendAssignment_2_8; }

		//"minend"
		public Keyword getMinendMinendKeyword_2_8_0() { return cMinendMinendKeyword_2_8_0; }

		//complete?="complete"
		public Assignment getCompleteAssignment_2_9() { return cCompleteAssignment_2_9; }

		//"complete"
		public Keyword getCompleteCompleteKeyword_2_9_0() { return cCompleteCompleteKeyword_2_9_0; }

		//depends?="depends"
		public Assignment getDependsAssignment_2_10() { return cDependsAssignment_2_10; }

		//"depends"
		public Keyword getDependsDependsKeyword_2_10_0() { return cDependsDependsKeyword_2_10_0; }
	}

	public class TaskPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/taskprefix.html
		//TaskPrefix:
		//	"taskprefix" task=[Task];
		public ParserRule getRule() { return rule; }

		//"taskprefix" task=[Task]
		public Group getGroup() { return cGroup; }

		//"taskprefix"
		public Keyword getTaskprefixKeyword_0() { return cTaskprefixKeyword_0; }

		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
	}

	public class TaskReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/taskreport.html
		//TaskReport:
		//	"taskreport" Report;
		public ParserRule getRule() { return rule; }

		//"taskreport" Report
		public Group getGroup() { return cGroup; }

		//"taskreport"
		public Keyword getTaskreportKeyword_0() { return cTaskreportKeyword_0; }

		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}

	public class TaskRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskrootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/taskroot.html
		//TaskRoot:
		//	"taskroot" task=[Task];
		public ParserRule getRule() { return rule; }

		//"taskroot" task=[Task]
		public Group getGroup() { return cGroup; }

		//"taskroot"
		public Keyword getTaskrootKeyword_0() { return cTaskrootKeyword_0; }

		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
	}

	public class TextExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextExtend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExtendAttributeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/text.extend.html
		//TextExtend:
		//	"text" ExtendAttribute;
		public ParserRule getRule() { return rule; }

		//"text" ExtendAttribute
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//ExtendAttribute
		public RuleCall getExtendAttributeParserRuleCall_1() { return cExtendAttributeParserRuleCall_1; }
	}

	public class TextReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/textreport.html
		//TextReport:
		//	"textreport" Report;
		public ParserRule getRule() { return rule; }

		//"textreport" Report
		public Group getGroup() { return cGroup; }

		//"textreport"
		public Keyword getTextreportKeyword_0() { return cTextreportKeyword_0; }

		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}

	public class TimeFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeformatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeformatSTRINGTerminalRuleCall_1_0 = (RuleCall)cTimeformatAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timeformat.html
		//// TODO: specify format string syntax ?
		//TimeFormat:
		//	"timeformat" timeformat=STRING;
		public ParserRule getRule() { return rule; }

		//"timeformat" timeformat=STRING
		public Group getGroup() { return cGroup; }

		//"timeformat"
		public Keyword getTimeformatKeyword_0() { return cTimeformatKeyword_0; }

		//timeformat=STRING
		public Assignment getTimeformatAssignment_1() { return cTimeformatAssignment_1; }

		//STRING
		public RuleCall getTimeformatSTRINGTerminalRuleCall_1_0() { return cTimeformatSTRINGTerminalRuleCall_1_0; }
	}

	public class TimeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timeoff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoffKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timeoff.nikureport.html
		//Timeoff:
		//	"timeoff" id=STRING name=STRING;
		public ParserRule getRule() { return rule; }

		//"timeoff" id=STRING name=STRING
		public Group getGroup() { return cGroup; }

		//"timeoff"
		public Keyword getTimeoffKeyword_0() { return cTimeoffKeyword_0; }

		//id=STRING
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_1_0() { return cIdSTRINGTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class TimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimesheetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalInterval4ParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTimesheetAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheet.html
		//Timesheet:
		//	"timesheet" resource=[Resource] interval=Interval4 ("{" attributes+=TimesheetAttribute*)?;
		public ParserRule getRule() { return rule; }

		//"timesheet" resource=[Resource] interval=Interval4 ("{" attributes+=TimesheetAttribute*)?
		public Group getGroup() { return cGroup; }

		//"timesheet"
		public Keyword getTimesheetKeyword_0() { return cTimesheetKeyword_0; }

		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }

		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }

		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }

		//interval=Interval4
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }

		//Interval4
		public RuleCall getIntervalInterval4ParserRuleCall_2_0() { return cIntervalInterval4ParserRuleCall_2_0; }

		//("{" attributes+=TimesheetAttribute*)?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=TimesheetAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//TimesheetAttribute
		public RuleCall getAttributesTimesheetAttributeParserRuleCall_3_1_0() { return cAttributesTimesheetAttributeParserRuleCall_3_1_0; }
	}

	public class TimesheetReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesheetReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimesheetreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		private final Assignment cComnentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComnentSTRINGTerminalRuleCall_2_0 = (RuleCall)cComnentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTimesheetReportAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheetreport.html
		//TimesheetReport:
		//	"timesheetreport" filename=STRING comnent=STRING ("{" attributes+=TimesheetReportAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//"timesheetreport" filename=STRING comnent=STRING ("{" attributes+=TimesheetReportAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//"timesheetreport"
		public Keyword getTimesheetreportKeyword_0() { return cTimesheetreportKeyword_0; }

		//filename=STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }

		//comnent=STRING
		public Assignment getComnentAssignment_2() { return cComnentAssignment_2; }

		//STRING
		public RuleCall getComnentSTRINGTerminalRuleCall_2_0() { return cComnentSTRINGTerminalRuleCall_2_0; }

		//("{" attributes+=TimesheetReportAttribute* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=TimesheetReportAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//TimesheetReportAttribute
		public RuleCall getAttributesTimesheetReportAttributeParserRuleCall_3_1_0() { return cAttributesTimesheetReportAttributeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class TimezoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timezone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimezoneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimezoneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimezoneSTRINGTerminalRuleCall_1_0 = (RuleCall)cTimezoneAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timezone.export.html
		//// http://www.taskjuggler.org/tj3/manual/timezone.html
		//// http://www.taskjuggler.org/tj3/manual/timezone.shift.html
		//Timezone:
		//	"timezone" timezone=STRING;
		public ParserRule getRule() { return rule; }

		//"timezone" timezone=STRING
		public Group getGroup() { return cGroup; }

		//"timezone"
		public Keyword getTimezoneKeyword_0() { return cTimezoneKeyword_0; }

		//timezone=STRING
		public Assignment getTimezoneAssignment_1() { return cTimezoneAssignment_1; }

		//STRING
		public RuleCall getTimezoneSTRINGTerminalRuleCall_1_0() { return cTimezoneSTRINGTerminalRuleCall_1_0; }
	}

	public class TimingResolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimingResolution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimingresolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimingResolutionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimingResolutionINTTerminalRuleCall_1_0 = (RuleCall)cTimingResolutionAssignment_1.eContents().get(0);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/timingresolution.html
		//TimingResolution:
		//	"timingresolution" timingResolution=INT "min";
		public ParserRule getRule() { return rule; }

		//"timingresolution" timingResolution=INT "min"
		public Group getGroup() { return cGroup; }

		//"timingresolution"
		public Keyword getTimingresolutionKeyword_0() { return cTimingresolutionKeyword_0; }

		//timingResolution=INT
		public Assignment getTimingResolutionAssignment_1() { return cTimingResolutionAssignment_1; }

		//INT
		public RuleCall getTimingResolutionINTTerminalRuleCall_1_0() { return cTimingResolutionINTTerminalRuleCall_1_0; }

		//"min"
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/title.column.html
		//// http://www.taskjuggler.org/tj3/manual/title.html
		//Title:
		//	"title" title=STRING;
		public ParserRule getRule() { return rule; }

		//"title" title=STRING
		public Group getGroup() { return cGroup; }

		//"title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
	}

	public class ToolTipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToolTip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTooltipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cTipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipSTRINGTerminalRuleCall_2_0 = (RuleCall)cTipAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/tooltip.column.html
		//ToolTip:
		//	"tooltip" expression=LogicalExpression tip=STRING;
		public ParserRule getRule() { return rule; }

		//"tooltip" expression=LogicalExpression tip=STRING
		public Group getGroup() { return cGroup; }

		//"tooltip"
		public Keyword getTooltipKeyword_0() { return cTooltipKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }

		//tip=STRING
		public Assignment getTipAssignment_2() { return cTipAssignment_2; }

		//STRING
		public RuleCall getTipSTRINGTerminalRuleCall_2_0() { return cTipSTRINGTerminalRuleCall_2_0; }
	}

	public class TrackingScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrackingScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrackingscenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScenarioScenarioCrossReference_1_0 = (CrossReference)cScenarioAssignment_1.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/trackingscenario.html
		//TrackingScenario:
		//	"trackingscenario" scenario=[Scenario];
		public ParserRule getRule() { return rule; }

		//"trackingscenario" scenario=[Scenario]
		public Group getGroup() { return cGroup; }

		//"trackingscenario"
		public Keyword getTrackingscenarioKeyword_0() { return cTrackingscenarioKeyword_0; }

		//scenario=[Scenario]
		public Assignment getScenarioAssignment_1() { return cScenarioAssignment_1; }

		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_0() { return cScenarioScenarioCrossReference_1_0; }

		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_0_1; }
	}

	public class TreeLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreeLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTreelevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/treelevel.html
		//// TODO
		//TreeLevel:
		//	"treelevel" level=STRING;
		public ParserRule getRule() { return rule; }

		//"treelevel" level=STRING
		public Group getGroup() { return cGroup; }

		//"treelevel"
		public Keyword getTreelevelKeyword_0() { return cTreelevelKeyword_0; }

		//level=STRING
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }

		//STRING
		public RuleCall getLevelSTRINGTerminalRuleCall_1_0() { return cLevelSTRINGTerminalRuleCall_1_0; }
	}

	public class VacationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vacation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVacationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalsInterval3ParserRuleCall_2_0 = (RuleCall)cIntervalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntervalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_1_0 = (RuleCall)cIntervalsAssignment_3_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/vacation.html
		//Vacation:
		//	"vacation" name=STRING intervals+=Interval3 ("," intervals+=Interval3)*;
		public ParserRule getRule() { return rule; }

		//"vacation" name=STRING intervals+=Interval3 ("," intervals+=Interval3)*
		public Group getGroup() { return cGroup; }

		//"vacation"
		public Keyword getVacationKeyword_0() { return cVacationKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_2() { return cIntervalsAssignment_2; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_2_0() { return cIntervalsInterval3ParserRuleCall_2_0; }

		//("," intervals+=Interval3)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_1() { return cIntervalsAssignment_3_1; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_1_0() { return cIntervalsInterval3ParserRuleCall_3_1_0; }
	}

	public class VacationResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VacationResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVacationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalsInterval3ParserRuleCall_2_0 = (RuleCall)cIntervalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntervalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_1_0 = (RuleCall)cIntervalsAssignment_3_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/vacation.resource.html
		//VacationResource returns Vacation:
		//	"vacation" name=STRING? intervals+=Interval3 ("," intervals+=Interval3)*;
		public ParserRule getRule() { return rule; }

		//"vacation" name=STRING? intervals+=Interval3 ("," intervals+=Interval3)*
		public Group getGroup() { return cGroup; }

		//"vacation"
		public Keyword getVacationKeyword_0() { return cVacationKeyword_0; }

		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_2() { return cIntervalsAssignment_2; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_2_0() { return cIntervalsInterval3ParserRuleCall_2_0; }

		//("," intervals+=Interval3)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_1() { return cIntervalsAssignment_3_1; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_1_0() { return cIntervalsInterval3ParserRuleCall_3_1_0; }
	}

	public class VacationShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VacationShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVacationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVacationShiftAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIntervalsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_0_0 = (RuleCall)cIntervalsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_1_1_0 = (RuleCall)cIntervalsAssignment_3_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/vacation.shift.html	
		//VacationShift: // TODO: both name and interval can be empty: explain
		//	"vacation" {VacationShift} name=STRING? (intervals+=Interval3 ("," intervals+=Interval3)*)?;
		public ParserRule getRule() { return rule; }

		//// TODO: both name and interval can be empty: explain
		//"vacation" {VacationShift} name=STRING? (intervals+=Interval3 ("," intervals+=Interval3)*)?
		public Group getGroup() { return cGroup; }

		//// TODO: both name and interval can be empty: explain
		//"vacation"
		public Keyword getVacationKeyword_0() { return cVacationKeyword_0; }

		//{VacationShift}
		public Action getVacationShiftAction_1() { return cVacationShiftAction_1; }

		//name=STRING?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//(intervals+=Interval3 ("," intervals+=Interval3)*)?
		public Group getGroup_3() { return cGroup_3; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_0() { return cIntervalsAssignment_3_0; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_0_0() { return cIntervalsInterval3ParserRuleCall_3_0_0; }

		//("," intervals+=Interval3)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_1_1() { return cIntervalsAssignment_3_1_1; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_1_1_0() { return cIntervalsInterval3ParserRuleCall_3_1_1_0; }
	}

	public class WarnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Warn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWarnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/warn.html
		//Warn:
		//	"warn" expression=LogicalExpression;
		public ParserRule getRule() { return rule; }

		//"warn" expression=LogicalExpression
		public Group getGroup() { return cGroup; }

		//"warn"
		public Keyword getWarnKeyword_0() { return cWarnKeyword_0; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}

	public class WeekStartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeekStarts");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSundayAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSundayWeekstartssundayKeyword_0_0 = (Keyword)cSundayAssignment_0.eContents().get(0);
		private final Assignment cMondayAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMondayWeekstartsmondayKeyword_1_0 = (Keyword)cMondayAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/weekstartsmonday.html;
		//// http://www.taskjuggler.org/tj3/manual/weekstartssunday.html
		//WeekStarts:
		//	sunday?="weekstartssunday" | monday?="weekstartsmonday";
		public ParserRule getRule() { return rule; }

		//sunday?="weekstartssunday" | monday?="weekstartsmonday"
		public Alternatives getAlternatives() { return cAlternatives; }

		//sunday?="weekstartssunday"
		public Assignment getSundayAssignment_0() { return cSundayAssignment_0; }

		//"weekstartssunday"
		public Keyword getSundayWeekstartssundayKeyword_0_0() { return cSundayWeekstartssundayKeyword_0_0; }

		//monday?="weekstartsmonday"
		public Assignment getMondayAssignment_1() { return cMondayAssignment_1; }

		//"weekstartsmonday"
		public Keyword getMondayWeekstartsmondayKeyword_1_0() { return cMondayWeekstartsmondayKeyword_1_0; }
	}

	public class WeeklyMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeeklyMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeeklymaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/weeklymax.html
		//WeeklyMax:
		//	"weeklymax" Limit;
		public ParserRule getRule() { return rule; }

		//"weeklymax" Limit
		public Group getGroup() { return cGroup; }

		//"weeklymax"
		public Keyword getWeeklymaxKeyword_0() { return cWeeklymaxKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class WeeklyMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeeklyMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeeklyminKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/weeklymin.html
		//WeeklyMin:
		//	"weeklymin" Limit;
		public ParserRule getRule() { return rule; }

		//"weeklymin" Limit
		public Group getGroup() { return cGroup; }

		//"weeklymin"
		public Keyword getWeeklyminKeyword_0() { return cWeeklyminKeyword_0; }

		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}

	public class WidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Width");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthXFloatParserRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/width.column.html
		//Width:
		//	"width" width=XFloat;
		public ParserRule getRule() { return rule; }

		//"width" width=XFloat
		public Group getGroup() { return cGroup; }

		//"width"
		public Keyword getWidthKeyword_0() { return cWidthKeyword_0; }

		//width=XFloat
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }

		//XFloat
		public RuleCall getWidthXFloatParserRuleCall_1_0() { return cWidthXFloatParserRuleCall_1_0; }
	}

	public class WorkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Work");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueXFloatParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitWorkQuantityUnitEnumRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/work.html
		//Work:
		//	"work" value=XFloat unit=WorkQuantityUnit;
		public ParserRule getRule() { return rule; }

		//"work" value=XFloat unit=WorkQuantityUnit
		public Group getGroup() { return cGroup; }

		//"work"
		public Keyword getWorkKeyword_0() { return cWorkKeyword_0; }

		//value=XFloat
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//XFloat
		public RuleCall getValueXFloatParserRuleCall_1_0() { return cValueXFloatParserRuleCall_1_0; }

		//unit=WorkQuantityUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//WorkQuantityUnit
		public RuleCall getUnitWorkQuantityUnitEnumRuleCall_2_0() { return cUnitWorkQuantityUnitEnumRuleCall_2_0; }
	}

	public class WorkingHoursElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkingHours");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkinghoursKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeekdaysAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cWeekdaysWeekdaysParserRuleCall_1_0_0 = (RuleCall)cWeekdaysAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cWeekdaysAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cWeekdaysWeekdaysParserRuleCall_1_1_1_0 = (RuleCall)cWeekdaysAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOffAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cOffOffKeyword_2_0_0 = (Keyword)cOffAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHoursAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cHoursWorkHoursParserRuleCall_2_1_0_0 = (RuleCall)cHoursAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cHoursAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cHoursWorkHoursParserRuleCall_2_1_1_1_0 = (RuleCall)cHoursAssignment_2_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
		//WorkingHours:
		//	"workinghours" (weekdays+=Weekdays ("," weekdays+=Weekdays)*) (off?="off" | hours+=WorkHours ("," hours+=WorkHours)*);
		public ParserRule getRule() { return rule; }

		//"workinghours" (weekdays+=Weekdays ("," weekdays+=Weekdays)*) (off?="off" | hours+=WorkHours ("," hours+=WorkHours)*)
		public Group getGroup() { return cGroup; }

		//"workinghours"
		public Keyword getWorkinghoursKeyword_0() { return cWorkinghoursKeyword_0; }

		//weekdays+=Weekdays ("," weekdays+=Weekdays)*
		public Group getGroup_1() { return cGroup_1; }

		//weekdays+=Weekdays
		public Assignment getWeekdaysAssignment_1_0() { return cWeekdaysAssignment_1_0; }

		//Weekdays
		public RuleCall getWeekdaysWeekdaysParserRuleCall_1_0_0() { return cWeekdaysWeekdaysParserRuleCall_1_0_0; }

		//("," weekdays+=Weekdays)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//weekdays+=Weekdays
		public Assignment getWeekdaysAssignment_1_1_1() { return cWeekdaysAssignment_1_1_1; }

		//Weekdays
		public RuleCall getWeekdaysWeekdaysParserRuleCall_1_1_1_0() { return cWeekdaysWeekdaysParserRuleCall_1_1_1_0; }

		//off?="off" | hours+=WorkHours ("," hours+=WorkHours)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//off?="off"
		public Assignment getOffAssignment_2_0() { return cOffAssignment_2_0; }

		//"off"
		public Keyword getOffOffKeyword_2_0_0() { return cOffOffKeyword_2_0_0; }

		//hours+=WorkHours ("," hours+=WorkHours)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//hours+=WorkHours
		public Assignment getHoursAssignment_2_1_0() { return cHoursAssignment_2_1_0; }

		//WorkHours
		public RuleCall getHoursWorkHoursParserRuleCall_2_1_0_0() { return cHoursWorkHoursParserRuleCall_2_1_0_0; }

		//("," hours+=WorkHours)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//hours+=WorkHours
		public Assignment getHoursAssignment_2_1_1_1() { return cHoursAssignment_2_1_1_1; }

		//WorkHours
		public RuleCall getHoursWorkHoursParserRuleCall_2_1_1_1_0() { return cHoursWorkHoursParserRuleCall_2_1_1_1_0; }
	}

	public class YearlyWorkingDaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "YearlyWorkingDays");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYearlyworkingdaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cYearlyWorkingDaysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYearlyWorkingDaysINTTerminalRuleCall_1_0 = (RuleCall)cYearlyWorkingDaysAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/yearlyworkingdays.html
		//YearlyWorkingDays:
		//	"yearlyworkingdays" yearlyWorkingDays=INT;
		public ParserRule getRule() { return rule; }

		//"yearlyworkingdays" yearlyWorkingDays=INT
		public Group getGroup() { return cGroup; }

		//"yearlyworkingdays"
		public Keyword getYearlyworkingdaysKeyword_0() { return cYearlyworkingdaysKeyword_0; }

		//yearlyWorkingDays=INT
		public Assignment getYearlyWorkingDaysAssignment_1() { return cYearlyWorkingDaysAssignment_1; }

		//INT
		public RuleCall getYearlyWorkingDaysINTTerminalRuleCall_1_0() { return cYearlyWorkingDaysINTTerminalRuleCall_1_0; }
	}

	public class AccountShareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccountShare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAccountAccountCrossReference_0_0 = (CrossReference)cAccountAssignment_0.eContents().get(0);
		private final RuleCall cAccountAccountIDTerminalRuleCall_0_0_1 = (RuleCall)cAccountAccountCrossReference_0_0.eContents().get(1);
		private final Assignment cShareAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShareXFloatParserRuleCall_1_0 = (RuleCall)cShareAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/chargeset.html
		//AccountShare:
		//	account=[Account] share=XFloat;
		public ParserRule getRule() { return rule; }

		//account=[Account] share=XFloat
		public Group getGroup() { return cGroup; }

		//account=[Account]
		public Assignment getAccountAssignment_0() { return cAccountAssignment_0; }

		//[Account]
		public CrossReference getAccountAccountCrossReference_0_0() { return cAccountAccountCrossReference_0_0; }

		//ID
		public RuleCall getAccountAccountIDTerminalRuleCall_0_0_1() { return cAccountAccountIDTerminalRuleCall_0_0_1; }

		//share=XFloat
		public Assignment getShareAssignment_1() { return cShareAssignment_1; }

		//XFloat
		public RuleCall getShareXFloatParserRuleCall_1_0() { return cShareXFloatParserRuleCall_1_0; }
	}

	public class ColumnAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCellColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCellTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFontColorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHAlignParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cListItemParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPeriodParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cScaleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStartParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTitleParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cToolTipParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWidthParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//// http://www.taskjuggler.org/tj3/manual/columns.html
		//ColumnAttribute:
		//	CellColor | CellText | End | FontColor | HAlign | ListItem | ListType | Period | Scale | Start | Title | ToolTip |
		//	Width;
		public ParserRule getRule() { return rule; }

		//CellColor | CellText | End | FontColor | HAlign | ListItem | ListType | Period | Scale | Start | Title | ToolTip | Width
		public Alternatives getAlternatives() { return cAlternatives; }

		//CellColor
		public RuleCall getCellColorParserRuleCall_0() { return cCellColorParserRuleCall_0; }

		//CellText
		public RuleCall getCellTextParserRuleCall_1() { return cCellTextParserRuleCall_1; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }

		//FontColor
		public RuleCall getFontColorParserRuleCall_3() { return cFontColorParserRuleCall_3; }

		//HAlign
		public RuleCall getHAlignParserRuleCall_4() { return cHAlignParserRuleCall_4; }

		//ListItem
		public RuleCall getListItemParserRuleCall_5() { return cListItemParserRuleCall_5; }

		//ListType
		public RuleCall getListTypeParserRuleCall_6() { return cListTypeParserRuleCall_6; }

		//Period
		public RuleCall getPeriodParserRuleCall_7() { return cPeriodParserRuleCall_7; }

		//Scale
		public RuleCall getScaleParserRuleCall_8() { return cScaleParserRuleCall_8; }

		//Start
		public RuleCall getStartParserRuleCall_9() { return cStartParserRuleCall_9; }

		//Title
		public RuleCall getTitleParserRuleCall_10() { return cTitleParserRuleCall_10; }

		//ToolTip
		public RuleCall getToolTipParserRuleCall_11() { return cToolTipParserRuleCall_11; }

		//Width
		public RuleCall getWidthParserRuleCall_12() { return cWidthParserRuleCall_12; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdColumnIdEnumRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeColumnAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/columns.html
		//// TODO: extend column id to user defined column ids.
		//Column:
		//	id=ColumnId attribute=ColumnAttribute;
		public ParserRule getRule() { return rule; }

		//id=ColumnId attribute=ColumnAttribute
		public Group getGroup() { return cGroup; }

		//id=ColumnId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ColumnId
		public RuleCall getIdColumnIdEnumRuleCall_0_0() { return cIdColumnIdEnumRuleCall_0_0; }

		//attribute=ColumnAttribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//ColumnAttribute
		public RuleCall getAttributeColumnAttributeParserRuleCall_1_0() { return cAttributeColumnAttributeParserRuleCall_1_0; }
	}

	public class CriterionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Criterion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cScenarioScenarioCrossReference_0_0_0 = (CrossReference)cScenarioAssignment_0_0.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_0_0_0_1 = (RuleCall)cScenarioScenarioCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCriterionIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCriterionIdCriterionIdParserRuleCall_1_0 = (RuleCall)cCriterionIdAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//Criterion:
		//	(scenario=[Scenario] ".")? criterionId=CriterionId;
		public ParserRule getRule() { return rule; }

		//(scenario=[Scenario] ".")? criterionId=CriterionId
		public Group getGroup() { return cGroup; }

		//(scenario=[Scenario] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//scenario=[Scenario]
		public Assignment getScenarioAssignment_0_0() { return cScenarioAssignment_0_0; }

		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_0_0_0() { return cScenarioScenarioCrossReference_0_0_0; }

		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_0_0_0_1() { return cScenarioScenarioIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//criterionId=CriterionId
		public Assignment getCriterionIdAssignment_1() { return cCriterionIdAssignment_1; }

		//CriterionId
		public RuleCall getCriterionIdCriterionIdParserRuleCall_1_0() { return cCriterionIdCriterionIdParserRuleCall_1_0; }
	}

	public class CriterionIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CriterionId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnIdColumnIdEnumRuleCall_0_0 = (RuleCall)cColumnIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirectionCriterionDirectionEnumRuleCall_1_1_0 = (RuleCall)cDirectionAssignment_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//CriterionId:
		//	columnId=ColumnId ("." direction=CriterionDirection)?;
		public ParserRule getRule() { return rule; }

		//columnId=ColumnId ("." direction=CriterionDirection)?
		public Group getGroup() { return cGroup; }

		//columnId=ColumnId
		public Assignment getColumnIdAssignment_0() { return cColumnIdAssignment_0; }

		//ColumnId
		public RuleCall getColumnIdColumnIdEnumRuleCall_0_0() { return cColumnIdColumnIdEnumRuleCall_0_0; }

		//("." direction=CriterionDirection)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//direction=CriterionDirection
		public Assignment getDirectionAssignment_1_1() { return cDirectionAssignment_1_1; }

		//CriterionDirection
		public RuleCall getDirectionCriterionDirectionEnumRuleCall_1_1_0() { return cDirectionCriterionDirectionEnumRuleCall_1_1_0; }
	}

	public class DurationQuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DurationQuantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueXFloatParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/duration.html
		//// http://www.taskjuggler.org/tj3/manual/effort.html
		//// http://www.taskjuggler.org/tj3/manual/gapduration.html
		//// http://www.taskjuggler.org/tj3/manual/gaplength.html
		//// http://www.taskjuggler.org/tj3/manual/interval1.html
		//// http://www.taskjuggler.org/tj3/manual/interval2.html
		//// http://www.taskjuggler.org/tj3/manual/interval3.html
		//// http://www.taskjuggler.org/tj3/manual/interval4.html
		//// http://www.taskjuggler.org/tj3/manual/length.html
		//// http://www.taskjuggler.org/tj3/manual/remaining.html
		//DurationQuantity:
		//	value=XFloat unit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//value=XFloat unit=TimeUnit
		public Group getGroup() { return cGroup; }

		//value=XFloat
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//XFloat
		public RuleCall getValueXFloatParserRuleCall_0_0() { return cValueXFloatParserRuleCall_0_0; }

		//unit=TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}

	public class ExtendAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInheritAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cInheritInheritKeyword_2_0_1_0 = (Keyword)cInheritAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Assignment cScenariospecificAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cScenariospecificScenariospecificKeyword_2_1_0_0 = (Keyword)cScenariospecificAssignment_2_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/date.extend.html
		//// http://www.taskjuggler.org/tj3/manual/reference.extend.html
		//// http://www.taskjuggler.org/tj3/manual/richtext.extend.html
		//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
		//// http://www.taskjuggler.org/tj3/manual/text.extend.html
		//ExtendAttribute:
		//	id=ID name=STRING ("{" inherit?="inherit" & scenariospecific?="scenariospecific" "}")?;
		public ParserRule getRule() { return rule; }

		//id=ID name=STRING ("{" inherit?="inherit" & scenariospecific?="scenariospecific" "}")?
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//("{" inherit?="inherit" & scenariospecific?="scenariospecific" "}")?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"{" inherit?="inherit"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//inherit?="inherit"
		public Assignment getInheritAssignment_2_0_1() { return cInheritAssignment_2_0_1; }

		//"inherit"
		public Keyword getInheritInheritKeyword_2_0_1_0() { return cInheritInheritKeyword_2_0_1_0; }

		//scenariospecific?="scenariospecific" "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//scenariospecific?="scenariospecific"
		public Assignment getScenariospecificAssignment_2_1_0() { return cScenariospecificAssignment_2_1_0; }

		//"scenariospecific"
		public Keyword getScenariospecificScenariospecificKeyword_2_1_0_0() { return cScenariospecificScenariospecificKeyword_2_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_1() { return cRightCurlyBracketKeyword_2_1_1; }
	}

	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueXFloatParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesLimitAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/limits.task.html
		//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
		//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
		//// http://www.taskjuggler.org/tj3/manual/limits.html
		//Limit:
		//	value=XFloat unit=TimeUnit ("{" attributes+=LimitAttribute* "}")?;
		public ParserRule getRule() { return rule; }

		//value=XFloat unit=TimeUnit ("{" attributes+=LimitAttribute* "}")?
		public Group getGroup() { return cGroup; }

		//value=XFloat
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//XFloat
		public RuleCall getValueXFloatParserRuleCall_0_0() { return cValueXFloatParserRuleCall_0_0; }

		//unit=TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }

		//("{" attributes+=LimitAttribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=LimitAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//LimitAttribute
		public RuleCall getAttributesLimitAttributeParserRuleCall_2_1_0() { return cAttributesLimitAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class LimitAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEndKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEndAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEndISODATETerminalRuleCall_0_1_0 = (RuleCall)cEndAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPeriodKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPeriodAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPeriodInterval1ParserRuleCall_1_1_0 = (RuleCall)cPeriodAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cResourcesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_1_0 = (CrossReference)cResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_2_1_0 = (CrossReference)cResourcesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cStartKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStartISODATETerminalRuleCall_3_1_0 = (RuleCall)cStartAssignment_3_1.eContents().get(0);
		
		//LimitAttribute:
		//	"end" end=ISODATE | "period" period=Interval1 | "resources" resources+=[Resource] ("," resources+=[Resource])* |
		//	"start" start=ISODATE;
		public ParserRule getRule() { return rule; }

		//"end" end=ISODATE | "period" period=Interval1 | "resources" resources+=[Resource] ("," resources+=[Resource])* | "start"
		//start=ISODATE
		public Alternatives getAlternatives() { return cAlternatives; }

		//"end" end=ISODATE
		public Group getGroup_0() { return cGroup_0; }

		//"end"
		public Keyword getEndKeyword_0_0() { return cEndKeyword_0_0; }

		//end=ISODATE
		public Assignment getEndAssignment_0_1() { return cEndAssignment_0_1; }

		//ISODATE
		public RuleCall getEndISODATETerminalRuleCall_0_1_0() { return cEndISODATETerminalRuleCall_0_1_0; }

		//"period" period=Interval1
		public Group getGroup_1() { return cGroup_1; }

		//"period"
		public Keyword getPeriodKeyword_1_0() { return cPeriodKeyword_1_0; }

		//period=Interval1
		public Assignment getPeriodAssignment_1_1() { return cPeriodAssignment_1_1; }

		//Interval1
		public RuleCall getPeriodInterval1ParserRuleCall_1_1_0() { return cPeriodInterval1ParserRuleCall_1_1_0; }

		//"resources" resources+=[Resource] ("," resources+=[Resource])*
		public Group getGroup_2() { return cGroup_2; }

		//"resources"
		public Keyword getResourcesKeyword_2_0() { return cResourcesKeyword_2_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_1_0() { return cResourcesResourceCrossReference_2_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_1_0_1; }

		//("," resources+=[Resource])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_2_1() { return cResourcesAssignment_2_2_1; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_2_1_0() { return cResourcesResourceCrossReference_2_2_1_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_2_1_0_1; }

		//"start" start=ISODATE
		public Group getGroup_3() { return cGroup_3; }

		//"start"
		public Keyword getStartKeyword_3_0() { return cStartKeyword_3_0; }

		//start=ISODATE
		public Assignment getStartAssignment_3_1() { return cStartAssignment_3_1; }

		//ISODATE
		public RuleCall getStartISODATETerminalRuleCall_3_1_0() { return cStartISODATETerminalRuleCall_3_1_0; }
	}

	public class RealFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegativePrefixSTRINGTerminalRuleCall_0_0 = (RuleCall)cNegativePrefixAssignment_0.eContents().get(0);
		private final Assignment cNegativeSuffixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNegativeSuffixSTRINGTerminalRuleCall_1_0 = (RuleCall)cNegativeSuffixAssignment_1.eContents().get(0);
		private final Assignment cThousandsSeparatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThousandsSeparatorSTRINGTerminalRuleCall_2_0 = (RuleCall)cThousandsSeparatorAssignment_2.eContents().get(0);
		private final Assignment cFractionSeparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFractionSeparatorSTRINGTerminalRuleCall_3_0 = (RuleCall)cFractionSeparatorAssignment_3.eContents().get(0);
		private final Assignment cFractionDigitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFractionDigitsINTTerminalRuleCall_4_0 = (RuleCall)cFractionDigitsAssignment_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
		//// http://www.taskjuggler.org/tj3/manual/numberformat.html
		//RealFormat:
		//	negativePrefix=STRING negativeSuffix=STRING thousandsSeparator=STRING fractionSeparator=STRING fractionDigits=INT;
		public ParserRule getRule() { return rule; }

		//negativePrefix=STRING negativeSuffix=STRING thousandsSeparator=STRING fractionSeparator=STRING fractionDigits=INT
		public Group getGroup() { return cGroup; }

		//negativePrefix=STRING
		public Assignment getNegativePrefixAssignment_0() { return cNegativePrefixAssignment_0; }

		//STRING
		public RuleCall getNegativePrefixSTRINGTerminalRuleCall_0_0() { return cNegativePrefixSTRINGTerminalRuleCall_0_0; }

		//negativeSuffix=STRING
		public Assignment getNegativeSuffixAssignment_1() { return cNegativeSuffixAssignment_1; }

		//STRING
		public RuleCall getNegativeSuffixSTRINGTerminalRuleCall_1_0() { return cNegativeSuffixSTRINGTerminalRuleCall_1_0; }

		//thousandsSeparator=STRING
		public Assignment getThousandsSeparatorAssignment_2() { return cThousandsSeparatorAssignment_2; }

		//STRING
		public RuleCall getThousandsSeparatorSTRINGTerminalRuleCall_2_0() { return cThousandsSeparatorSTRINGTerminalRuleCall_2_0; }

		//fractionSeparator=STRING
		public Assignment getFractionSeparatorAssignment_3() { return cFractionSeparatorAssignment_3; }

		//STRING
		public RuleCall getFractionSeparatorSTRINGTerminalRuleCall_3_0() { return cFractionSeparatorSTRINGTerminalRuleCall_3_0; }

		//fractionDigits=INT
		public Assignment getFractionDigitsAssignment_4() { return cFractionDigitsAssignment_4; }

		//INT
		public RuleCall getFractionDigitsINTTerminalRuleCall_4_0() { return cFractionDigitsINTTerminalRuleCall_4_0; }
	}

	public class ShiftLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShiftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cShiftShiftCrossReference_0_0 = (CrossReference)cShiftAssignment_0.eContents().get(0);
		private final RuleCall cShiftShiftIDTerminalRuleCall_0_0_1 = (RuleCall)cShiftShiftCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIntervalsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIntervalsInterval3ParserRuleCall_1_0_0 = (RuleCall)cIntervalsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_1_1_1_0 = (RuleCall)cIntervalsAssignment_1_1_1.eContents().get(0);
		
		//// supports Shifts
		//ShiftLimit:
		//	shift=[Shift] (intervals+=Interval3 ("," intervals+=Interval3)*)?;
		public ParserRule getRule() { return rule; }

		//shift=[Shift] (intervals+=Interval3 ("," intervals+=Interval3)*)?
		public Group getGroup() { return cGroup; }

		//shift=[Shift]
		public Assignment getShiftAssignment_0() { return cShiftAssignment_0; }

		//[Shift]
		public CrossReference getShiftShiftCrossReference_0_0() { return cShiftShiftCrossReference_0_0; }

		//ID
		public RuleCall getShiftShiftIDTerminalRuleCall_0_0_1() { return cShiftShiftIDTerminalRuleCall_0_0_1; }

		//(intervals+=Interval3 ("," intervals+=Interval3)*)?
		public Group getGroup_1() { return cGroup_1; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_1_0() { return cIntervalsAssignment_1_0; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_1_0_0() { return cIntervalsInterval3ParserRuleCall_1_0_0; }

		//("," intervals+=Interval3)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//intervals+=Interval3
		public Assignment getIntervalsAssignment_1_1_1() { return cIntervalsAssignment_1_1_1; }

		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_1_1_1_0() { return cIntervalsInterval3ParserRuleCall_1_1_1_0; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Assignment cCriteriaAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cCriteriaCriterionParserRuleCall_0_1_0 = (RuleCall)cCriteriaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCriteriaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCriteriaCriterionParserRuleCall_1_1_0 = (RuleCall)cCriteriaAssignment_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//Sort:
		//	(id?=ID | criteria+=Criterion) ("," criteria+=Criterion)*;
		public ParserRule getRule() { return rule; }

		//(id?=ID | criteria+=Criterion) ("," criteria+=Criterion)*
		public Group getGroup() { return cGroup; }

		//id?=ID | criteria+=Criterion
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//id?=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }

		//criteria+=Criterion
		public Assignment getCriteriaAssignment_0_1() { return cCriteriaAssignment_0_1; }

		//Criterion
		public RuleCall getCriteriaCriterionParserRuleCall_0_1_0() { return cCriteriaCriterionParserRuleCall_0_1_0; }

		//("," criteria+=Criterion)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//criteria+=Criterion
		public Assignment getCriteriaAssignment_1_1() { return cCriteriaAssignment_1_1; }

		//Criterion
		public RuleCall getCriteriaCriterionParserRuleCall_1_1_0() { return cCriteriaCriterionParserRuleCall_1_1_0; }
	}

	public class TaskDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTaskAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTaskTaskCrossReference_0_0 = (CrossReference)cTaskAssignment_0.eContents().get(0);
		private final RuleCall cTaskTaskTaskPathParserRuleCall_0_0_1 = (RuleCall)cTaskTaskCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cGroup_1.eContents().get(1);
		private final Assignment cGapDurationAssignment_1_1_0 = (Assignment)cUnorderedGroup_1_1.eContents().get(0);
		private final RuleCall cGapDurationGapDurationParserRuleCall_1_1_0_0 = (RuleCall)cGapDurationAssignment_1_1_0.eContents().get(0);
		private final Assignment cGapLengthAssignment_1_1_1 = (Assignment)cUnorderedGroup_1_1.eContents().get(1);
		private final RuleCall cGapLengthGapLengthParserRuleCall_1_1_1_0 = (RuleCall)cGapLengthAssignment_1_1_1.eContents().get(0);
		private final Assignment cPolicyAssignment_1_1_2 = (Assignment)cUnorderedGroup_1_1.eContents().get(2);
		private final RuleCall cPolicyDependsPolicyEnumRuleCall_1_1_2_0 = (RuleCall)cPolicyAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TaskDependency:
		//	task=[Task|TaskPath] ("{" (gapDuration=GapDuration? & gapLength=GapLength? & policy=DependsPolicy?) "}")?;
		public ParserRule getRule() { return rule; }

		//task=[Task|TaskPath] ("{" (gapDuration=GapDuration? & gapLength=GapLength? & policy=DependsPolicy?) "}")?
		public Group getGroup() { return cGroup; }

		//task=[Task|TaskPath]
		public Assignment getTaskAssignment_0() { return cTaskAssignment_0; }

		//[Task|TaskPath]
		public CrossReference getTaskTaskCrossReference_0_0() { return cTaskTaskCrossReference_0_0; }

		//TaskPath
		public RuleCall getTaskTaskTaskPathParserRuleCall_0_0_1() { return cTaskTaskTaskPathParserRuleCall_0_0_1; }

		//("{" (gapDuration=GapDuration? & gapLength=GapLength? & policy=DependsPolicy?) "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//gapDuration=GapDuration? & gapLength=GapLength? & policy=DependsPolicy?
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }

		//gapDuration=GapDuration?
		public Assignment getGapDurationAssignment_1_1_0() { return cGapDurationAssignment_1_1_0; }

		//GapDuration
		public RuleCall getGapDurationGapDurationParserRuleCall_1_1_0_0() { return cGapDurationGapDurationParserRuleCall_1_1_0_0; }

		//gapLength=GapLength?
		public Assignment getGapLengthAssignment_1_1_1() { return cGapLengthAssignment_1_1_1; }

		//GapLength
		public RuleCall getGapLengthGapLengthParserRuleCall_1_1_1_0() { return cGapLengthGapLengthParserRuleCall_1_1_1_0; }

		//policy=DependsPolicy?
		public Assignment getPolicyAssignment_1_1_2() { return cPolicyAssignment_1_1_2; }

		//DependsPolicy
		public RuleCall getPolicyDependsPolicyEnumRuleCall_1_1_2_0() { return cPolicyDependsPolicyEnumRuleCall_1_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class TaskPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TaskPath:
		//	"!"* ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//"!"* ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//"!"*
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class TaskTimesheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskTimesheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPriorityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemainingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWorkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
		//TaskTimesheetAttribute:
		//	End //	| StatusTimesheet
		//	| Priority | Remaining | Work;
		public ParserRule getRule() { return rule; }

		//End //	| StatusTimesheet
		//| Priority | Remaining | Work
		public Alternatives getAlternatives() { return cAlternatives; }

		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }

		//Priority
		public RuleCall getPriorityParserRuleCall_1() { return cPriorityParserRuleCall_1; }

		//Remaining
		public RuleCall getRemainingParserRuleCall_2() { return cRemainingParserRuleCall_2; }

		//Work
		public RuleCall getWorkParserRuleCall_3() { return cWorkParserRuleCall_3; }
	}

	public class TimesheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNewTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShiftTimesheetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskTimesheetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheet.html
		//TimesheetAttribute:
		//	NewTask | ShiftTimesheet | / *StatusTimesheet | * / TaskTimesheet;
		public ParserRule getRule() { return rule; }

		//NewTask | ShiftTimesheet | / *StatusTimesheet | * / TaskTimesheet
		public Alternatives getAlternatives() { return cAlternatives; }

		//NewTask
		public RuleCall getNewTaskParserRuleCall_0() { return cNewTaskParserRuleCall_0; }

		//ShiftTimesheet
		public RuleCall getShiftTimesheetParserRuleCall_1() { return cShiftTimesheetParserRuleCall_1; }

		/// *StatusTimesheet | * / TaskTimesheet
		public RuleCall getTaskTimesheetParserRuleCall_2() { return cTaskTimesheetParserRuleCall_2; }
	}

	public class TimesheetReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesheetReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHideResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPeriodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheetreport.html
		//TimesheetReportAttribute:
		//	End | HideResource | Period | Start;
		public ParserRule getRule() { return rule; }

		//End | HideResource | Period | Start
		public Alternatives getAlternatives() { return cAlternatives; }

		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }

		//HideResource
		public RuleCall getHideResourceParserRuleCall_1() { return cHideResourceParserRuleCall_1; }

		//Period
		public RuleCall getPeriodParserRuleCall_2() { return cPeriodParserRuleCall_2; }

		//Start
		public RuleCall getStartParserRuleCall_3() { return cStartParserRuleCall_3; }
	}

	public class RichTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichText");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//RichText:
		//	text=STRING;
		public ParserRule getRule() { return rule; }

		//text=STRING
		public Assignment getTextAssignment() { return cTextAssignment; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0() { return cTextSTRINGTerminalRuleCall_0; }
	}

	public class WorkHoursElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkHours");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTIMETerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStopAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStopTIMETerminalRuleCall_2_0 = (RuleCall)cStopAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
		//WorkHours:
		//	start=TIME "-" stop=TIME;
		public ParserRule getRule() { return rule; }

		//start=TIME "-" stop=TIME
		public Group getGroup() { return cGroup; }

		//start=TIME
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//TIME
		public RuleCall getStartTIMETerminalRuleCall_0_0() { return cStartTIMETerminalRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//stop=TIME
		public Assignment getStopAssignment_2() { return cStopAssignment_2; }

		//TIME
		public RuleCall getStopTIMETerminalRuleCall_2_0() { return cStopTIMETerminalRuleCall_2_0; }
	}

	public class WeekdaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Weekdays");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstWeekdayEnumRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLastAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLastWeekdayEnumRuleCall_1_1_0 = (RuleCall)cLastAssignment_1_1.eContents().get(0);
		
		//Weekdays:
		//	first=Weekday ("-" last=Weekday)?;
		public ParserRule getRule() { return rule; }

		//first=Weekday ("-" last=Weekday)?
		public Group getGroup() { return cGroup; }

		//first=Weekday
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//Weekday
		public RuleCall getFirstWeekdayEnumRuleCall_0_0() { return cFirstWeekdayEnumRuleCall_0_0; }

		//("-" last=Weekday)?
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//last=Weekday
		public Assignment getLastAssignment_1_1() { return cLastAssignment_1_1; }

		//Weekday
		public RuleCall getLastWeekdayEnumRuleCall_1_1_0() { return cLastWeekdayEnumRuleCall_1_1_0; }
	}

	public class XFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFloat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// XFloat is permitting either an int or a float: eg: 4 and 4.0 are parsed as intended.
		//// this technique avoids a FLOAT terminal definition that would hide INT:
		//// eg: avoiding 4 would only be INT and 4.0 would only be FLOAT.
		//XFloat returns ecore::EFloat:
		//	FLOAT | INT;
		public ParserRule getRule() { return rule; }

		//FLOAT | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0() { return cFLOATTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class ChargeAppliesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ChargeApplies");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONSTARTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONSTARTOnstartKeyword_0_0 = (Keyword)cONSTARTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONENDOnendKeyword_1_0 = (Keyword)cONENDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPERHOUREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPERHOURPerhourKeyword_2_0 = (Keyword)cPERHOUREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPERDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPERDAYPerdayKeyword_3_0 = (Keyword)cPERDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPERWEEKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPERWEEKPerweekKeyword_4_0 = (Keyword)cPERWEEKEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/charge.html
		//enum ChargeApplies:
		//	ONSTART="onstart" | ONEND="onend" | PERHOUR="perhour" | PERDAY="perday" | PERWEEK="perweek";
		public EnumRule getRule() { return rule; }

		//ONSTART="onstart" | ONEND="onend" | PERHOUR="perhour" | PERDAY="perday" | PERWEEK="perweek"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ONSTART="onstart"
		public EnumLiteralDeclaration getONSTARTEnumLiteralDeclaration_0() { return cONSTARTEnumLiteralDeclaration_0; }

		//"onstart"
		public Keyword getONSTARTOnstartKeyword_0_0() { return cONSTARTOnstartKeyword_0_0; }

		//ONEND="onend"
		public EnumLiteralDeclaration getONENDEnumLiteralDeclaration_1() { return cONENDEnumLiteralDeclaration_1; }

		//"onend"
		public Keyword getONENDOnendKeyword_1_0() { return cONENDOnendKeyword_1_0; }

		//PERHOUR="perhour"
		public EnumLiteralDeclaration getPERHOUREnumLiteralDeclaration_2() { return cPERHOUREnumLiteralDeclaration_2; }

		//"perhour"
		public Keyword getPERHOURPerhourKeyword_2_0() { return cPERHOURPerhourKeyword_2_0; }

		//PERDAY="perday"
		public EnumLiteralDeclaration getPERDAYEnumLiteralDeclaration_3() { return cPERDAYEnumLiteralDeclaration_3; }

		//"perday"
		public Keyword getPERDAYPerdayKeyword_3_0() { return cPERDAYPerdayKeyword_3_0; }

		//PERWEEK="perweek"
		public EnumLiteralDeclaration getPERWEEKEnumLiteralDeclaration_4() { return cPERWEEKEnumLiteralDeclaration_4; }

		//"perweek"
		public Keyword getPERWEEKPerweekKeyword_4_0() { return cPERWEEKPerweekKeyword_4_0; }
	}

	public class JustificationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Justification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCENTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCENTERCenterKeyword_1_0 = (Keyword)cCENTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRightKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Justification:
		//	LEFT="left" | CENTER="center" | RIGHT="right";
		public EnumRule getRule() { return rule; }

		//LEFT="left" | CENTER="center" | RIGHT="right"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFT="left"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }

		//"left"
		public Keyword getLEFTLeftKeyword_0_0() { return cLEFTLeftKeyword_0_0; }

		//CENTER="center"
		public EnumLiteralDeclaration getCENTEREnumLiteralDeclaration_1() { return cCENTEREnumLiteralDeclaration_1; }

		//"center"
		public Keyword getCENTERCenterKeyword_1_0() { return cCENTERCenterKeyword_1_0; }

		//RIGHT="right"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }

		//"right"
		public Keyword getRIGHTRightKeyword_2_0() { return cRIGHTRightKeyword_2_0; }
	}

	public class JournalModeValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JournalModeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJOURNALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJOURNALJournalKeyword_0_0 = (Keyword)cJOURNALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJOURNAL_SUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJOURNAL_SUBJournal_subKeyword_1_0 = (Keyword)cJOURNAL_SUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTATUS_DOWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTATUS_DOWNStatus_downKeyword_2_0 = (Keyword)cSTATUS_DOWNEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTATUS_UPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTATUS_UPStatus_upKeyword_3_0 = (Keyword)cSTATUS_UPEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cALERTS_DOWNEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cALERTS_DOWNAlerts_downKeyword_4_0 = (Keyword)cALERTS_DOWNEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/journalmode.html
		//enum JournalModeValue:
		//	JOURNAL="journal" | JOURNAL_SUB=" journal_sub" | STATUS_DOWN="status_down" | STATUS_UP="status_up" |
		//	ALERTS_DOWN="alerts_down";
		public EnumRule getRule() { return rule; }

		//JOURNAL="journal" | JOURNAL_SUB=" journal_sub" | STATUS_DOWN="status_down" | STATUS_UP="status_up" |
		//ALERTS_DOWN="alerts_down"
		public Alternatives getAlternatives() { return cAlternatives; }

		//JOURNAL="journal"
		public EnumLiteralDeclaration getJOURNALEnumLiteralDeclaration_0() { return cJOURNALEnumLiteralDeclaration_0; }

		//"journal"
		public Keyword getJOURNALJournalKeyword_0_0() { return cJOURNALJournalKeyword_0_0; }

		//JOURNAL_SUB=" journal_sub"
		public EnumLiteralDeclaration getJOURNAL_SUBEnumLiteralDeclaration_1() { return cJOURNAL_SUBEnumLiteralDeclaration_1; }

		//" journal_sub"
		public Keyword getJOURNAL_SUBJournal_subKeyword_1_0() { return cJOURNAL_SUBJournal_subKeyword_1_0; }

		//STATUS_DOWN="status_down"
		public EnumLiteralDeclaration getSTATUS_DOWNEnumLiteralDeclaration_2() { return cSTATUS_DOWNEnumLiteralDeclaration_2; }

		//"status_down"
		public Keyword getSTATUS_DOWNStatus_downKeyword_2_0() { return cSTATUS_DOWNStatus_downKeyword_2_0; }

		//STATUS_UP="status_up"
		public EnumLiteralDeclaration getSTATUS_UPEnumLiteralDeclaration_3() { return cSTATUS_UPEnumLiteralDeclaration_3; }

		//"status_up"
		public Keyword getSTATUS_UPStatus_upKeyword_3_0() { return cSTATUS_UPStatus_upKeyword_3_0; }

		//ALERTS_DOWN="alerts_down"
		public EnumLiteralDeclaration getALERTS_DOWNEnumLiteralDeclaration_4() { return cALERTS_DOWNEnumLiteralDeclaration_4; }

		//"alerts_down"
		public Keyword getALERTS_DOWNAlerts_downKeyword_4_0() { return cALERTS_DOWNAlerts_downKeyword_4_0; }
	}

	public class JournalEntrySortCriterionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JournalEntrySortCriterion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDATE_DOWNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDATE_DOWNDateDownKeyword_0_0 = (Keyword)cDATE_DOWNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDATE_UPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDATE_UPDateUpKeyword_1_0 = (Keyword)cDATE_UPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALERT_DOWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALERT_DOWNAlertDownKeyword_2_0 = (Keyword)cALERT_DOWNEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cALERT_UPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cALERT_UPAlertUpKeyword_3_0 = (Keyword)cALERT_UPEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPROPERTY_UPEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPROPERTY_UPPropertyUpKeyword_4_0 = (Keyword)cPROPERTY_UPEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
		//enum JournalEntrySortCriterion:
		//	DATE_DOWN="date.down" | DATE_UP="date.up" | ALERT_DOWN="alert.down" | ALERT_UP="alert.up" | PROPERTY_UP="property.up";
		public EnumRule getRule() { return rule; }

		//DATE_DOWN="date.down" | DATE_UP="date.up" | ALERT_DOWN="alert.down" | ALERT_UP="alert.up" | PROPERTY_UP="property.up"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DATE_DOWN="date.down"
		public EnumLiteralDeclaration getDATE_DOWNEnumLiteralDeclaration_0() { return cDATE_DOWNEnumLiteralDeclaration_0; }

		//"date.down"
		public Keyword getDATE_DOWNDateDownKeyword_0_0() { return cDATE_DOWNDateDownKeyword_0_0; }

		//DATE_UP="date.up"
		public EnumLiteralDeclaration getDATE_UPEnumLiteralDeclaration_1() { return cDATE_UPEnumLiteralDeclaration_1; }

		//"date.up"
		public Keyword getDATE_UPDateUpKeyword_1_0() { return cDATE_UPDateUpKeyword_1_0; }

		//ALERT_DOWN="alert.down"
		public EnumLiteralDeclaration getALERT_DOWNEnumLiteralDeclaration_2() { return cALERT_DOWNEnumLiteralDeclaration_2; }

		//"alert.down"
		public Keyword getALERT_DOWNAlertDownKeyword_2_0() { return cALERT_DOWNAlertDownKeyword_2_0; }

		//ALERT_UP="alert.up"
		public EnumLiteralDeclaration getALERT_UPEnumLiteralDeclaration_3() { return cALERT_UPEnumLiteralDeclaration_3; }

		//"alert.up"
		public Keyword getALERT_UPAlertUpKeyword_3_0() { return cALERT_UPAlertUpKeyword_3_0; }

		//PROPERTY_UP="property.up"
		public EnumLiteralDeclaration getPROPERTY_UPEnumLiteralDeclaration_4() { return cPROPERTY_UPEnumLiteralDeclaration_4; }

		//"property.up"
		public Keyword getPROPERTY_UPPropertyUpKeyword_4_0() { return cPROPERTY_UPPropertyUpKeyword_4_0; }
	}

	public class ListTypeValuesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ListTypeValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBULLETSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBULLETSBulletsKeyword_0_0 = (Keyword)cBULLETSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMMAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMMACommaKeyword_1_0 = (Keyword)cCOMMAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNUMBEREDNumberedKeyword_2_0 = (Keyword)cNUMBEREDEnumLiteralDeclaration_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
		//enum ListTypeValues:
		//	BULLETS="bullets" | COMMA="comma" | NUMBERED="numbered";
		public EnumRule getRule() { return rule; }

		//BULLETS="bullets" | COMMA="comma" | NUMBERED="numbered"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BULLETS="bullets"
		public EnumLiteralDeclaration getBULLETSEnumLiteralDeclaration_0() { return cBULLETSEnumLiteralDeclaration_0; }

		//"bullets"
		public Keyword getBULLETSBulletsKeyword_0_0() { return cBULLETSBulletsKeyword_0_0; }

		//COMMA="comma"
		public EnumLiteralDeclaration getCOMMAEnumLiteralDeclaration_1() { return cCOMMAEnumLiteralDeclaration_1; }

		//"comma"
		public Keyword getCOMMACommaKeyword_1_0() { return cCOMMACommaKeyword_1_0; }

		//NUMBERED="numbered"
		public EnumLiteralDeclaration getNUMBEREDEnumLiteralDeclaration_2() { return cNUMBEREDEnumLiteralDeclaration_2; }

		//"numbered"
		public Keyword getNUMBEREDNumberedKeyword_2_0() { return cNUMBEREDNumberedKeyword_2_0; }
	}

	public class CriterionDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CriterionDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUPUpKeyword_0_0 = (Keyword)cUPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOWNEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOWNDownKeyword_1_0 = (Keyword)cDOWNEnumLiteralDeclaration_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//enum CriterionDirection:
		//	UP="up" | DOWN="down";
		public EnumRule getRule() { return rule; }

		//UP="up" | DOWN="down"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UP="up"
		public EnumLiteralDeclaration getUPEnumLiteralDeclaration_0() { return cUPEnumLiteralDeclaration_0; }

		//"up"
		public Keyword getUPUpKeyword_0_0() { return cUPUpKeyword_0_0; }

		//DOWN="down"
		public EnumLiteralDeclaration getDOWNEnumLiteralDeclaration_1() { return cDOWNEnumLiteralDeclaration_1; }

		//"down"
		public Keyword getDOWNDownKeyword_1_0() { return cDOWNDownKeyword_1_0; }
	}

	public class YesNoElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "YesNo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cYESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cYESYesKeyword_0_0 = (Keyword)cYESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONoKeyword_1_0 = (Keyword)cNOEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum YesNo:
		//	YES="yes" | NO="no";
		public EnumRule getRule() { return rule; }

		//YES="yes" | NO="no"
		public Alternatives getAlternatives() { return cAlternatives; }

		//YES="yes"
		public EnumLiteralDeclaration getYESEnumLiteralDeclaration_0() { return cYESEnumLiteralDeclaration_0; }

		//"yes"
		public Keyword getYESYesKeyword_0_0() { return cYESYesKeyword_0_0; }

		//NO="no"
		public EnumLiteralDeclaration getNOEnumLiteralDeclaration_1() { return cNOEnumLiteralDeclaration_1; }

		//"no"
		public Keyword getNONoKeyword_1_0() { return cNONoKeyword_1_0; }
	}

	public class ReportFormatElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ReportFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCSVEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCSVCsvKeyword_0_0 = (Keyword)cCSVEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHTMLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHTMLHtmlKeyword_1_0 = (Keyword)cHTMLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNIKUEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNIKUNikuKeyword_2_0 = (Keyword)cNIKUEnumLiteralDeclaration_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/formats.html
		//enum ReportFormat:
		//	CSV="csv" | HTML="html" | NIKU="niku";
		public EnumRule getRule() { return rule; }

		//CSV="csv" | HTML="html" | NIKU="niku"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CSV="csv"
		public EnumLiteralDeclaration getCSVEnumLiteralDeclaration_0() { return cCSVEnumLiteralDeclaration_0; }

		//"csv"
		public Keyword getCSVCsvKeyword_0_0() { return cCSVCsvKeyword_0_0; }

		//HTML="html"
		public EnumLiteralDeclaration getHTMLEnumLiteralDeclaration_1() { return cHTMLEnumLiteralDeclaration_1; }

		//"html"
		public Keyword getHTMLHtmlKeyword_1_0() { return cHTMLHtmlKeyword_1_0; }

		//NIKU="niku"
		public EnumLiteralDeclaration getNIKUEnumLiteralDeclaration_2() { return cNIKUEnumLiteralDeclaration_2; }

		//"niku"
		public Keyword getNIKUNikuKeyword_2_0() { return cNIKUNikuKeyword_2_0; }
	}

	public class LoadDisplayUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LoadDisplayUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDAYSDaysKeyword_0_0 = (Keyword)cDAYSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHOURSHoursKeyword_1_0 = (Keyword)cHOURSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLONGAUTOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLONGAUTOLongautoKeyword_2_0 = (Keyword)cLONGAUTOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMINUTESMinutesKeyword_3_0 = (Keyword)cMINUTESEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMONTHSMonthsKeyword_4_0 = (Keyword)cMONTHSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTAUTOEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSHORTAUTOShortautoKeyword_5_0 = (Keyword)cSHORTAUTOEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWEEKSWeeksKeyword_6_0 = (Keyword)cWEEKSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cYEARSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cYEARSYearsKeyword_7_0 = (Keyword)cYEARSEnumLiteralDeclaration_7.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/loadunit.html
		//enum LoadDisplayUnit:
		//	DAYS="days" | HOURS="hours" | LONGAUTO="longauto" | MINUTES="minutes" | MONTHS="months" | SHORTAUTO="shortauto" |
		//	WEEKS="weeks" | YEARS="years";
		public EnumRule getRule() { return rule; }

		//DAYS="days" | HOURS="hours" | LONGAUTO="longauto" | MINUTES="minutes" | MONTHS="months" | SHORTAUTO="shortauto" |
		//WEEKS="weeks" | YEARS="years"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DAYS="days"
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_0() { return cDAYSEnumLiteralDeclaration_0; }

		//"days"
		public Keyword getDAYSDaysKeyword_0_0() { return cDAYSDaysKeyword_0_0; }

		//HOURS="hours"
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_1() { return cHOURSEnumLiteralDeclaration_1; }

		//"hours"
		public Keyword getHOURSHoursKeyword_1_0() { return cHOURSHoursKeyword_1_0; }

		//LONGAUTO="longauto"
		public EnumLiteralDeclaration getLONGAUTOEnumLiteralDeclaration_2() { return cLONGAUTOEnumLiteralDeclaration_2; }

		//"longauto"
		public Keyword getLONGAUTOLongautoKeyword_2_0() { return cLONGAUTOLongautoKeyword_2_0; }

		//MINUTES="minutes"
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_3() { return cMINUTESEnumLiteralDeclaration_3; }

		//"minutes"
		public Keyword getMINUTESMinutesKeyword_3_0() { return cMINUTESMinutesKeyword_3_0; }

		//MONTHS="months"
		public EnumLiteralDeclaration getMONTHSEnumLiteralDeclaration_4() { return cMONTHSEnumLiteralDeclaration_4; }

		//"months"
		public Keyword getMONTHSMonthsKeyword_4_0() { return cMONTHSMonthsKeyword_4_0; }

		//SHORTAUTO="shortauto"
		public EnumLiteralDeclaration getSHORTAUTOEnumLiteralDeclaration_5() { return cSHORTAUTOEnumLiteralDeclaration_5; }

		//"shortauto"
		public Keyword getSHORTAUTOShortautoKeyword_5_0() { return cSHORTAUTOShortautoKeyword_5_0; }

		//WEEKS="weeks"
		public EnumLiteralDeclaration getWEEKSEnumLiteralDeclaration_6() { return cWEEKSEnumLiteralDeclaration_6; }

		//"weeks"
		public Keyword getWEEKSWeeksKeyword_6_0() { return cWEEKSWeeksKeyword_6_0; }

		//YEARS="years"
		public EnumLiteralDeclaration getYEARSEnumLiteralDeclaration_7() { return cYEARSEnumLiteralDeclaration_7; }

		//"years"
		public Keyword getYEARSYearsKeyword_7_0() { return cYEARSYearsKeyword_7_0; }
	}

	public class ScaleResolutionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ScaleResolution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHOURHourKeyword_0_0 = (Keyword)cHOUREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDAYDayKeyword_1_0 = (Keyword)cDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEEKWeekKeyword_2_0 = (Keyword)cWEEKEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMONTHMonthKeyword_3_0 = (Keyword)cMONTHEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cQUARTEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cQUARTERQuarterKeyword_4_0 = (Keyword)cQUARTEREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARYearKeyword_5_0 = (Keyword)cYEAREnumLiteralDeclaration_5.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/scale.column.html
		//enum ScaleResolution:
		//	HOUR="hour" | DAY="day" | WEEK="week" | MONTH="month" | QUARTER="quarter" | YEAR="year";
		public EnumRule getRule() { return rule; }

		//HOUR="hour" | DAY="day" | WEEK="week" | MONTH="month" | QUARTER="quarter" | YEAR="year"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HOUR="hour"
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_0() { return cHOUREnumLiteralDeclaration_0; }

		//"hour"
		public Keyword getHOURHourKeyword_0_0() { return cHOURHourKeyword_0_0; }

		//DAY="day"
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_1() { return cDAYEnumLiteralDeclaration_1; }

		//"day"
		public Keyword getDAYDayKeyword_1_0() { return cDAYDayKeyword_1_0; }

		//WEEK="week"
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_2() { return cWEEKEnumLiteralDeclaration_2; }

		//"week"
		public Keyword getWEEKWeekKeyword_2_0() { return cWEEKWeekKeyword_2_0; }

		//MONTH="month"
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_3() { return cMONTHEnumLiteralDeclaration_3; }

		//"month"
		public Keyword getMONTHMonthKeyword_3_0() { return cMONTHMonthKeyword_3_0; }

		//QUARTER="quarter"
		public EnumLiteralDeclaration getQUARTEREnumLiteralDeclaration_4() { return cQUARTEREnumLiteralDeclaration_4; }

		//"quarter"
		public Keyword getQUARTERQuarterKeyword_4_0() { return cQUARTERQuarterKeyword_4_0; }

		//YEAR="year"
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_5() { return cYEAREnumLiteralDeclaration_5; }

		//"year"
		public Keyword getYEARYearKeyword_5_0() { return cYEARYearKeyword_5_0; }
	}

	public class SelectArgumentElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SelectArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMAXLOADEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMAXLOADEDMaxloadedKeyword_0_0 = (Keyword)cMAXLOADEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINLOADEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINLOADEDMinloadedKeyword_1_0 = (Keyword)cMINLOADEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINALLOCATEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINALLOCATEDMinallocatedKeyword_2_0 = (Keyword)cMINALLOCATEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cORDEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cORDEROrderKeyword_3_0 = (Keyword)cORDEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRANDOMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRANDOMRandomKeyword_4_0 = (Keyword)cRANDOMEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/select.html
		//enum SelectArgument:
		//	MAXLOADED="maxloaded" | MINLOADED="minloaded" | MINALLOCATED="minallocated" | ORDER="order" | RANDOM="random";
		public EnumRule getRule() { return rule; }

		//MAXLOADED="maxloaded" | MINLOADED="minloaded" | MINALLOCATED="minallocated" | ORDER="order" | RANDOM="random"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MAXLOADED="maxloaded"
		public EnumLiteralDeclaration getMAXLOADEDEnumLiteralDeclaration_0() { return cMAXLOADEDEnumLiteralDeclaration_0; }

		//"maxloaded"
		public Keyword getMAXLOADEDMaxloadedKeyword_0_0() { return cMAXLOADEDMaxloadedKeyword_0_0; }

		//MINLOADED="minloaded"
		public EnumLiteralDeclaration getMINLOADEDEnumLiteralDeclaration_1() { return cMINLOADEDEnumLiteralDeclaration_1; }

		//"minloaded"
		public Keyword getMINLOADEDMinloadedKeyword_1_0() { return cMINLOADEDMinloadedKeyword_1_0; }

		//MINALLOCATED="minallocated"
		public EnumLiteralDeclaration getMINALLOCATEDEnumLiteralDeclaration_2() { return cMINALLOCATEDEnumLiteralDeclaration_2; }

		//"minallocated"
		public Keyword getMINALLOCATEDMinallocatedKeyword_2_0() { return cMINALLOCATEDMinallocatedKeyword_2_0; }

		//ORDER="order"
		public EnumLiteralDeclaration getORDEREnumLiteralDeclaration_3() { return cORDEREnumLiteralDeclaration_3; }

		//"order"
		public Keyword getORDEROrderKeyword_3_0() { return cORDEROrderKeyword_3_0; }

		//RANDOM="random"
		public EnumLiteralDeclaration getRANDOMEnumLiteralDeclaration_4() { return cRANDOMEnumLiteralDeclaration_4; }

		//"random"
		public Keyword getRANDOMRandomKeyword_4_0() { return cRANDOMRandomKeyword_4_0; }
	}

	public class ColumnIdElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALERTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALERTAlertKeyword_0_0 = (Keyword)cALERTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cALERTMESSAGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cALERTMESSAGEAlertmessageKeyword_1_0 = (Keyword)cALERTMESSAGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALERTSUMMARYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALERTSUMMARYAlertsummarKeyword_2_0 = (Keyword)cALERTSUMMARYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cALERTTRENDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cALERTTRENDAlerttrendKeyword_3_0 = (Keyword)cALERTTRENDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCHARTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCHARTChartKeyword_4_0 = (Keyword)cCHARTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCOMPLETECompleteKeyword_5_0 = (Keyword)cCOMPLETEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCOMPLETEDCompletedKeyword_6_0 = (Keyword)cCOMPLETEDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCRITICALNESSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCRITICALNESSCriticalnessKeyword_7_0 = (Keyword)cCRITICALNESSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCOSTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCOSTCostKeyword_8_0 = (Keyword)cCOSTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDAILYEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDAILYDailyKeyword_9_0 = (Keyword)cDAILYEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDURATIONEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDURATIONDurationKeyword_10_0 = (Keyword)cDURATIONEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDUTIESEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDUTIESDutiesKeyword_11_0 = (Keyword)cDUTIESEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cEFFICIENCYEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cEFFICIENCYEfficiencyKeyword_12_0 = (Keyword)cEFFICIENCYEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cEFFORTEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cEFFORTEffortKeyword_13_0 = (Keyword)cEFFORTEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cEFFORTDONEEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cEFFORTDONEEffortdoneKeyword_14_0 = (Keyword)cEFFORTDONEEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cEFFORTLEFTEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cEFFORTLEFTEffortleftKeyword_15_0 = (Keyword)cEFFORTLEFTEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cEMAILEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cEMAILEmailKeyword_16_0 = (Keyword)cEMAILEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cENDEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cENDEndKeyword_17_0 = (Keyword)cENDEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cFLAGSEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cFLAGSFlagsKeyword_18_0 = (Keyword)cFLAGSEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cFOLLOWERSEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cFOLLOWERSFollowersKeyword_19_0 = (Keyword)cFOLLOWERSEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cFREETIMEEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cFREETIMEFreetimeKeyword_20_0 = (Keyword)cFREETIMEEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cFREEWORKEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cFREEWORKFreeworkKeyword_21_0 = (Keyword)cFREEWORKEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cFTEEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cFTEFteKeyword_22_0 = (Keyword)cFTEEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cHEADCOUNTEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cHEADCOUNTHeadcountKeyword_23_0 = (Keyword)cHEADCOUNTEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cHIERARCHINDEXEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cHIERARCHINDEXHierarchindexKeyword_24_0 = (Keyword)cHIERARCHINDEXEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cHOURLYEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cHOURLYHourlyKeyword_25_0 = (Keyword)cHOURLYEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cIDEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cIDIdKeyword_26_0 = (Keyword)cIDEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cINDEXEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cINDEXIndexKeyword_27_0 = (Keyword)cINDEXEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cJOURNALEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cJOURNALJournalKeyword_28_0 = (Keyword)cJOURNALEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cLINEEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cLINELineKeyword_29_0 = (Keyword)cLINEEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cMAXENDEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cMAXENDMaxendKeyword_30_0 = (Keyword)cMAXENDEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cMAXSTARTEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cMAXSTARTMaxstartKeyword_31_0 = (Keyword)cMAXSTARTEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cMINENDEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cMINENDMinendKeyword_32_0 = (Keyword)cMINENDEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cMINSTARTEnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cMINSTARTMinstartKeyword_33_0 = (Keyword)cMINSTARTEnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHLYEnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cMONTHLYMonthlyKeyword_34_0 = (Keyword)cMONTHLYEnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cNOEnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cNONoKeyword_35_0 = (Keyword)cNOEnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cNAMEEnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cNAMENameKeyword_36_0 = (Keyword)cNAMEEnumLiteralDeclaration_36.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEEnumLiteralDeclaration_37 = (EnumLiteralDeclaration)cAlternatives.eContents().get(37);
		private final Keyword cNOTENoteKeyword_37_0 = (Keyword)cNOTEEnumLiteralDeclaration_37.eContents().get(0);
		private final EnumLiteralDeclaration cPATHCRITICALNESSEnumLiteralDeclaration_38 = (EnumLiteralDeclaration)cAlternatives.eContents().get(38);
		private final Keyword cPATHCRITICALNESSPathcriticalnessKeyword_38_0 = (Keyword)cPATHCRITICALNESSEnumLiteralDeclaration_38.eContents().get(0);
		private final EnumLiteralDeclaration cPRECURSOREnumLiteralDeclaration_39 = (EnumLiteralDeclaration)cAlternatives.eContents().get(39);
		private final Keyword cPRECURSORPrecursorKeyword_39_0 = (Keyword)cPRECURSOREnumLiteralDeclaration_39.eContents().get(0);
		private final EnumLiteralDeclaration cPRIORITYEnumLiteralDeclaration_40 = (EnumLiteralDeclaration)cAlternatives.eContents().get(40);
		private final Keyword cPRIORITYPriorityKeyword_40_0 = (Keyword)cPRIORITYEnumLiteralDeclaration_40.eContents().get(0);
		private final EnumLiteralDeclaration cQUARTERLYEnumLiteralDeclaration_41 = (EnumLiteralDeclaration)cAlternatives.eContents().get(41);
		private final Keyword cQUARTERLYQuarterlyKeyword_41_0 = (Keyword)cQUARTERLYEnumLiteralDeclaration_41.eContents().get(0);
		private final EnumLiteralDeclaration cRATEEnumLiteralDeclaration_42 = (EnumLiteralDeclaration)cAlternatives.eContents().get(42);
		private final Keyword cRATERateKeyword_42_0 = (Keyword)cRATEEnumLiteralDeclaration_42.eContents().get(0);
		private final EnumLiteralDeclaration cRESOURCESEnumLiteralDeclaration_43 = (EnumLiteralDeclaration)cAlternatives.eContents().get(43);
		private final Keyword cRESOURCESResourcesKeyword_43_0 = (Keyword)cRESOURCESEnumLiteralDeclaration_43.eContents().get(0);
		private final EnumLiteralDeclaration cRESPONSIBLEEnumLiteralDeclaration_44 = (EnumLiteralDeclaration)cAlternatives.eContents().get(44);
		private final Keyword cRESPONSIBLEResponsibleKeyword_44_0 = (Keyword)cRESPONSIBLEEnumLiteralDeclaration_44.eContents().get(0);
		private final EnumLiteralDeclaration cREVENUEEnumLiteralDeclaration_45 = (EnumLiteralDeclaration)cAlternatives.eContents().get(45);
		private final Keyword cREVENUERevenueKeyword_45_0 = (Keyword)cREVENUEEnumLiteralDeclaration_45.eContents().get(0);
		private final EnumLiteralDeclaration cSCENARIOEnumLiteralDeclaration_46 = (EnumLiteralDeclaration)cAlternatives.eContents().get(46);
		private final Keyword cSCENARIOScenarioKeyword_46_0 = (Keyword)cSCENARIOEnumLiteralDeclaration_46.eContents().get(0);
		private final EnumLiteralDeclaration cSEQNOEnumLiteralDeclaration_47 = (EnumLiteralDeclaration)cAlternatives.eContents().get(47);
		private final Keyword cSEQNOSeqnoKeyword_47_0 = (Keyword)cSEQNOEnumLiteralDeclaration_47.eContents().get(0);
		private final EnumLiteralDeclaration cSTARTEnumLiteralDeclaration_48 = (EnumLiteralDeclaration)cAlternatives.eContents().get(48);
		private final Keyword cSTARTStartKeyword_48_0 = (Keyword)cSTARTEnumLiteralDeclaration_48.eContents().get(0);
		private final EnumLiteralDeclaration cSTATUSEnumLiteralDeclaration_49 = (EnumLiteralDeclaration)cAlternatives.eContents().get(49);
		private final Keyword cSTATUSStatusKeyword_49_0 = (Keyword)cSTATUSEnumLiteralDeclaration_49.eContents().get(0);
		private final EnumLiteralDeclaration cTARGETSEnumLiteralDeclaration_50 = (EnumLiteralDeclaration)cAlternatives.eContents().get(50);
		private final Keyword cTARGETSTargetsKeyword_50_0 = (Keyword)cTARGETSEnumLiteralDeclaration_50.eContents().get(0);
		private final EnumLiteralDeclaration cWBSEnumLiteralDeclaration_51 = (EnumLiteralDeclaration)cAlternatives.eContents().get(51);
		private final Keyword cWBSWbsKeyword_51_0 = (Keyword)cWBSEnumLiteralDeclaration_51.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKLYEnumLiteralDeclaration_52 = (EnumLiteralDeclaration)cAlternatives.eContents().get(52);
		private final Keyword cWEEKLYWeeklyKeyword_52_0 = (Keyword)cWEEKLYEnumLiteralDeclaration_52.eContents().get(0);
		private final EnumLiteralDeclaration cYEARLYEnumLiteralDeclaration_53 = (EnumLiteralDeclaration)cAlternatives.eContents().get(53);
		private final Keyword cYEARLYYearlyKeyword_53_0 = (Keyword)cYEARLYEnumLiteralDeclaration_53.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/columnid.html	
		//enum ColumnId:
		//	ALERT="alert" | ALERTMESSAGE="alertmessage" | ALERTSUMMARY="alertsummar" | ALERTTREND="alerttrend" | CHART="chart" |
		//	COMPLETE="complete" | COMPLETED="completed" | CRITICALNESS="criticalness" | COST="cost" | DAILY="daily" |
		//	DURATION="duration" | DUTIES="duties" | EFFICIENCY="efficiency" | EFFORT="effort" | EFFORTDONE="effortdone" |
		//	EFFORTLEFT="effortleft" | EMAIL="email" | END="end" | FLAGS="flags" | FOLLOWERS="followers" | FREETIME="freetime" |
		//	FREEWORK="freework" | FTE="fte" | HEADCOUNT="headcount" | HIERARCHINDEX="hierarchindex" | HOURLY="hourly" | ID="id" |
		//	INDEX="index" | JOURNAL="journal" | LINE="line" | MAXEND="maxend" | MAXSTART="maxstart" | MINEND="minend" |
		//	MINSTART="minstart" | MONTHLY="monthly" | NO="no" | NAME="name" | NOTE="note" | PATHCRITICALNESS="pathcriticalness" |
		//	PRECURSOR="precursor" | PRIORITY="priority" | QUARTERLY="quarterly" | RATE="rate" | RESOURCES="resources" |
		//	RESPONSIBLE="responsible" | REVENUE="revenue" | SCENARIO="scenario" | SEQNO="seqno" | START="start" | STATUS="status"
		//	| TARGETS="targets" | WBS="wbs" | WEEKLY="weekly" | YEARLY="yearly";
		public EnumRule getRule() { return rule; }

		//ALERT="alert" | ALERTMESSAGE="alertmessage" | ALERTSUMMARY="alertsummar" | ALERTTREND="alerttrend" | CHART="chart" |
		//COMPLETE="complete" | COMPLETED="completed" | CRITICALNESS="criticalness" | COST="cost" | DAILY="daily" |
		//DURATION="duration" | DUTIES="duties" | EFFICIENCY="efficiency" | EFFORT="effort" | EFFORTDONE="effortdone" |
		//EFFORTLEFT="effortleft" | EMAIL="email" | END="end" | FLAGS="flags" | FOLLOWERS="followers" | FREETIME="freetime" |
		//FREEWORK="freework" | FTE="fte" | HEADCOUNT="headcount" | HIERARCHINDEX="hierarchindex" | HOURLY="hourly" | ID="id" |
		//INDEX="index" | JOURNAL="journal" | LINE="line" | MAXEND="maxend" | MAXSTART="maxstart" | MINEND="minend" |
		//MINSTART="minstart" | MONTHLY="monthly" | NO="no" | NAME="name" | NOTE="note" | PATHCRITICALNESS="pathcriticalness" |
		//PRECURSOR="precursor" | PRIORITY="priority" | QUARTERLY="quarterly" | RATE="rate" | RESOURCES="resources" |
		//RESPONSIBLE="responsible" | REVENUE="revenue" | SCENARIO="scenario" | SEQNO="seqno" | START="start" | STATUS="status" |
		//TARGETS="targets" | WBS="wbs" | WEEKLY="weekly" | YEARLY="yearly"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALERT="alert"
		public EnumLiteralDeclaration getALERTEnumLiteralDeclaration_0() { return cALERTEnumLiteralDeclaration_0; }

		//"alert"
		public Keyword getALERTAlertKeyword_0_0() { return cALERTAlertKeyword_0_0; }

		//ALERTMESSAGE="alertmessage"
		public EnumLiteralDeclaration getALERTMESSAGEEnumLiteralDeclaration_1() { return cALERTMESSAGEEnumLiteralDeclaration_1; }

		//"alertmessage"
		public Keyword getALERTMESSAGEAlertmessageKeyword_1_0() { return cALERTMESSAGEAlertmessageKeyword_1_0; }

		//ALERTSUMMARY="alertsummar"
		public EnumLiteralDeclaration getALERTSUMMARYEnumLiteralDeclaration_2() { return cALERTSUMMARYEnumLiteralDeclaration_2; }

		//"alertsummar"
		public Keyword getALERTSUMMARYAlertsummarKeyword_2_0() { return cALERTSUMMARYAlertsummarKeyword_2_0; }

		//ALERTTREND="alerttrend"
		public EnumLiteralDeclaration getALERTTRENDEnumLiteralDeclaration_3() { return cALERTTRENDEnumLiteralDeclaration_3; }

		//"alerttrend"
		public Keyword getALERTTRENDAlerttrendKeyword_3_0() { return cALERTTRENDAlerttrendKeyword_3_0; }

		//CHART="chart"
		public EnumLiteralDeclaration getCHARTEnumLiteralDeclaration_4() { return cCHARTEnumLiteralDeclaration_4; }

		//"chart"
		public Keyword getCHARTChartKeyword_4_0() { return cCHARTChartKeyword_4_0; }

		//COMPLETE="complete"
		public EnumLiteralDeclaration getCOMPLETEEnumLiteralDeclaration_5() { return cCOMPLETEEnumLiteralDeclaration_5; }

		//"complete"
		public Keyword getCOMPLETECompleteKeyword_5_0() { return cCOMPLETECompleteKeyword_5_0; }

		//COMPLETED="completed"
		public EnumLiteralDeclaration getCOMPLETEDEnumLiteralDeclaration_6() { return cCOMPLETEDEnumLiteralDeclaration_6; }

		//"completed"
		public Keyword getCOMPLETEDCompletedKeyword_6_0() { return cCOMPLETEDCompletedKeyword_6_0; }

		//CRITICALNESS="criticalness"
		public EnumLiteralDeclaration getCRITICALNESSEnumLiteralDeclaration_7() { return cCRITICALNESSEnumLiteralDeclaration_7; }

		//"criticalness"
		public Keyword getCRITICALNESSCriticalnessKeyword_7_0() { return cCRITICALNESSCriticalnessKeyword_7_0; }

		//COST="cost"
		public EnumLiteralDeclaration getCOSTEnumLiteralDeclaration_8() { return cCOSTEnumLiteralDeclaration_8; }

		//"cost"
		public Keyword getCOSTCostKeyword_8_0() { return cCOSTCostKeyword_8_0; }

		//DAILY="daily"
		public EnumLiteralDeclaration getDAILYEnumLiteralDeclaration_9() { return cDAILYEnumLiteralDeclaration_9; }

		//"daily"
		public Keyword getDAILYDailyKeyword_9_0() { return cDAILYDailyKeyword_9_0; }

		//DURATION="duration"
		public EnumLiteralDeclaration getDURATIONEnumLiteralDeclaration_10() { return cDURATIONEnumLiteralDeclaration_10; }

		//"duration"
		public Keyword getDURATIONDurationKeyword_10_0() { return cDURATIONDurationKeyword_10_0; }

		//DUTIES="duties"
		public EnumLiteralDeclaration getDUTIESEnumLiteralDeclaration_11() { return cDUTIESEnumLiteralDeclaration_11; }

		//"duties"
		public Keyword getDUTIESDutiesKeyword_11_0() { return cDUTIESDutiesKeyword_11_0; }

		//EFFICIENCY="efficiency"
		public EnumLiteralDeclaration getEFFICIENCYEnumLiteralDeclaration_12() { return cEFFICIENCYEnumLiteralDeclaration_12; }

		//"efficiency"
		public Keyword getEFFICIENCYEfficiencyKeyword_12_0() { return cEFFICIENCYEfficiencyKeyword_12_0; }

		//EFFORT="effort"
		public EnumLiteralDeclaration getEFFORTEnumLiteralDeclaration_13() { return cEFFORTEnumLiteralDeclaration_13; }

		//"effort"
		public Keyword getEFFORTEffortKeyword_13_0() { return cEFFORTEffortKeyword_13_0; }

		//EFFORTDONE="effortdone"
		public EnumLiteralDeclaration getEFFORTDONEEnumLiteralDeclaration_14() { return cEFFORTDONEEnumLiteralDeclaration_14; }

		//"effortdone"
		public Keyword getEFFORTDONEEffortdoneKeyword_14_0() { return cEFFORTDONEEffortdoneKeyword_14_0; }

		//EFFORTLEFT="effortleft"
		public EnumLiteralDeclaration getEFFORTLEFTEnumLiteralDeclaration_15() { return cEFFORTLEFTEnumLiteralDeclaration_15; }

		//"effortleft"
		public Keyword getEFFORTLEFTEffortleftKeyword_15_0() { return cEFFORTLEFTEffortleftKeyword_15_0; }

		//EMAIL="email"
		public EnumLiteralDeclaration getEMAILEnumLiteralDeclaration_16() { return cEMAILEnumLiteralDeclaration_16; }

		//"email"
		public Keyword getEMAILEmailKeyword_16_0() { return cEMAILEmailKeyword_16_0; }

		//END="end"
		public EnumLiteralDeclaration getENDEnumLiteralDeclaration_17() { return cENDEnumLiteralDeclaration_17; }

		//"end"
		public Keyword getENDEndKeyword_17_0() { return cENDEndKeyword_17_0; }

		//FLAGS="flags"
		public EnumLiteralDeclaration getFLAGSEnumLiteralDeclaration_18() { return cFLAGSEnumLiteralDeclaration_18; }

		//"flags"
		public Keyword getFLAGSFlagsKeyword_18_0() { return cFLAGSFlagsKeyword_18_0; }

		//FOLLOWERS="followers"
		public EnumLiteralDeclaration getFOLLOWERSEnumLiteralDeclaration_19() { return cFOLLOWERSEnumLiteralDeclaration_19; }

		//"followers"
		public Keyword getFOLLOWERSFollowersKeyword_19_0() { return cFOLLOWERSFollowersKeyword_19_0; }

		//FREETIME="freetime"
		public EnumLiteralDeclaration getFREETIMEEnumLiteralDeclaration_20() { return cFREETIMEEnumLiteralDeclaration_20; }

		//"freetime"
		public Keyword getFREETIMEFreetimeKeyword_20_0() { return cFREETIMEFreetimeKeyword_20_0; }

		//FREEWORK="freework"
		public EnumLiteralDeclaration getFREEWORKEnumLiteralDeclaration_21() { return cFREEWORKEnumLiteralDeclaration_21; }

		//"freework"
		public Keyword getFREEWORKFreeworkKeyword_21_0() { return cFREEWORKFreeworkKeyword_21_0; }

		//FTE="fte"
		public EnumLiteralDeclaration getFTEEnumLiteralDeclaration_22() { return cFTEEnumLiteralDeclaration_22; }

		//"fte"
		public Keyword getFTEFteKeyword_22_0() { return cFTEFteKeyword_22_0; }

		//HEADCOUNT="headcount"
		public EnumLiteralDeclaration getHEADCOUNTEnumLiteralDeclaration_23() { return cHEADCOUNTEnumLiteralDeclaration_23; }

		//"headcount"
		public Keyword getHEADCOUNTHeadcountKeyword_23_0() { return cHEADCOUNTHeadcountKeyword_23_0; }

		//HIERARCHINDEX="hierarchindex"
		public EnumLiteralDeclaration getHIERARCHINDEXEnumLiteralDeclaration_24() { return cHIERARCHINDEXEnumLiteralDeclaration_24; }

		//"hierarchindex"
		public Keyword getHIERARCHINDEXHierarchindexKeyword_24_0() { return cHIERARCHINDEXHierarchindexKeyword_24_0; }

		//HOURLY="hourly"
		public EnumLiteralDeclaration getHOURLYEnumLiteralDeclaration_25() { return cHOURLYEnumLiteralDeclaration_25; }

		//"hourly"
		public Keyword getHOURLYHourlyKeyword_25_0() { return cHOURLYHourlyKeyword_25_0; }

		//ID="id"
		public EnumLiteralDeclaration getIDEnumLiteralDeclaration_26() { return cIDEnumLiteralDeclaration_26; }

		//"id"
		public Keyword getIDIdKeyword_26_0() { return cIDIdKeyword_26_0; }

		//INDEX="index"
		public EnumLiteralDeclaration getINDEXEnumLiteralDeclaration_27() { return cINDEXEnumLiteralDeclaration_27; }

		//"index"
		public Keyword getINDEXIndexKeyword_27_0() { return cINDEXIndexKeyword_27_0; }

		//JOURNAL="journal"
		public EnumLiteralDeclaration getJOURNALEnumLiteralDeclaration_28() { return cJOURNALEnumLiteralDeclaration_28; }

		//"journal"
		public Keyword getJOURNALJournalKeyword_28_0() { return cJOURNALJournalKeyword_28_0; }

		//LINE="line"
		public EnumLiteralDeclaration getLINEEnumLiteralDeclaration_29() { return cLINEEnumLiteralDeclaration_29; }

		//"line"
		public Keyword getLINELineKeyword_29_0() { return cLINELineKeyword_29_0; }

		//MAXEND="maxend"
		public EnumLiteralDeclaration getMAXENDEnumLiteralDeclaration_30() { return cMAXENDEnumLiteralDeclaration_30; }

		//"maxend"
		public Keyword getMAXENDMaxendKeyword_30_0() { return cMAXENDMaxendKeyword_30_0; }

		//MAXSTART="maxstart"
		public EnumLiteralDeclaration getMAXSTARTEnumLiteralDeclaration_31() { return cMAXSTARTEnumLiteralDeclaration_31; }

		//"maxstart"
		public Keyword getMAXSTARTMaxstartKeyword_31_0() { return cMAXSTARTMaxstartKeyword_31_0; }

		//MINEND="minend"
		public EnumLiteralDeclaration getMINENDEnumLiteralDeclaration_32() { return cMINENDEnumLiteralDeclaration_32; }

		//"minend"
		public Keyword getMINENDMinendKeyword_32_0() { return cMINENDMinendKeyword_32_0; }

		//MINSTART="minstart"
		public EnumLiteralDeclaration getMINSTARTEnumLiteralDeclaration_33() { return cMINSTARTEnumLiteralDeclaration_33; }

		//"minstart"
		public Keyword getMINSTARTMinstartKeyword_33_0() { return cMINSTARTMinstartKeyword_33_0; }

		//MONTHLY="monthly"
		public EnumLiteralDeclaration getMONTHLYEnumLiteralDeclaration_34() { return cMONTHLYEnumLiteralDeclaration_34; }

		//"monthly"
		public Keyword getMONTHLYMonthlyKeyword_34_0() { return cMONTHLYMonthlyKeyword_34_0; }

		//NO="no"
		public EnumLiteralDeclaration getNOEnumLiteralDeclaration_35() { return cNOEnumLiteralDeclaration_35; }

		//"no"
		public Keyword getNONoKeyword_35_0() { return cNONoKeyword_35_0; }

		//NAME="name"
		public EnumLiteralDeclaration getNAMEEnumLiteralDeclaration_36() { return cNAMEEnumLiteralDeclaration_36; }

		//"name"
		public Keyword getNAMENameKeyword_36_0() { return cNAMENameKeyword_36_0; }

		//NOTE="note"
		public EnumLiteralDeclaration getNOTEEnumLiteralDeclaration_37() { return cNOTEEnumLiteralDeclaration_37; }

		//"note"
		public Keyword getNOTENoteKeyword_37_0() { return cNOTENoteKeyword_37_0; }

		//PATHCRITICALNESS="pathcriticalness"
		public EnumLiteralDeclaration getPATHCRITICALNESSEnumLiteralDeclaration_38() { return cPATHCRITICALNESSEnumLiteralDeclaration_38; }

		//"pathcriticalness"
		public Keyword getPATHCRITICALNESSPathcriticalnessKeyword_38_0() { return cPATHCRITICALNESSPathcriticalnessKeyword_38_0; }

		//PRECURSOR="precursor"
		public EnumLiteralDeclaration getPRECURSOREnumLiteralDeclaration_39() { return cPRECURSOREnumLiteralDeclaration_39; }

		//"precursor"
		public Keyword getPRECURSORPrecursorKeyword_39_0() { return cPRECURSORPrecursorKeyword_39_0; }

		//PRIORITY="priority"
		public EnumLiteralDeclaration getPRIORITYEnumLiteralDeclaration_40() { return cPRIORITYEnumLiteralDeclaration_40; }

		//"priority"
		public Keyword getPRIORITYPriorityKeyword_40_0() { return cPRIORITYPriorityKeyword_40_0; }

		//QUARTERLY="quarterly"
		public EnumLiteralDeclaration getQUARTERLYEnumLiteralDeclaration_41() { return cQUARTERLYEnumLiteralDeclaration_41; }

		//"quarterly"
		public Keyword getQUARTERLYQuarterlyKeyword_41_0() { return cQUARTERLYQuarterlyKeyword_41_0; }

		//RATE="rate"
		public EnumLiteralDeclaration getRATEEnumLiteralDeclaration_42() { return cRATEEnumLiteralDeclaration_42; }

		//"rate"
		public Keyword getRATERateKeyword_42_0() { return cRATERateKeyword_42_0; }

		//RESOURCES="resources"
		public EnumLiteralDeclaration getRESOURCESEnumLiteralDeclaration_43() { return cRESOURCESEnumLiteralDeclaration_43; }

		//"resources"
		public Keyword getRESOURCESResourcesKeyword_43_0() { return cRESOURCESResourcesKeyword_43_0; }

		//RESPONSIBLE="responsible"
		public EnumLiteralDeclaration getRESPONSIBLEEnumLiteralDeclaration_44() { return cRESPONSIBLEEnumLiteralDeclaration_44; }

		//"responsible"
		public Keyword getRESPONSIBLEResponsibleKeyword_44_0() { return cRESPONSIBLEResponsibleKeyword_44_0; }

		//REVENUE="revenue"
		public EnumLiteralDeclaration getREVENUEEnumLiteralDeclaration_45() { return cREVENUEEnumLiteralDeclaration_45; }

		//"revenue"
		public Keyword getREVENUERevenueKeyword_45_0() { return cREVENUERevenueKeyword_45_0; }

		//SCENARIO="scenario"
		public EnumLiteralDeclaration getSCENARIOEnumLiteralDeclaration_46() { return cSCENARIOEnumLiteralDeclaration_46; }

		//"scenario"
		public Keyword getSCENARIOScenarioKeyword_46_0() { return cSCENARIOScenarioKeyword_46_0; }

		//SEQNO="seqno"
		public EnumLiteralDeclaration getSEQNOEnumLiteralDeclaration_47() { return cSEQNOEnumLiteralDeclaration_47; }

		//"seqno"
		public Keyword getSEQNOSeqnoKeyword_47_0() { return cSEQNOSeqnoKeyword_47_0; }

		//START="start"
		public EnumLiteralDeclaration getSTARTEnumLiteralDeclaration_48() { return cSTARTEnumLiteralDeclaration_48; }

		//"start"
		public Keyword getSTARTStartKeyword_48_0() { return cSTARTStartKeyword_48_0; }

		//STATUS="status"
		public EnumLiteralDeclaration getSTATUSEnumLiteralDeclaration_49() { return cSTATUSEnumLiteralDeclaration_49; }

		//"status"
		public Keyword getSTATUSStatusKeyword_49_0() { return cSTATUSStatusKeyword_49_0; }

		//TARGETS="targets"
		public EnumLiteralDeclaration getTARGETSEnumLiteralDeclaration_50() { return cTARGETSEnumLiteralDeclaration_50; }

		//"targets"
		public Keyword getTARGETSTargetsKeyword_50_0() { return cTARGETSTargetsKeyword_50_0; }

		//WBS="wbs"
		public EnumLiteralDeclaration getWBSEnumLiteralDeclaration_51() { return cWBSEnumLiteralDeclaration_51; }

		//"wbs"
		public Keyword getWBSWbsKeyword_51_0() { return cWBSWbsKeyword_51_0; }

		//WEEKLY="weekly"
		public EnumLiteralDeclaration getWEEKLYEnumLiteralDeclaration_52() { return cWEEKLYEnumLiteralDeclaration_52; }

		//"weekly"
		public Keyword getWEEKLYWeeklyKeyword_52_0() { return cWEEKLYWeeklyKeyword_52_0; }

		//YEARLY="yearly"
		public EnumLiteralDeclaration getYEARLYEnumLiteralDeclaration_53() { return cYEARLYEnumLiteralDeclaration_53; }

		//"yearly"
		public Keyword getYEARLYYearlyKeyword_53_0() { return cYEARLYYearlyKeyword_53_0; }
	}

	public class AlertLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AlertLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cYELLOWYellowKeyword_1_0 = (Keyword)cYELLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREENGreenKeyword_2_0 = (Keyword)cGREENEnumLiteralDeclaration_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/alert.html
		//enum AlertLevel:
		//	RED="red" | YELLOW="yellow" | GREEN="green";
		public EnumRule getRule() { return rule; }

		//RED="red" | YELLOW="yellow" | GREEN="green"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }

		//"red"
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_1() { return cYELLOWEnumLiteralDeclaration_1; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_1_0() { return cYELLOWYellowKeyword_1_0; }

		//GREEN="green"
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_2() { return cGREENEnumLiteralDeclaration_2; }

		//"green"
		public Keyword getGREENGreenKeyword_2_0() { return cGREENGreenKeyword_2_0; }
	}

	public class DependsPolicyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DependsPolicy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONENDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONENDOnendKeyword_0_0 = (Keyword)cONENDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONSTARTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONSTARTOnstartKeyword_1_0 = (Keyword)cONSTARTEnumLiteralDeclaration_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/onend.html
		//// http://www.taskjuggler.org/tj3/manual/onstart.html
		//enum DependsPolicy:
		//	ONEND="onend" | ONSTART="onstart";
		public EnumRule getRule() { return rule; }

		//ONEND="onend" | ONSTART="onstart"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ONEND="onend"
		public EnumLiteralDeclaration getONENDEnumLiteralDeclaration_0() { return cONENDEnumLiteralDeclaration_0; }

		//"onend"
		public Keyword getONENDOnendKeyword_0_0() { return cONENDOnendKeyword_0_0; }

		//ONSTART="onstart"
		public EnumLiteralDeclaration getONSTARTEnumLiteralDeclaration_1() { return cONSTARTEnumLiteralDeclaration_1; }

		//"onstart"
		public Keyword getONSTARTOnstartKeyword_1_0() { return cONSTARTOnstartKeyword_1_0; }
	}

	public class SchedulingPolicyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SchedulingPolicy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALAPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALAPAlapKeyword_0_0 = (Keyword)cALAPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASAPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASAPAsapKeyword_1_0 = (Keyword)cASAPEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SchedulingPolicy:
		//	ALAP="alap" | ASAP="asap";
		public EnumRule getRule() { return rule; }

		//ALAP="alap" | ASAP="asap"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALAP="alap"
		public EnumLiteralDeclaration getALAPEnumLiteralDeclaration_0() { return cALAPEnumLiteralDeclaration_0; }

		//"alap"
		public Keyword getALAPAlapKeyword_0_0() { return cALAPAlapKeyword_0_0; }

		//ASAP="asap"
		public EnumLiteralDeclaration getASAPEnumLiteralDeclaration_1() { return cASAPEnumLiteralDeclaration_1; }

		//"asap"
		public Keyword getASAPAsapKeyword_1_0() { return cASAPAsapKeyword_1_0; }
	}

	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUTEMinKeyword_0_0 = (Keyword)cMINUTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHOURHKeyword_1_0 = (Keyword)cHOUREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDAYDKeyword_2_0 = (Keyword)cDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEEKWKeyword_3_0 = (Keyword)cWEEKEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMONTHMKeyword_4_0 = (Keyword)cMONTHEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARYKeyword_5_0 = (Keyword)cYEAREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TimeUnit:
		//	MINUTE="min" | HOUR="h" | DAY="d" | WEEK="w" | MONTH="m" | YEAR="y";
		public EnumRule getRule() { return rule; }

		//MINUTE="min" | HOUR="h" | DAY="d" | WEEK="w" | MONTH="m" | YEAR="y"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MINUTE="min"
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_0() { return cMINUTEEnumLiteralDeclaration_0; }

		//"min"
		public Keyword getMINUTEMinKeyword_0_0() { return cMINUTEMinKeyword_0_0; }

		//HOUR="h"
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_1() { return cHOUREnumLiteralDeclaration_1; }

		//"h"
		public Keyword getHOURHKeyword_1_0() { return cHOURHKeyword_1_0; }

		//DAY="d"
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_2() { return cDAYEnumLiteralDeclaration_2; }

		//"d"
		public Keyword getDAYDKeyword_2_0() { return cDAYDKeyword_2_0; }

		//WEEK="w"
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_3() { return cWEEKEnumLiteralDeclaration_3; }

		//"w"
		public Keyword getWEEKWKeyword_3_0() { return cWEEKWKeyword_3_0; }

		//MONTH="m"
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_4() { return cMONTHEnumLiteralDeclaration_4; }

		//"m"
		public Keyword getMONTHMKeyword_4_0() { return cMONTHMKeyword_4_0; }

		//YEAR="y"
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_5() { return cYEAREnumLiteralDeclaration_5; }

		//"y"
		public Keyword getYEARYKeyword_5_0() { return cYEARYKeyword_5_0; }
	}

	public class WeekdayElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Weekday");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMONMonKeyword_0_0 = (Keyword)cMONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTUETueKeyword_1_0 = (Keyword)cTUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEDWedKeyword_2_0 = (Keyword)cWEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTHREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTHRThuKeyword_3_0 = (Keyword)cTHREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFRIEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFRIFriKeyword_4_0 = (Keyword)cFRIEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSATEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSATSatKeyword_5_0 = (Keyword)cSATEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSUNEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSUNSunKeyword_6_0 = (Keyword)cSUNEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Weekday:
		//	MON="mon" | TUE="tue" | WED="wed" | THR="thu" | FRI="fri" | SAT="sat" | SUN="sun";
		public EnumRule getRule() { return rule; }

		//MON="mon" | TUE="tue" | WED="wed" | THR="thu" | FRI="fri" | SAT="sat" | SUN="sun"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MON="mon"
		public EnumLiteralDeclaration getMONEnumLiteralDeclaration_0() { return cMONEnumLiteralDeclaration_0; }

		//"mon"
		public Keyword getMONMonKeyword_0_0() { return cMONMonKeyword_0_0; }

		//TUE="tue"
		public EnumLiteralDeclaration getTUEEnumLiteralDeclaration_1() { return cTUEEnumLiteralDeclaration_1; }

		//"tue"
		public Keyword getTUETueKeyword_1_0() { return cTUETueKeyword_1_0; }

		//WED="wed"
		public EnumLiteralDeclaration getWEDEnumLiteralDeclaration_2() { return cWEDEnumLiteralDeclaration_2; }

		//"wed"
		public Keyword getWEDWedKeyword_2_0() { return cWEDWedKeyword_2_0; }

		//THR="thu"
		public EnumLiteralDeclaration getTHREnumLiteralDeclaration_3() { return cTHREnumLiteralDeclaration_3; }

		//"thu"
		public Keyword getTHRThuKeyword_3_0() { return cTHRThuKeyword_3_0; }

		//FRI="fri"
		public EnumLiteralDeclaration getFRIEnumLiteralDeclaration_4() { return cFRIEnumLiteralDeclaration_4; }

		//"fri"
		public Keyword getFRIFriKeyword_4_0() { return cFRIFriKeyword_4_0; }

		//SAT="sat"
		public EnumLiteralDeclaration getSATEnumLiteralDeclaration_5() { return cSATEnumLiteralDeclaration_5; }

		//"sat"
		public Keyword getSATSatKeyword_5_0() { return cSATSatKeyword_5_0; }

		//SUN="sun"
		public EnumLiteralDeclaration getSUNEnumLiteralDeclaration_6() { return cSUNEnumLiteralDeclaration_6; }

		//"sun"
		public Keyword getSUNSunKeyword_6_0() { return cSUNSunKeyword_6_0; }
	}

	public class WorkQuantityUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "WorkQuantityUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPERCENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPERCENTPercentSignKeyword_0_0 = (Keyword)cPERCENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTESMinKeyword_1_0 = (Keyword)cMINUTESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURSHKeyword_2_0 = (Keyword)cHOURSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYSDKeyword_3_0 = (Keyword)cDAYSEnumLiteralDeclaration_3.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/work.html
		//enum WorkQuantityUnit:
		//	PERCENT="%" | MINUTES="min" | HOURS="h" | DAYS="d";
		public EnumRule getRule() { return rule; }

		//PERCENT="%" | MINUTES="min" | HOURS="h" | DAYS="d"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PERCENT="%"
		public EnumLiteralDeclaration getPERCENTEnumLiteralDeclaration_0() { return cPERCENTEnumLiteralDeclaration_0; }

		//"%"
		public Keyword getPERCENTPercentSignKeyword_0_0() { return cPERCENTPercentSignKeyword_0_0; }

		//MINUTES="min"
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_1() { return cMINUTESEnumLiteralDeclaration_1; }

		//"min"
		public Keyword getMINUTESMinKeyword_1_0() { return cMINUTESMinKeyword_1_0; }

		//HOURS="h"
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_2() { return cHOURSEnumLiteralDeclaration_2; }

		//"h"
		public Keyword getHOURSHKeyword_2_0() { return cHOURSHKeyword_2_0; }

		//DAYS="d"
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_3() { return cDAYSEnumLiteralDeclaration_3; }

		//"d"
		public Keyword getDAYSDKeyword_3_0() { return cDAYSDKeyword_3_0; }
	}
	
	private GlobalElements pGlobal;
	private GlobalAttributeElements pGlobalAttribute;
	private AccountElements pAccount;
	private AccountAttributeElements pAccountAttribute;
	private SupplementAccountElements pSupplementAccount;
	private ProjectElements pProject;
	private ProjectAttributeElements pProjectAttribute;
	private TaskElements pTask;
	private SupplementTaskElements pSupplementTask;
	private TaskAttributeElements pTaskAttribute;
	private ReportElements pReport;
	private SupplementReportElements pSupplementReport;
	private ReportAttributeElements pReportAttribute;
	private IcalReportElements pIcalReport;
	private ExportElements pExport;
	private ResourceElements pResource;
	private SupplementResourceElements pSupplementResource;
	private ResourceAttributeElements pResourceAttribute;
	private AllocateElements pAllocate;
	private AllocateResourceElements pAllocateResource;
	private AllocateResourceAttributeElements pAllocateResourceAttribute;
	private NavigatorElements pNavigator;
	private NavigatorAttributeElements pNavigatorAttribute;
	private NewTaskElements pNewTask;
	private NewTaskAttributeElements pNewTaskAttribute;
	private NikuReportElements pNikuReport;
	private NikuReportAttributeElements pNikuReportAttribute;
	private AlertElements pAlert;
	private AlternativeElements pAlternative;
	private AuthorElements pAuthor;
	private BalanceElements pBalance;
	private BookingElements pBooking;
	private BookingTaskElements pBookingTask;
	private BookingResourceElements pBookingResource;
	private CaptionElements pCaption;
	private CellColorElements pCellColor;
	private CellTextElements pCellText;
	private CenterElements pCenter;
	private ChargeElements pCharge;
	private ChargeSetElements pChargeSet;
	private ColumnsElements pColumns;
	private CompleteElements pComplete;
	private CopyrightElements pCopyright;
	private CreditElements pCredit;
	private CurrencyElements pCurrency;
	private CurrencyFormatElements pCurrencyFormat;
	private DateExtendElements pDateExtend;
	private DailyMaxElements pDailyMax;
	private DailyMinElements pDailyMin;
	private DailyWorkingHoursElements pDailyWorkingHours;
	private DefinitionsElements pDefinitions;
	private DependsElements pDepends;
	private DetailsElements pDetails;
	private DurationElements pDuration;
	private EfficiencyElements pEfficiency;
	private EffortElements pEffort;
	private EmailElements pEmail;
	private EndElements pEnd;
	private EndCreditElements pEndCredit;
	private EpilogElements pEpilog;
	private ExtendElements pExtend;
	private FailElements pFail;
	private FlagsElements pFlags;
	private FontColorElements pFontColor;
	private FooterElements pFooter;
	private FormatsElements pFormats;
	private FunctionsElements pFunctions;
	private GapDurationElements pGapDuration;
	private GapLengthElements pGapLength;
	private HAlignElements pHAlign;
	private HasAlertElements pHasAlert;
	private HeaderElements pHeader;
	private HeadlineElements pHeadline;
	private HideJournalEntryElements pHideJournalEntry;
	private HideReportElements pHideReport;
	private HideResourceElements pHideResource;
	private HideTaskElements pHideTask;
	private IncludeElements pInclude;
	private Interval1Elements pInterval1;
	private Interval2Elements pInterval2;
	private Interval3Elements pInterval3;
	private Interval4Elements pInterval4;
	private JournalAttributesElements pJournalAttributes;
	private JournalEntryElements pJournalEntry;
	private JournalModeElements pJournalMode;
	private LeftElements pLeft;
	private LengthElements pLength;
	private LimitsElements pLimits;
	private LimitsAttributeElements pLimitsAttribute;
	private ListItemElements pListItem;
	private ListTypeElements pListType;
	private LoadUnitElements pLoadUnit;
	private LogicalExpressionElements pLogicalExpression;
	private LogicalFlagExpressionElements pLogicalFlagExpression;
	private MacroElements pMacro;
	private ManagersElements pManagers;
	private MandatoryElements pMandatory;
	private MaxEndElements pMaxEnd;
	private MaximumElements pMaximum;
	private MaxStartElements pMaxStart;
	private MilestoneElements pMilestone;
	private MinimumElements pMinimum;
	private MinEndElements pMinEnd;
	private MinStartElements pMinStart;
	private MonthlyMaxElements pMonthlyMax;
	private MonthlyMinElements pMonthlyMin;
	private NoteElements pNote;
	private NowElements pNow;
	private NumberFormatElements pNumberFormat;
	private PeriodElements pPeriod;
	private PersistentElements pPersistent;
	private PrecedesElements pPrecedes;
	private PriorityElements pPriority;
	private ProjectIdElements pProjectId;
	private ProjectIdsElements pProjectIds;
	private PrologElements pProlog;
	private PurgeElements pPurge;
	private RateElements pRate;
	private ReferenceExtendElements pReferenceExtend;
	private RemainingElements pRemaining;
	private ReportPrefixElements pReportPrefix;
	private ResourceAttributesElements pResourceAttributes;
	private ResourcePrefixElements pResourcePrefix;
	private ResourceReportElements pResourceReport;
	private ResourceRootElements pResourceRoot;
	private ResponsibleElements pResponsible;
	private RichTextExtendElements pRichTextExtend;
	private RightElements pRight;
	private RollupResourceElements pRollupResource;
	private RollupTaskElements pRollupTask;
	private ScaleElements pScale;
	private ScenarioElements pScenario;
	private ScenarioIcalElements pScenarioIcal;
	private ScenariosElements pScenarios;
	private ScheduledElements pScheduled;
	private SchedulingElements pScheduling;
	private SelectElements pSelect;
	private SelfContainedElements pSelfContained;
	private ShiftElements pShift;
	private ShiftTimesheetElements pShiftTimesheet;
	private ShiftsElements pShifts;
	private ShortTimeFormatElements pShortTimeFormat;
	private SortJournalEntriesElements pSortJournalEntries;
	private SortResourcesElements pSortResources;
	private SortTasksElements pSortTasks;
	private StartElements pStart;
	private StartCreditElements pStartCredit;
	private StatusStatusSheetElements pStatusStatusSheet;
	private StatusStatusSheetAttributeElements pStatusStatusSheetAttribute;
	private StatusSheetElements pStatusSheet;
	private StatusSheetReportElements pStatusSheetReport;
	private SummaryElements pSummary;
	private TagFileElements pTagFile;
	private TaskStatusSheetElements pTaskStatusSheet;
	private TaskStatusSheetAttributeElements pTaskStatusSheetAttribute;
	private TaskTimesheetElements pTaskTimesheet;
	private TaskAttributesElements pTaskAttributes;
	private TaskPrefixElements pTaskPrefix;
	private TaskReportElements pTaskReport;
	private TaskRootElements pTaskRoot;
	private TextExtendElements pTextExtend;
	private TextReportElements pTextReport;
	private TimeFormatElements pTimeFormat;
	private TimeoffElements pTimeoff;
	private TimesheetElements pTimesheet;
	private TimesheetReportElements pTimesheetReport;
	private TimezoneElements pTimezone;
	private TimingResolutionElements pTimingResolution;
	private TitleElements pTitle;
	private ToolTipElements pToolTip;
	private TrackingScenarioElements pTrackingScenario;
	private TreeLevelElements pTreeLevel;
	private VacationElements pVacation;
	private VacationResourceElements pVacationResource;
	private VacationShiftElements pVacationShift;
	private WarnElements pWarn;
	private WeekStartsElements pWeekStarts;
	private WeeklyMaxElements pWeeklyMax;
	private WeeklyMinElements pWeeklyMin;
	private WidthElements pWidth;
	private WorkElements pWork;
	private WorkingHoursElements pWorkingHours;
	private YearlyWorkingDaysElements pYearlyWorkingDays;
	private AccountShareElements pAccountShare;
	private ColumnAttributeElements pColumnAttribute;
	private ColumnElements pColumn;
	private CriterionElements pCriterion;
	private CriterionIdElements pCriterionId;
	private DurationQuantityElements pDurationQuantity;
	private ExtendAttributeElements pExtendAttribute;
	private LimitElements pLimit;
	private LimitAttributeElements pLimitAttribute;
	private RealFormatElements pRealFormat;
	private ShiftLimitElements pShiftLimit;
	private SortElements pSort;
	private TaskDependencyElements pTaskDependency;
	private TaskPathElements pTaskPath;
	private TaskTimesheetAttributeElements pTaskTimesheetAttribute;
	private TimesheetAttributeElements pTimesheetAttribute;
	private TimesheetReportAttributeElements pTimesheetReportAttribute;
	private RichTextElements pRichText;
	private WorkHoursElements pWorkHours;
	private WeekdaysElements pWeekdays;
	private ChargeAppliesElements unknownRuleChargeApplies;
	private JustificationElements unknownRuleJustification;
	private JournalModeValueElements unknownRuleJournalModeValue;
	private JournalEntrySortCriterionElements unknownRuleJournalEntrySortCriterion;
	private ListTypeValuesElements unknownRuleListTypeValues;
	private CriterionDirectionElements unknownRuleCriterionDirection;
	private YesNoElements unknownRuleYesNo;
	private ReportFormatElements unknownRuleReportFormat;
	private LoadDisplayUnitElements unknownRuleLoadDisplayUnit;
	private ScaleResolutionElements unknownRuleScaleResolution;
	private SelectArgumentElements unknownRuleSelectArgument;
	private ColumnIdElements unknownRuleColumnId;
	private AlertLevelElements unknownRuleAlertLevel;
	private DependsPolicyElements unknownRuleDependsPolicy;
	private SchedulingPolicyElements unknownRuleSchedulingPolicy;
	private TimeUnitElements unknownRuleTimeUnit;
	private WeekdayElements unknownRuleWeekday;
	private WorkQuantityUnitElements unknownRuleWorkQuantityUnit;
	private TerminalRule tID;
	private XFloatElements pXFloat;
	private TerminalRule tFLOAT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSTRING;
	private TerminalRule tTIME;
	private TerminalRule tISODATE;
	private TerminalRule tRGB;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProjectGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////
	//// The pattern used here for specifying attributes
	//// XXXX:
	////  'xxxx' ..... ( '{' attributes+=XxxxAttribute* '}' )?;
	////
	//// XxxxAttribute:
	////    Yyyy | Zzzz | ....
	////
	//// See Account below for real life example.  This pattern is
	//// in use because TaskJuggler permits attributes in any
	//// order and permits repeats
	////
	//Global:
	//	project=Project attributes+=GlobalAttribute*;
	public GlobalElements getGlobalAccess() {
		return (pGlobal != null) ? pGlobal : (pGlobal = new GlobalElements());
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}

	//GlobalAttribute:
	//	Account //	| Export
	//	//	| Macro
	//	//	| Navigator
	//	//	| NikuReport
	//	//	| StatusSheet
	//	//	| StatusSheetReport
	//	//	| Timesheet
	//	//	| TimesheetReport
	//	| Balance | Copyright | Flags | Limits | Rate | ResourceReport | TaskReport | TextReport | Resource | Shift |
	//	SupplementAccount | SupplementReport | SupplementResource | SupplementTask | TagFile | Task | TrackingScenario |
	//	Vacation;
	public GlobalAttributeElements getGlobalAttributeAccess() {
		return (pGlobalAttribute != null) ? pGlobalAttribute : (pGlobalAttribute = new GlobalAttributeElements());
	}
	
	public ParserRule getGlobalAttributeRule() {
		return getGlobalAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/account.html
	//Account:
	//	"account" id=ID? name=STRING ("{" attributes+=AccountAttribute* "}")?;
	public AccountElements getAccountAccess() {
		return (pAccount != null) ? pAccount : (pAccount = new AccountElements());
	}
	
	public ParserRule getAccountRule() {
		return getAccountAccess().getRule();
	}

	//AccountAttribute:
	//	Account | Credit | Flags;
	public AccountAttributeElements getAccountAttributeAccess() {
		return (pAccountAttribute != null) ? pAccountAttribute : (pAccountAttribute = new AccountAttributeElements());
	}
	
	public ParserRule getAccountAttributeRule() {
		return getAccountAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/supplement.html
	//SupplementAccount:
	//	"supplement" "account" account=[Account] ("{" attributes+=AccountAttribute* "}")?;
	public SupplementAccountElements getSupplementAccountAccess() {
		return (pSupplementAccount != null) ? pSupplementAccount : (pSupplementAccount = new SupplementAccountElements());
	}
	
	public ParserRule getSupplementAccountRule() {
		return getSupplementAccountAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/project.html
	//Project:
	//	"project" id=ID? name=STRING version=STRING? interval=Interval2 ("{" attributes+=ProjectAttribute* "}")?;
	public ProjectElements getProjectAccess() {
		return (pProject != null) ? pProject : (pProject = new ProjectElements());
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}

	//ProjectAttribute:
	//	Currency //		| ExtendTask
	//	//		| ExtendResource
	//	| CurrencyFormat | DailyWorkingHours | Include | JournalEntry | Now | NumberFormat | Scenario | ShortTimeFormat |
	//	Timezone | TimingResolution | WeekStarts | WorkingHours | YearlyWorkingDays;
	public ProjectAttributeElements getProjectAttributeAccess() {
		return (pProjectAttribute != null) ? pProjectAttribute : (pProjectAttribute = new ProjectAttributeElements());
	}
	
	public ParserRule getProjectAttributeRule() {
		return getProjectAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/task.html
	//Task:
	//	"task" id=ID? name=STRING ("{" attributes+=TaskAttribute* "}")?;
	public TaskElements getTaskAccess() {
		return (pTask != null) ? pTask : (pTask = new TaskElements());
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
	//SupplementTask:
	//	"supplement" "task" task=[Task] ("{" attributes+=TaskAttribute* "}")?;
	public SupplementTaskElements getSupplementTaskAccess() {
		return (pSupplementTask != null) ? pSupplementTask : (pSupplementTask = new SupplementTaskElements());
	}
	
	public ParserRule getSupplementTaskRule() {
		return getSupplementTaskAccess().getRule();
	}

	//TaskAttribute:
	//	Allocate //		| Warn
	//	| BookingTask | Charge | ChargeSet | Complete | Depends | Duration | Effort | End | EndCredit | Flags | JournalEntry |
	//	Length | Limits | MaxEnd | MaxStart | Milestone | MinEnd | MinStart | Note | Period | Precedes | Priority | ProjectId
	//	| Purge | Responsible | Scheduled | Scheduling | Shifts | Start | StartCredit | SupplementTask | Task;
	public TaskAttributeElements getTaskAttributeAccess() {
		return (pTaskAttribute != null) ? pTaskAttribute : (pTaskAttribute = new TaskAttributeElements());
	}
	
	public ParserRule getTaskAttributeRule() {
		return getTaskAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/report.html
	//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
	//// http://www.taskjuggler.org/tj3/manual/taskreport.html
	//// http://www.taskjuggler.org/tj3/manual/textreport.html
	//Report:
	//	id=ID? name=STRING ("{" attributes+=ReportAttribute* "}")?;
	public ReportElements getReportAccess() {
		return (pReport != null) ? pReport : (pReport = new ReportElements());
	}
	
	public ParserRule getReportRule() {
		return getReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/supplement.html
	//SupplementReport:
	//	"supplement" "report" report=[Report] ("{" attributes+=ReportAttribute* "}")?;
	public SupplementReportElements getSupplementReportAccess() {
		return (pSupplementReport != null) ? pSupplementReport : (pSupplementReport = new SupplementReportElements());
	}
	
	public ParserRule getSupplementReportRule() {
		return getSupplementReportAccess().getRule();
	}

	//ReportAttribute:
	//	Balance //	| HideResource
	//	//	| HideTask
	//	//	| RollupTask
	//	| Caption | Center | Columns | End | Epilog | Flags | Footer | Formats | Header | Headline | Left | LoadUnit | Period |
	//	Prolog | ResourceReport | TaskReport | TextReport | Right | Scenarios | SelfContained | SortResources | SortTasks |
	//	Start | TaskRoot | TimeFormat | Title;
	public ReportAttributeElements getReportAttributeAccess() {
		return (pReportAttribute != null) ? pReportAttribute : (pReportAttribute = new ReportAttributeElements());
	}
	
	public ParserRule getReportAttributeRule() {
		return getReportAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/icalreport.html
	//// TODO: ical report
	//IcalReport:
	//	STRING;
	public IcalReportElements getIcalReportAccess() {
		return (pIcalReport != null) ? pIcalReport : (pIcalReport = new IcalReportElements());
	}
	
	public ParserRule getIcalReportRule() {
		return getIcalReportAccess().getRule();
	}

	//// TODO: export report
	//// http://www.taskjuggler.org/tj3/manual/export.html
	//Export:
	//	"export" STRING;
	public ExportElements getExportAccess() {
		return (pExport != null) ? pExport : (pExport = new ExportElements());
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/resource.html
	//Resource:
	//	"resource" id=ID? name=STRING ("{" attributes+=ResourceAttribute* "}")?;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//SupplementResource:
	//	"supplement" "resource" resource=[Resource] ("{" attributes+=ResourceAttribute* "}")?;
	public SupplementResourceElements getSupplementResourceAccess() {
		return (pSupplementResource != null) ? pSupplementResource : (pSupplementResource = new SupplementResourceElements());
	}
	
	public ParserRule getSupplementResourceRule() {
		return getSupplementResourceAccess().getRule();
	}

	//ResourceAttribute:
	//	VacationResource | BookingResource | WorkingHours | Efficiency | Flags | Limits | Purge | Rate | Resource | Shifts |
	//	SupplementResource;
	public ResourceAttributeElements getResourceAttributeAccess() {
		return (pResourceAttribute != null) ? pResourceAttribute : (pResourceAttribute = new ResourceAttributeElements());
	}
	
	public ParserRule getResourceAttributeRule() {
		return getResourceAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/allocate.html
	//Allocate:
	//	"allocate" resources+=AllocateResource ("," resources+=AllocateResource)*;
	public AllocateElements getAllocateAccess() {
		return (pAllocate != null) ? pAllocate : (pAllocate = new AllocateElements());
	}
	
	public ParserRule getAllocateRule() {
		return getAllocateAccess().getRule();
	}

	//AllocateResource:
	//	resource=[Resource] ("{" attributes+=AllocateResourceAttribute* "}")?;
	public AllocateResourceElements getAllocateResourceAccess() {
		return (pAllocateResource != null) ? pAllocateResource : (pAllocateResource = new AllocateResourceElements());
	}
	
	public ParserRule getAllocateResourceRule() {
		return getAllocateResourceAccess().getRule();
	}

	//AllocateResourceAttribute:
	//	Alternative | Limits | Mandatory | Persistent | Select | Shifts;
	public AllocateResourceAttributeElements getAllocateResourceAttributeAccess() {
		return (pAllocateResourceAttribute != null) ? pAllocateResourceAttribute : (pAllocateResourceAttribute = new AllocateResourceAttributeElements());
	}
	
	public ParserRule getAllocateResourceAttributeRule() {
		return getAllocateResourceAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/navigator.html
	//Navigator:
	//	"navigator" id=ID ("{" attributes+=NavigatorAttribute* "}")?;
	public NavigatorElements getNavigatorAccess() {
		return (pNavigator != null) ? pNavigator : (pNavigator = new NavigatorElements());
	}
	
	public ParserRule getNavigatorRule() {
		return getNavigatorAccess().getRule();
	}

	//NavigatorAttribute:
	//	HideReport;
	public NavigatorAttributeElements getNavigatorAttributeAccess() {
		return (pNavigatorAttribute != null) ? pNavigatorAttribute : (pNavigatorAttribute = new NavigatorAttributeElements());
	}
	
	public ParserRule getNavigatorAttributeRule() {
		return getNavigatorAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/newtask.html
	//NewTask:
	//	"newtask" id=ID text=STRING ("{" attributes+=NewTaskAttribute* "}")?;
	public NewTaskElements getNewTaskAccess() {
		return (pNewTask != null) ? pNewTask : (pNewTask = new NewTaskElements());
	}
	
	public ParserRule getNewTaskRule() {
		return getNewTaskAccess().getRule();
	}

	//NewTaskAttribute:
	//	End //	| StatusTimesheet
	//	| Priority | Remaining | Work;
	public NewTaskAttributeElements getNewTaskAttributeAccess() {
		return (pNewTaskAttribute != null) ? pNewTaskAttribute : (pNewTaskAttribute = new NewTaskAttributeElements());
	}
	
	public ParserRule getNewTaskAttributeRule() {
		return getNewTaskAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/nikureport.html
	//NikuReport:
	//	filename=STRING ("{" attributes+=NikuReportAttribute* "}")?;
	public NikuReportElements getNikuReportAccess() {
		return (pNikuReport != null) ? pNikuReport : (pNikuReport = new NikuReportElements());
	}
	
	public ParserRule getNikuReportRule() {
		return getNikuReportAccess().getRule();
	}

	//NikuReportAttribute:
	//	End | Formats | Headline | HideResource | HideTask | NumberFormat | Period | Start | Timeoff | Title;
	public NikuReportAttributeElements getNikuReportAttributeAccess() {
		return (pNikuReportAttribute != null) ? pNikuReportAttribute : (pNikuReportAttribute = new NikuReportAttributeElements());
	}
	
	public ParserRule getNikuReportAttributeRule() {
		return getNikuReportAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/alert.html
	//Alert:
	//	"alert" level=AlertLevel;
	public AlertElements getAlertAccess() {
		return (pAlert != null) ? pAlert : (pAlert = new AlertElements());
	}
	
	public ParserRule getAlertRule() {
		return getAlertAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/alternative.html
	//Alternative:
	//	resources+=[Resource] ("," resources+=[Resource])*;
	public AlternativeElements getAlternativeAccess() {
		return (pAlternative != null) ? pAlternative : (pAlternative = new AlternativeElements());
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/author.html
	//Author:
	//	"author" resource=[Resource];
	public AuthorElements getAuthorAccess() {
		return (pAuthor != null) ? pAuthor : (pAuthor = new AuthorElements());
	}
	
	public ParserRule getAuthorRule() {
		return getAuthorAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/balance.html
	//Balance:
	//	"balance" cost=[Account] revenue=[Account];
	public BalanceElements getBalanceAccess() {
		return (pBalance != null) ? pBalance : (pBalance = new BalanceElements());
	}
	
	public ParserRule getBalanceRule() {
		return getBalanceAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/booking.html	
	//// http://www.taskjuggler.org/tj3/manual/booking.task.html
	//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
	//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
	////	WORKING_TIME_ONLY = '0' |
	////	PLUS_OFF_DUTY = '1' |
	////	PLUS_VACATION = '2'
	//Booking:
	//	"booking" (BookingTask | BookingResource) interval=Interval4 ("{" (("overtime" overtime=INT)? & ("sloppy"
	//	sloppy=INT)?) "}")?;
	public BookingElements getBookingAccess() {
		return (pBooking != null) ? pBooking : (pBooking = new BookingElements());
	}
	
	public ParserRule getBookingRule() {
		return getBookingAccess().getRule();
	}

	//BookingTask:
	//	resource=[Resource];
	public BookingTaskElements getBookingTaskAccess() {
		return (pBookingTask != null) ? pBookingTask : (pBookingTask = new BookingTaskElements());
	}
	
	public ParserRule getBookingTaskRule() {
		return getBookingTaskAccess().getRule();
	}

	//BookingResource:
	//	task=[Task];
	public BookingResourceElements getBookingResourceAccess() {
		return (pBookingResource != null) ? pBookingResource : (pBookingResource = new BookingResourceElements());
	}
	
	public ParserRule getBookingResourceRule() {
		return getBookingResourceAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/caption.html
	//Caption:
	//	"caption" RichText;
	public CaptionElements getCaptionAccess() {
		return (pCaption != null) ? pCaption : (pCaption = new CaptionElements());
	}
	
	public ParserRule getCaptionRule() {
		return getCaptionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/cellcolor.column.html
	//CellColor:
	//	"cellcolor" expression=LogicalExpression color=STRING;
	public CellColorElements getCellColorAccess() {
		return (pCellColor != null) ? pCellColor : (pCellColor = new CellColorElements());
	}
	
	public ParserRule getCellColorRule() {
		return getCellColorAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/celltext.column.html
	//CellText:
	//	"celltext" text=STRING expresssion=LogicalExpression;
	public CellTextElements getCellTextAccess() {
		return (pCellText != null) ? pCellText : (pCellText = new CellTextElements());
	}
	
	public ParserRule getCellTextRule() {
		return getCellTextAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/center.html
	//Center:
	//	"center" RichText;
	public CenterElements getCenterAccess() {
		return (pCenter != null) ? pCenter : (pCenter = new CenterElements());
	}
	
	public ParserRule getCenterRule() {
		return getCenterAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/charge.html
	//Charge:
	//	"charge" amount=XFloat applies=ChargeApplies;
	public ChargeElements getChargeAccess() {
		return (pCharge != null) ? pCharge : (pCharge = new ChargeElements());
	}
	
	public ParserRule getChargeRule() {
		return getChargeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/chargeset.html
	//ChargeSet:
	//	"chargeset" accountShares+=AccountShare ("," accountShares+=AccountShare)*;
	public ChargeSetElements getChargeSetAccess() {
		return (pChargeSet != null) ? pChargeSet : (pChargeSet = new ChargeSetElements());
	}
	
	public ParserRule getChargeSetRule() {
		return getChargeSetAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/columns.html
	//Columns:
	//	"columns" columns+=Column ("," columns+=Column)*;
	public ColumnsElements getColumnsAccess() {
		return (pColumns != null) ? pColumns : (pColumns = new ColumnsElements());
	}
	
	public ParserRule getColumnsRule() {
		return getColumnsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/complete.html
	//Complete:
	//	"complete" complete=XFloat;
	public CompleteElements getCompleteAccess() {
		return (pComplete != null) ? pComplete : (pComplete = new CompleteElements());
	}
	
	public ParserRule getCompleteRule() {
		return getCompleteAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/copyright.html
	//Copyright:
	//	"copyright" text=STRING;
	public CopyrightElements getCopyrightAccess() {
		return (pCopyright != null) ? pCopyright : (pCopyright = new CopyrightElements());
	}
	
	public ParserRule getCopyrightRule() {
		return getCopyrightAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/credit.html	
	//Credit:
	//	"credit" date=ISODATE description=STRING amount=XFloat;
	public CreditElements getCreditAccess() {
		return (pCredit != null) ? pCredit : (pCredit = new CreditElements());
	}
	
	public ParserRule getCreditRule() {
		return getCreditAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/currency.html
	//Currency:
	//	"currency" currency=STRING;
	public CurrencyElements getCurrencyAccess() {
		return (pCurrency != null) ? pCurrency : (pCurrency = new CurrencyElements());
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
	//CurrencyFormat:
	//	"currencyformat" RealFormat;
	public CurrencyFormatElements getCurrencyFormatAccess() {
		return (pCurrencyFormat != null) ? pCurrencyFormat : (pCurrencyFormat = new CurrencyFormatElements());
	}
	
	public ParserRule getCurrencyFormatRule() {
		return getCurrencyFormatAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/date.extend.html
	//DateExtend:
	//	"date" ExtendAttribute;
	public DateExtendElements getDateExtendAccess() {
		return (pDateExtend != null) ? pDateExtend : (pDateExtend = new DateExtendElements());
	}
	
	public ParserRule getDateExtendRule() {
		return getDateExtendAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/dailymax.html
	//DailyMax:
	//	"dailymax" Limit;
	public DailyMaxElements getDailyMaxAccess() {
		return (pDailyMax != null) ? pDailyMax : (pDailyMax = new DailyMaxElements());
	}
	
	public ParserRule getDailyMaxRule() {
		return getDailyMaxAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/dailymin.html
	//DailyMin:
	//	"dailymin" Limit;
	public DailyMinElements getDailyMinAccess() {
		return (pDailyMin != null) ? pDailyMin : (pDailyMin = new DailyMinElements());
	}
	
	public ParserRule getDailyMinRule() {
		return getDailyMinAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/dailyworkinghours.html
	//DailyWorkingHours:
	//	"dailyworkinghours" dailyWorkingHours=XFloat;
	public DailyWorkingHoursElements getDailyWorkingHoursAccess() {
		return (pDailyWorkingHours != null) ? pDailyWorkingHours : (pDailyWorkingHours = new DailyWorkingHoursElements());
	}
	
	public ParserRule getDailyWorkingHoursRule() {
		return getDailyWorkingHoursAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/date.html
	//// http://www.taskjuggler.org/tj3/manual/date.extend.html
	//// Date: see ISODATE below
	//// http://www.taskjuggler.org/tj3/manual/definitions.html
	//Definitions:
	//	all?="*" | none?="-" | flags?="flags" & resources?="resources" & tasks?="tasks" & project?="project" &
	//	projectids?="projectids";
	public DefinitionsElements getDefinitionsAccess() {
		return (pDefinitions != null) ? pDefinitions : (pDefinitions = new DefinitionsElements());
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/depends.html
	//Depends:
	//	"depends" TaskDependency;
	public DependsElements getDependsAccess() {
		return (pDepends != null) ? pDepends : (pDepends = new DependsElements());
	}
	
	public ParserRule getDependsRule() {
		return getDependsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/details.html
	//Details:
	//	"details" RichText;
	public DetailsElements getDetailsAccess() {
		return (pDetails != null) ? pDetails : (pDetails = new DetailsElements());
	}
	
	public ParserRule getDetailsRule() {
		return getDetailsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/duration.html
	//Duration:
	//	"duration" duration=DurationQuantity;
	public DurationElements getDurationAccess() {
		return (pDuration != null) ? pDuration : (pDuration = new DurationElements());
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/efficiency.html
	//Efficiency:
	//	"efficiency" efficiency=XFloat;
	public EfficiencyElements getEfficiencyAccess() {
		return (pEfficiency != null) ? pEfficiency : (pEfficiency = new EfficiencyElements());
	}
	
	public ParserRule getEfficiencyRule() {
		return getEfficiencyAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/effort.html
	//Effort:
	//	"effort" effort=DurationQuantity;
	public EffortElements getEffortAccess() {
		return (pEffort != null) ? pEffort : (pEffort = new EffortElements());
	}
	
	public ParserRule getEffortRule() {
		return getEffortAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/email.html
	//Email:
	//	"email" address=STRING;
	public EmailElements getEmailAccess() {
		return (pEmail != null) ? pEmail : (pEmail = new EmailElements());
	}
	
	public ParserRule getEmailRule() {
		return getEmailAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/end.html
	//End:
	//	"end" end=ISODATE;
	public EndElements getEndAccess() {
		return (pEnd != null) ? pEnd : (pEnd = new EndElements());
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/endcredit.html
	//EndCredit:
	//	"endcredit" credit=XFloat;
	public EndCreditElements getEndCreditAccess() {
		return (pEndCredit != null) ? pEndCredit : (pEndCredit = new EndCreditElements());
	}
	
	public ParserRule getEndCreditRule() {
		return getEndCreditAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/epilog.html
	//Epilog:
	//	"epilog" RichText;
	public EpilogElements getEpilogAccess() {
		return (pEpilog != null) ? pEpilog : (pEpilog = new EpilogElements());
	}
	
	public ParserRule getEpilogRule() {
		return getEpilogAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/extend.html
	//Extend:
	//	"extend" type=("task" | "reource") ("{" reference=ReferenceExtend & date=DateExtend & richtext=RichTextExtend &
	//	text=TextExtend "}")?;
	public ExtendElements getExtendAccess() {
		return (pExtend != null) ? pExtend : (pExtend = new ExtendElements());
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/fail.html
	//Fail:
	//	"fail" expression=LogicalExpression;
	public FailElements getFailAccess() {
		return (pFail != null) ? pFail : (pFail = new FailElements());
	}
	
	public ParserRule getFailRule() {
		return getFailAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/flags.html
	//Flags:
	//	"flags" flags+=ID ("," flags+=ID)*;
	public FlagsElements getFlagsAccess() {
		return (pFlags != null) ? pFlags : (pFlags = new FlagsElements());
	}
	
	public ParserRule getFlagsRule() {
		return getFlagsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/fontcolor.column.html
	//FontColor:
	//	"fontcolor" color=STRING;
	public FontColorElements getFontColorAccess() {
		return (pFontColor != null) ? pFontColor : (pFontColor = new FontColorElements());
	}
	
	public ParserRule getFontColorRule() {
		return getFontColorAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/footer.html
	//Footer:
	//	"footer" RichText;
	public FooterElements getFooterAccess() {
		return (pFooter != null) ? pFooter : (pFooter = new FooterElements());
	}
	
	public ParserRule getFooterRule() {
		return getFooterAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/formats.html
	//Formats:
	//	"formats" formats+=ReportFormat ("," formats+=ReportFormat)*;
	public FormatsElements getFormatsAccess() {
		return (pFormats != null) ? pFormats : (pFormats = new FormatsElements());
	}
	
	public ParserRule getFormatsRule() {
		return getFormatsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/functions.html
	//// TODO: Functions
	//Functions:
	//	STRING;
	public FunctionsElements getFunctionsAccess() {
		return (pFunctions != null) ? pFunctions : (pFunctions = new FunctionsElements());
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/gapduration.html
	//GapDuration:
	//	"gapduration" DurationQuantity;
	public GapDurationElements getGapDurationAccess() {
		return (pGapDuration != null) ? pGapDuration : (pGapDuration = new GapDurationElements());
	}
	
	public ParserRule getGapDurationRule() {
		return getGapDurationAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/gaplength.html
	//GapLength:
	//	"gaplength" DurationQuantity;
	public GapLengthElements getGapLengthAccess() {
		return (pGapLength != null) ? pGapLength : (pGapLength = new GapLengthElements());
	}
	
	public ParserRule getGapLengthRule() {
		return getGapLengthAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/halign.column.html
	//// http://www.taskjuggler.org/tj3/manual/halign.center.html
	//// http://www.taskjuggler.org/tj3/manual/halign.left.html
	//// http://www.taskjuggler.org/tj3/manual/halign.right.html
	//HAlign:
	//	expression=LogicalExpression justification=Justification;
	public HAlignElements getHAlignAccess() {
		return (pHAlign != null) ? pHAlign : (pHAlign = new HAlignElements());
	}
	
	public ParserRule getHAlignRule() {
		return getHAlignAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/hasalert.html
	//// TODO - has alert
	//HasAlert:
	//	STRING;
	public HasAlertElements getHasAlertAccess() {
		return (pHasAlert != null) ? pHasAlert : (pHasAlert = new HasAlertElements());
	}
	
	public ParserRule getHasAlertRule() {
		return getHasAlertAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/header.html
	//Header:
	//	"header" RichText;
	public HeaderElements getHeaderAccess() {
		return (pHeader != null) ? pHeader : (pHeader = new HeaderElements());
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/headline.html
	//Headline:
	//	"headline" RichText;
	public HeadlineElements getHeadlineAccess() {
		return (pHeadline != null) ? pHeadline : (pHeadline = new HeadlineElements());
	}
	
	public ParserRule getHeadlineRule() {
		return getHeadlineAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/hidejournalentry.html
	//HideJournalEntry:
	//	"hidejournalentry" LogicalFlagExpression;
	public HideJournalEntryElements getHideJournalEntryAccess() {
		return (pHideJournalEntry != null) ? pHideJournalEntry : (pHideJournalEntry = new HideJournalEntryElements());
	}
	
	public ParserRule getHideJournalEntryRule() {
		return getHideJournalEntryAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/hidereport.html
	//HideReport:
	//	"hidereport" expression=LogicalExpression;
	public HideReportElements getHideReportAccess() {
		return (pHideReport != null) ? pHideReport : (pHideReport = new HideReportElements());
	}
	
	public ParserRule getHideReportRule() {
		return getHideReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/hideresource.html
	//HideResource:
	//	"hideresource" expression=LogicalExpression;
	public HideResourceElements getHideResourceAccess() {
		return (pHideResource != null) ? pHideResource : (pHideResource = new HideResourceElements());
	}
	
	public ParserRule getHideResourceRule() {
		return getHideResourceAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/hidetask.html
	//HideTask:
	//	"hidetask" expression=LogicalExpression;
	public HideTaskElements getHideTaskAccess() {
		return (pHideTask != null) ? pHideTask : (pHideTask = new HideTaskElements());
	}
	
	public ParserRule getHideTaskRule() {
		return getHideTaskAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/include.macro.html
	//// http://www.taskjuggler.org/tj3/manual/include.project.html
	//// TODO
	//Include:
	//	"include" filename=STRING;
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/include.properties.html
	//// TODO
	//// not sure how this include and the above include can be differentiated by parser
	//// http://www.taskjuggler.org/tj3/manual/inherit.extend.html
	//// do not implement.
	//// http://www.taskjuggler.org/tj3/manual/interval1.html
	//Interval1:
	//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity);
	public Interval1Elements getInterval1Access() {
		return (pInterval1 != null) ? pInterval1 : (pInterval1 = new Interval1Elements());
	}
	
	public ParserRule getInterval1Rule() {
		return getInterval1Access().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/interval2.html
	//Interval2:
	//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity);
	public Interval2Elements getInterval2Access() {
		return (pInterval2 != null) ? pInterval2 : (pInterval2 = new Interval2Elements());
	}
	
	public ParserRule getInterval2Rule() {
		return getInterval2Access().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/interval3.html
	//Interval3:
	//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)?;
	public Interval3Elements getInterval3Access() {
		return (pInterval3 != null) ? pInterval3 : (pInterval3 = new Interval3Elements());
	}
	
	public ParserRule getInterval3Rule() {
		return getInterval3Access().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/interval4.html
	//Interval4:
	//	start=ISODATE ("-" end=ISODATE | "+" duration=DurationQuantity)?;
	public Interval4Elements getInterval4Access() {
		return (pInterval4 != null) ? pInterval4 : (pInterval4 = new Interval4Elements());
	}
	
	public ParserRule getInterval4Rule() {
		return getInterval4Access().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/isactive.html
	//// http://www.taskjuggler.org/tj3/manual/ischildof.html
	//// http://www.taskjuggler.org/tj3/manual/isdependencyof.html
	//// http://www.taskjuggler.org/tj3/manual/isdutyof.html
	//// http://www.taskjuggler.org/tj3/manual/isfeatureof.html
	//// http://www.taskjuggler.org/tj3/manual/isleaf.html
	//// http://www.taskjuggler.org/tj3/manual/ismilestone.html
	//// http://www.taskjuggler.org/tj3/manual/isongoing.html
	//// http://www.taskjuggler.org/tj3/manual/isresource.html
	//// http://www.taskjuggler.org/tj3/manual/istask.html
	//// TODO
	//// http://www.taskjuggler.org/tj3/manual/journalattributes.html
	//JournalAttributes:
	//	all?="*" | none?="-" | flags?="flags" & property?="property" & details?="details" & author?="author" &
	//	headline?="headline" & date?="date" & timesheet?="timesheet" & propertyid?="propertyid" & summary?="summary";
	public JournalAttributesElements getJournalAttributesAccess() {
		return (pJournalAttributes != null) ? pJournalAttributes : (pJournalAttributes = new JournalAttributesElements());
	}
	
	public ParserRule getJournalAttributesRule() {
		return getJournalAttributesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/journalentry.html
	//JournalEntry:
	//	"journalentry" date=ISODATE headline=STRING ("{" (alert=Alert & author=Author & details=Details & summary=Summary)
	//	"}")?;
	public JournalEntryElements getJournalEntryAccess() {
		return (pJournalEntry != null) ? pJournalEntry : (pJournalEntry = new JournalEntryElements());
	}
	
	public ParserRule getJournalEntryRule() {
		return getJournalEntryAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/journalmode.html
	//JournalMode:
	//	"journalmode" mode=JournalModeValue;
	public JournalModeElements getJournalModeAccess() {
		return (pJournalMode != null) ? pJournalMode : (pJournalMode = new JournalModeElements());
	}
	
	public ParserRule getJournalModeRule() {
		return getJournalModeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/left.html	
	//Left:
	//	"left" RichText;
	public LeftElements getLeftAccess() {
		return (pLeft != null) ? pLeft : (pLeft = new LeftElements());
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/length.html
	//Length:
	//	"length" length=DurationQuantity;
	public LengthElements getLengthAccess() {
		return (pLength != null) ? pLength : (pLength = new LengthElements());
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/limits.task.html
	//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
	//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
	//// http://www.taskjuggler.org/tj3/manual/limits.html
	//Limits:
	//	"limits" {Limits} ("{" attributes+=LimitsAttribute* "}")?;
	public LimitsElements getLimitsAccess() {
		return (pLimits != null) ? pLimits : (pLimits = new LimitsElements());
	}
	
	public ParserRule getLimitsRule() {
		return getLimitsAccess().getRule();
	}

	//LimitsAttribute:
	//	DailyMax | DailyMin | Maximum | Minimum | MonthlyMax | MonthlyMin | WeeklyMax | WeeklyMin;
	public LimitsAttributeElements getLimitsAttributeAccess() {
		return (pLimitsAttribute != null) ? pLimitsAttribute : (pLimitsAttribute = new LimitsAttributeElements());
	}
	
	public ParserRule getLimitsAttributeRule() {
		return getLimitsAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/listitem.column.html
	//ListItem:
	//	"listitem" RichText;
	public ListItemElements getListItemAccess() {
		return (pListItem != null) ? pListItem : (pListItem = new ListItemElements());
	}
	
	public ParserRule getListItemRule() {
		return getListItemAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
	//ListType:
	//	"listtype" type=ListTypeValues;
	public ListTypeElements getListTypeAccess() {
		return (pListType != null) ? pListType : (pListType = new ListTypeElements());
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/loadunit.html
	//LoadUnit:
	//	"loadunit" unit=LoadDisplayUnit;
	public LoadUnitElements getLoadUnitAccess() {
		return (pLoadUnit != null) ? pLoadUnit : (pLoadUnit = new LoadUnitElements());
	}
	
	public ParserRule getLoadUnitRule() {
		return getLoadUnitAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/logicalexpression.html
	//LogicalExpression:
	//	STRING;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return (pLogicalExpression != null) ? pLogicalExpression : (pLogicalExpression = new LogicalExpressionElements());
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/logicalflagexpression.html
	//LogicalFlagExpression:
	//	STRING;
	public LogicalFlagExpressionElements getLogicalFlagExpressionAccess() {
		return (pLogicalFlagExpression != null) ? pLogicalFlagExpression : (pLogicalFlagExpression = new LogicalFlagExpressionElements());
	}
	
	public ParserRule getLogicalFlagExpressionRule() {
		return getLogicalFlagExpressionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/macro.html
	//// TODO
	//Macro:
	//	"macro" STRING;
	public MacroElements getMacroAccess() {
		return (pMacro != null) ? pMacro : (pMacro = new MacroElements());
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/managers.html
	//Managers:
	//	"managers" resources+=[Resource] ("," resources+=[Resource])*;
	public ManagersElements getManagersAccess() {
		return (pManagers != null) ? pManagers : (pManagers = new ManagersElements());
	}
	
	public ParserRule getManagersRule() {
		return getManagersAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/mandatory.html
	//Mandatory:
	//	mandatory?="mandatory";
	public MandatoryElements getMandatoryAccess() {
		return (pMandatory != null) ? pMandatory : (pMandatory = new MandatoryElements());
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/maxend.html
	//MaxEnd:
	//	"maxend" maxEnd=ISODATE;
	public MaxEndElements getMaxEndAccess() {
		return (pMaxEnd != null) ? pMaxEnd : (pMaxEnd = new MaxEndElements());
	}
	
	public ParserRule getMaxEndRule() {
		return getMaxEndAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/maximum.html
	//Maximum:
	//	"maximum" Limit;
	public MaximumElements getMaximumAccess() {
		return (pMaximum != null) ? pMaximum : (pMaximum = new MaximumElements());
	}
	
	public ParserRule getMaximumRule() {
		return getMaximumAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/maxstart.html
	//MaxStart:
	//	"maxstart" maxStart=ISODATE;
	public MaxStartElements getMaxStartAccess() {
		return (pMaxStart != null) ? pMaxStart : (pMaxStart = new MaxStartElements());
	}
	
	public ParserRule getMaxStartRule() {
		return getMaxStartAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/milestone.html
	//Milestone:
	//	milestone?="milestone";
	public MilestoneElements getMilestoneAccess() {
		return (pMilestone != null) ? pMilestone : (pMilestone = new MilestoneElements());
	}
	
	public ParserRule getMilestoneRule() {
		return getMilestoneAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/minimum.html
	//Minimum:
	//	"minimum" Limit;
	public MinimumElements getMinimumAccess() {
		return (pMinimum != null) ? pMinimum : (pMinimum = new MinimumElements());
	}
	
	public ParserRule getMinimumRule() {
		return getMinimumAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/minend.html
	//MinEnd:
	//	"minend" minEnd=ISODATE;
	public MinEndElements getMinEndAccess() {
		return (pMinEnd != null) ? pMinEnd : (pMinEnd = new MinEndElements());
	}
	
	public ParserRule getMinEndRule() {
		return getMinEndAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/minstart.html
	//MinStart:
	//	"minstart" minStart=ISODATE;
	public MinStartElements getMinStartAccess() {
		return (pMinStart != null) ? pMinStart : (pMinStart = new MinStartElements());
	}
	
	public ParserRule getMinStartRule() {
		return getMinStartAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/monthlymax.html
	//MonthlyMax:
	//	"monthlymax" Limit;
	public MonthlyMaxElements getMonthlyMaxAccess() {
		return (pMonthlyMax != null) ? pMonthlyMax : (pMonthlyMax = new MonthlyMaxElements());
	}
	
	public ParserRule getMonthlyMaxRule() {
		return getMonthlyMaxAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/monthlymin.html
	//MonthlyMin:
	//	"monthlymin" Limit;
	public MonthlyMinElements getMonthlyMinAccess() {
		return (pMonthlyMin != null) ? pMonthlyMin : (pMonthlyMin = new MonthlyMinElements());
	}
	
	public ParserRule getMonthlyMinRule() {
		return getMonthlyMinAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/note.task.html
	//Note:
	//	"note" note=STRING;
	public NoteElements getNoteAccess() {
		return (pNote != null) ? pNote : (pNote = new NoteElements());
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/now.html
	//Now:
	//	"now" now=ISODATE;
	public NowElements getNowAccess() {
		return (pNow != null) ? pNow : (pNow = new NowElements());
	}
	
	public ParserRule getNowRule() {
		return getNowAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/numberformat.html
	//NumberFormat:
	//	"numberformat" RealFormat;
	public NumberFormatElements getNumberFormatAccess() {
		return (pNumberFormat != null) ? pNumberFormat : (pNumberFormat = new NumberFormatElements());
	}
	
	public ParserRule getNumberFormatRule() {
		return getNumberFormatAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/onend.html
	//// http://www.taskjuggler.org/tj3/manual/onstart.html
	//// See DependPolicy
	//// http://www.taskjuggler.org/tj3/manual/opennodes.html
	//// internal use only
	//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
	//// See BookingRestriction
	//// http://www.taskjuggler.org/tj3/manual/period.column.html
	//Period:
	//	"period" period=Interval2;
	public PeriodElements getPeriodAccess() {
		return (pPeriod != null) ? pPeriod : (pPeriod = new PeriodElements());
	}
	
	public ParserRule getPeriodRule() {
		return getPeriodAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/persistent.html
	//Persistent:
	//	persistent?="persistent";
	public PersistentElements getPersistentAccess() {
		return (pPersistent != null) ? pPersistent : (pPersistent = new PersistentElements());
	}
	
	public ParserRule getPersistentRule() {
		return getPersistentAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/precedes.html
	//Precedes:
	//	"precedes" TaskDependency;
	public PrecedesElements getPrecedesAccess() {
		return (pPrecedes != null) ? pPrecedes : (pPrecedes = new PrecedesElements());
	}
	
	public ParserRule getPrecedesRule() {
		return getPrecedesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/priority.html
	//Priority:
	//	"priority" priority=INT;
	public PriorityElements getPriorityAccess() {
		return (pPriority != null) ? pPriority : (pPriority = new PriorityElements());
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/projectid.html
	//ProjectId:
	//	"projectid" projectId=ID;
	public ProjectIdElements getProjectIdAccess() {
		return (pProjectId != null) ? pProjectId : (pProjectId = new ProjectIdElements());
	}
	
	public ParserRule getProjectIdRule() {
		return getProjectIdAccess().getRule();
	}

	////http://www.taskjuggler.org/tj3/manual/projectids.html
	//ProjectIds:
	//	"projectids" ids+=ID ("," ids+=ID)*;
	public ProjectIdsElements getProjectIdsAccess() {
		return (pProjectIds != null) ? pProjectIds : (pProjectIds = new ProjectIdsElements());
	}
	
	public ParserRule getProjectIdsRule() {
		return getProjectIdsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/projection.html
	//// deprecated
	//// http://www.taskjuggler.org/tj3/manual/prolog.html
	//Prolog:
	//	"prolog" RichText;
	public PrologElements getPrologAccess() {
		return (pProlog != null) ? pProlog : (pProlog = new PrologElements());
	}
	
	public ParserRule getPrologRule() {
		return getPrologAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/purge.html
	//// TODO: I wonder what a 'list attribute' is.
	//Purge:
	//	"purge" listAttribute=STRING;
	public PurgeElements getPurgeAccess() {
		return (pPurge != null) ? pPurge : (pPurge = new PurgeElements());
	}
	
	public ParserRule getPurgeRule() {
		return getPurgeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/rate.html
	//Rate:
	//	"rate" rate=XFloat;
	public RateElements getRateAccess() {
		return (pRate != null) ? pRate : (pRate = new RateElements());
	}
	
	public ParserRule getRateRule() {
		return getRateAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/reference.extend.html
	//ReferenceExtend:
	//	"reference" ExtendAttribute;
	public ReferenceExtendElements getReferenceExtendAccess() {
		return (pReferenceExtend != null) ? pReferenceExtend : (pReferenceExtend = new ReferenceExtendElements());
	}
	
	public ParserRule getReferenceExtendRule() {
		return getReferenceExtendAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/remaining.html
	//Remaining:
	//	"remaining" remaining=DurationQuantity;
	public RemainingElements getRemainingAccess() {
		return (pRemaining != null) ? pRemaining : (pRemaining = new RemainingElements());
	}
	
	public ParserRule getRemainingRule() {
		return getRemainingAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/replace.html
	//// see Shift
	//// http://www.taskjuggler.org/tj3/manual/reportprefix.html
	//ReportPrefix:
	//	"reportprefix" report=[Report];
	public ReportPrefixElements getReportPrefixAccess() {
		return (pReportPrefix != null) ? pReportPrefix : (pReportPrefix = new ReportPrefixElements());
	}
	
	public ParserRule getReportPrefixRule() {
		return getReportPrefixAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/resourceattributes.html
	//ResourceAttributes:
	//	all?="*" | none?="-" | vacation?="vacation" & booking?="booking" & workingHours?="workinghours";
	public ResourceAttributesElements getResourceAttributesAccess() {
		return (pResourceAttributes != null) ? pResourceAttributes : (pResourceAttributes = new ResourceAttributesElements());
	}
	
	public ParserRule getResourceAttributesRule() {
		return getResourceAttributesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/resourceprefix.html
	//ResourcePrefix:
	//	"resourceprefix" resource=[Resource];
	public ResourcePrefixElements getResourcePrefixAccess() {
		return (pResourcePrefix != null) ? pResourcePrefix : (pResourcePrefix = new ResourcePrefixElements());
	}
	
	public ParserRule getResourcePrefixRule() {
		return getResourcePrefixAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
	//ResourceReport:
	//	"resourcereport" Report;
	public ResourceReportElements getResourceReportAccess() {
		return (pResourceReport != null) ? pResourceReport : (pResourceReport = new ResourceReportElements());
	}
	
	public ParserRule getResourceReportRule() {
		return getResourceReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/resourceroot.html
	//ResourceRoot:
	//	"resourceroot" resource=[Resource];
	public ResourceRootElements getResourceRootAccess() {
		return (pResourceRoot != null) ? pResourceRoot : (pResourceRoot = new ResourceRootElements());
	}
	
	public ParserRule getResourceRootRule() {
		return getResourceRootAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/resources.limit.html
	//// See Limit
	//// http://www.taskjuggler.org/tj3/manual/responsible.html
	//Responsible:
	//	"responsible" resources+=[Resource] ("," resources+=[Resource])*;
	public ResponsibleElements getResponsibleAccess() {
		return (pResponsible != null) ? pResponsible : (pResponsible = new ResponsibleElements());
	}
	
	public ParserRule getResponsibleRule() {
		return getResponsibleAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/richtext.extend.html
	//RichTextExtend:
	//	"richtext" ExtendAttribute;
	public RichTextExtendElements getRichTextExtendAccess() {
		return (pRichTextExtend != null) ? pRichTextExtend : (pRichTextExtend = new RichTextExtendElements());
	}
	
	public ParserRule getRichTextExtendRule() {
		return getRichTextExtendAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/right.html
	//Right:
	//	"right" RichText;
	public RightElements getRightAccess() {
		return (pRight != null) ? pRight : (pRight = new RightElements());
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/rollupresource.html
	//RollupResource:
	//	"rollupresource" expression=LogicalExpression;
	public RollupResourceElements getRollupResourceAccess() {
		return (pRollupResource != null) ? pRollupResource : (pRollupResource = new RollupResourceElements());
	}
	
	public ParserRule getRollupResourceRule() {
		return getRollupResourceAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/rolluptask.html
	//RollupTask:
	//	"rolluptask" expression=LogicalExpression;
	public RollupTaskElements getRollupTaskAccess() {
		return (pRollupTask != null) ? pRollupTask : (pRollupTask = new RollupTaskElements());
	}
	
	public ParserRule getRollupTaskRule() {
		return getRollupTaskAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scale.column.html
	//Scale:
	//	"scale" scale=("hour" | "day" | "week" | "month" | "quarter" | "year");
	public ScaleElements getScaleAccess() {
		return (pScale != null) ? pScale : (pScale = new ScaleElements());
	}
	
	public ParserRule getScaleRule() {
		return getScaleAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scenario.html	
	//Scenario:
	//	"scenario" id=ID name=STRING ("{" (("active" active=YesNo)? & scenario=Scenario?) "}")?;
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scenario.ical.html
	//// TODO
	//ScenarioIcal:
	//	STRING;
	public ScenarioIcalElements getScenarioIcalAccess() {
		return (pScenarioIcal != null) ? pScenarioIcal : (pScenarioIcal = new ScenarioIcalElements());
	}
	
	public ParserRule getScenarioIcalRule() {
		return getScenarioIcalAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scenarios.html
	//Scenarios:
	//	"scenarios" scenarios+=[Scenario] ("," scenarios+=[Scenario])*;
	public ScenariosElements getScenariosAccess() {
		return (pScenarios != null) ? pScenarios : (pScenarios = new ScenariosElements());
	}
	
	public ParserRule getScenariosRule() {
		return getScenariosAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
	//// see ExtendAttribute
	//// http://www.taskjuggler.org/tj3/manual/scheduled.html
	//Scheduled:
	//	scheduled?="scheduled";
	public ScheduledElements getScheduledAccess() {
		return (pScheduled != null) ? pScheduled : (pScheduled = new ScheduledElements());
	}
	
	public ParserRule getScheduledRule() {
		return getScheduledAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scheduling.html
	//Scheduling:
	//	"scheduling" scheduling=SchedulingPolicy;
	public SchedulingElements getSchedulingAccess() {
		return (pScheduling != null) ? pScheduling : (pScheduling = new SchedulingElements());
	}
	
	public ParserRule getSchedulingRule() {
		return getSchedulingAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/select.html
	//Select:
	//	"select" argument=SelectArgument;
	public SelectElements getSelectAccess() {
		return (pSelect != null) ? pSelect : (pSelect = new SelectElements());
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/selfcontained.html
	//SelfContained:
	//	"selfcontained" selfcontained=YesNo;
	public SelfContainedElements getSelfContainedAccess() {
		return (pSelfContained != null) ? pSelfContained : (pSelfContained = new SelfContainedElements());
	}
	
	public ParserRule getSelfContainedRule() {
		return getSelfContainedAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/shift.html
	//// http://www.taskjuggler.org/tj3/manual/shift.resource.html
	//// http://www.taskjuggler.org/tj3/manual/shifts.task.html
	//Shift:
	//	"shift" id=ID? name=STRING ("{" (replace="replace"? & ("timezone" timezone=STRING)? & ("vacation"
	//	vacation=VacationShift)? & ("shift" shift=Shift)? & ("workinghours" workingHours=WorkingHours)?) "}")?;
	public ShiftElements getShiftAccess() {
		return (pShift != null) ? pShift : (pShift = new ShiftElements());
	}
	
	public ParserRule getShiftRule() {
		return getShiftAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/shift.timesheet.html
	//ShiftTimesheet:
	//	"shift" shift=[Shift];
	public ShiftTimesheetElements getShiftTimesheetAccess() {
		return (pShiftTimesheet != null) ? pShiftTimesheet : (pShiftTimesheet = new ShiftTimesheetElements());
	}
	
	public ParserRule getShiftTimesheetRule() {
		return getShiftTimesheetAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/shifts.resource.html
	//// http://www.taskjuggler.org/tj3/manual/shifts.task.html
	//// http://www.taskjuggler.org/tj3/manual/shifts.allocate.html
	//Shifts:
	//	"shifts" limits+=ShiftLimit ("," limits+=ShiftLimit)*;
	public ShiftsElements getShiftsAccess() {
		return (pShifts != null) ? pShifts : (pShifts = new ShiftsElements());
	}
	
	public ParserRule getShiftsRule() {
		return getShiftsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/shorttimeformat.html
	//ShortTimeFormat:
	//	"shorttimeformat" shortTimeFormat=STRING;
	public ShortTimeFormatElements getShortTimeFormatAccess() {
		return (pShortTimeFormat != null) ? pShortTimeFormat : (pShortTimeFormat = new ShortTimeFormatElements());
	}
	
	public ParserRule getShortTimeFormatRule() {
		return getShortTimeFormatAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
	//// http://www.taskjuggler.org/tj3/manual/sloppy.projection.html
	//// see Booking
	//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
	//SortJournalEntries:
	//	"sortjournalentries" criteria+=JournalEntrySortCriterion ("," criteria+=JournalEntrySortCriterion)*;
	public SortJournalEntriesElements getSortJournalEntriesAccess() {
		return (pSortJournalEntries != null) ? pSortJournalEntries : (pSortJournalEntries = new SortJournalEntriesElements());
	}
	
	public ParserRule getSortJournalEntriesRule() {
		return getSortJournalEntriesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//SortResources:
	//	"sortresources" Sort;
	public SortResourcesElements getSortResourcesAccess() {
		return (pSortResources != null) ? pSortResources : (pSortResources = new SortResourcesElements());
	}
	
	public ParserRule getSortResourcesRule() {
		return getSortResourcesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//SortTasks:
	//	"sorttasks" Sort;
	public SortTasksElements getSortTasksAccess() {
		return (pSortTasks != null) ? pSortTasks : (pSortTasks = new SortTasksElements());
	}
	
	public ParserRule getSortTasksRule() {
		return getSortTasksAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/start.html
	//// http://www.taskjuggler.org/tj3/manual/start.column.html
	//// http://www.taskjuggler.org/tj3/manual/start.limit.html
	//// http://www.taskjuggler.org/tj3/manual/start.report.html
	//Start:
	//	"start" start=ISODATE;
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/startcredit.html
	//StartCredit:
	//	"startcredit" startCredit=XFloat;
	public StartCreditElements getStartCreditAccess() {
		return (pStartCredit != null) ? pStartCredit : (pStartCredit = new StartCreditElements());
	}
	
	public ParserRule getStartCreditRule() {
		return getStartCreditAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/status.statussheet.html
	//StatusStatusSheet:
	//	"status" level=AlertLevel text=STRING ("{" attributes+=StatusStatusSheetAttribute* "}")?;
	public StatusStatusSheetElements getStatusStatusSheetAccess() {
		return (pStatusStatusSheet != null) ? pStatusStatusSheet : (pStatusStatusSheet = new StatusStatusSheetElements());
	}
	
	public ParserRule getStatusStatusSheetRule() {
		return getStatusStatusSheetAccess().getRule();
	}

	//StatusStatusSheetAttribute:
	//	Author | Details | Flags | Summary;
	public StatusStatusSheetAttributeElements getStatusStatusSheetAttributeAccess() {
		return (pStatusStatusSheetAttribute != null) ? pStatusStatusSheetAttribute : (pStatusStatusSheetAttribute = new StatusStatusSheetAttributeElements());
	}
	
	public ParserRule getStatusStatusSheetAttributeRule() {
		return getStatusStatusSheetAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/status.timesheet.html
	////StatusTimesheet: 'statusB' level=AlertLevel text=STRING 
	////	(details = Details & flags = Flags & summary = Summary);
	//// http://www.taskjuggler.org/tj3/manual/statussheet.html
	//// TODO
	//StatusSheet:
	//	"statussheet" STRING;
	public StatusSheetElements getStatusSheetAccess() {
		return (pStatusSheet != null) ? pStatusSheet : (pStatusSheet = new StatusSheetElements());
	}
	
	public ParserRule getStatusSheetRule() {
		return getStatusSheetAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/statussheetreport.html
	//// TODO
	//StatusSheetReport:
	//	"statussheetreport" STRING;
	public StatusSheetReportElements getStatusSheetReportAccess() {
		return (pStatusSheetReport != null) ? pStatusSheetReport : (pStatusSheetReport = new StatusSheetReportElements());
	}
	
	public ParserRule getStatusSheetReportRule() {
		return getStatusSheetReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/strict.projection.html
	//// deprecated.
	//// http://www.taskjuggler.org/tj3/manual/summary.html
	//// TODO: limit to 240 characters
	//Summary:
	//	"summary" RichText;
	public SummaryElements getSummaryAccess() {
		return (pSummary != null) ? pSummary : (pSummary = new SummaryElements());
	}
	
	public ParserRule getSummaryRule() {
		return getSummaryAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/supplement.html
	//// http://www.taskjuggler.org/tj3/manual/supplement.resource.html
	//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
	//// TODO
	//// http://www.taskjuggler.org/tj3/manual/tagfile.html
	//TagFile:
	//	"tagfile" id=ID? filename=STRING ("{" hideResource=HideResource? & hideTask=HideTask? & rollupResource=RollupResource?
	//	& rollupTask=RollupTask? "}")?;
	public TagFileElements getTagFileAccess() {
		return (pTagFile != null) ? pTagFile : (pTagFile = new TagFileElements());
	}
	
	public ParserRule getTagFileRule() {
		return getTagFileAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/task.statussheet.html
	//TaskStatusSheet:
	//	"task" task=[Task] ("{" attributes+=TaskStatusSheetAttribute* "}")?;
	public TaskStatusSheetElements getTaskStatusSheetAccess() {
		return (pTaskStatusSheet != null) ? pTaskStatusSheet : (pTaskStatusSheet = new TaskStatusSheetElements());
	}
	
	public ParserRule getTaskStatusSheetRule() {
		return getTaskStatusSheetAccess().getRule();
	}

	//TaskStatusSheetAttribute:
	//	TaskStatusSheet | StatusStatusSheet;
	public TaskStatusSheetAttributeElements getTaskStatusSheetAttributeAccess() {
		return (pTaskStatusSheetAttribute != null) ? pTaskStatusSheetAttribute : (pTaskStatusSheetAttribute = new TaskStatusSheetAttributeElements());
	}
	
	public ParserRule getTaskStatusSheetAttributeRule() {
		return getTaskStatusSheetAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
	//TaskTimesheet:
	//	"task" task=[Task] ("{" attributes+=TaskTimesheetAttribute* "}")?;
	public TaskTimesheetElements getTaskTimesheetAccess() {
		return (pTaskTimesheet != null) ? pTaskTimesheet : (pTaskTimesheet = new TaskTimesheetElements());
	}
	
	public ParserRule getTaskTimesheetRule() {
		return getTaskTimesheetAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/taskattributes.html
	//TaskAttributes:
	//	all?="*" | none?="-" | responsible?="responsible" & flags?="flags" & maxstart?="maxstart" & maxend?="maxstart" &
	//	priority?="priority" & booking?="priority" & note?="note" & minstart?="minstart" & minend?="minend" &
	//	complete?="complete" & depends?="depends";
	public TaskAttributesElements getTaskAttributesAccess() {
		return (pTaskAttributes != null) ? pTaskAttributes : (pTaskAttributes = new TaskAttributesElements());
	}
	
	public ParserRule getTaskAttributesRule() {
		return getTaskAttributesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/taskprefix.html
	//TaskPrefix:
	//	"taskprefix" task=[Task];
	public TaskPrefixElements getTaskPrefixAccess() {
		return (pTaskPrefix != null) ? pTaskPrefix : (pTaskPrefix = new TaskPrefixElements());
	}
	
	public ParserRule getTaskPrefixRule() {
		return getTaskPrefixAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/taskreport.html
	//TaskReport:
	//	"taskreport" Report;
	public TaskReportElements getTaskReportAccess() {
		return (pTaskReport != null) ? pTaskReport : (pTaskReport = new TaskReportElements());
	}
	
	public ParserRule getTaskReportRule() {
		return getTaskReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/taskroot.html
	//TaskRoot:
	//	"taskroot" task=[Task];
	public TaskRootElements getTaskRootAccess() {
		return (pTaskRoot != null) ? pTaskRoot : (pTaskRoot = new TaskRootElements());
	}
	
	public ParserRule getTaskRootRule() {
		return getTaskRootAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/text.extend.html
	//TextExtend:
	//	"text" ExtendAttribute;
	public TextExtendElements getTextExtendAccess() {
		return (pTextExtend != null) ? pTextExtend : (pTextExtend = new TextExtendElements());
	}
	
	public ParserRule getTextExtendRule() {
		return getTextExtendAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/textreport.html
	//TextReport:
	//	"textreport" Report;
	public TextReportElements getTextReportAccess() {
		return (pTextReport != null) ? pTextReport : (pTextReport = new TextReportElements());
	}
	
	public ParserRule getTextReportRule() {
		return getTextReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timeformat.html
	//// TODO: specify format string syntax ?
	//TimeFormat:
	//	"timeformat" timeformat=STRING;
	public TimeFormatElements getTimeFormatAccess() {
		return (pTimeFormat != null) ? pTimeFormat : (pTimeFormat = new TimeFormatElements());
	}
	
	public ParserRule getTimeFormatRule() {
		return getTimeFormatAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timeoff.nikureport.html
	//Timeoff:
	//	"timeoff" id=STRING name=STRING;
	public TimeoffElements getTimeoffAccess() {
		return (pTimeoff != null) ? pTimeoff : (pTimeoff = new TimeoffElements());
	}
	
	public ParserRule getTimeoffRule() {
		return getTimeoffAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timesheet.html
	//Timesheet:
	//	"timesheet" resource=[Resource] interval=Interval4 ("{" attributes+=TimesheetAttribute*)?;
	public TimesheetElements getTimesheetAccess() {
		return (pTimesheet != null) ? pTimesheet : (pTimesheet = new TimesheetElements());
	}
	
	public ParserRule getTimesheetRule() {
		return getTimesheetAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timesheetreport.html
	//TimesheetReport:
	//	"timesheetreport" filename=STRING comnent=STRING ("{" attributes+=TimesheetReportAttribute* "}")?;
	public TimesheetReportElements getTimesheetReportAccess() {
		return (pTimesheetReport != null) ? pTimesheetReport : (pTimesheetReport = new TimesheetReportElements());
	}
	
	public ParserRule getTimesheetReportRule() {
		return getTimesheetReportAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timezone.export.html
	//// http://www.taskjuggler.org/tj3/manual/timezone.html
	//// http://www.taskjuggler.org/tj3/manual/timezone.shift.html
	//Timezone:
	//	"timezone" timezone=STRING;
	public TimezoneElements getTimezoneAccess() {
		return (pTimezone != null) ? pTimezone : (pTimezone = new TimezoneElements());
	}
	
	public ParserRule getTimezoneRule() {
		return getTimezoneAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timingresolution.html
	//TimingResolution:
	//	"timingresolution" timingResolution=INT "min";
	public TimingResolutionElements getTimingResolutionAccess() {
		return (pTimingResolution != null) ? pTimingResolution : (pTimingResolution = new TimingResolutionElements());
	}
	
	public ParserRule getTimingResolutionRule() {
		return getTimingResolutionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/title.column.html
	//// http://www.taskjuggler.org/tj3/manual/title.html
	//Title:
	//	"title" title=STRING;
	public TitleElements getTitleAccess() {
		return (pTitle != null) ? pTitle : (pTitle = new TitleElements());
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/tooltip.column.html
	//ToolTip:
	//	"tooltip" expression=LogicalExpression tip=STRING;
	public ToolTipElements getToolTipAccess() {
		return (pToolTip != null) ? pToolTip : (pToolTip = new ToolTipElements());
	}
	
	public ParserRule getToolTipRule() {
		return getToolTipAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/trackingscenario.html
	//TrackingScenario:
	//	"trackingscenario" scenario=[Scenario];
	public TrackingScenarioElements getTrackingScenarioAccess() {
		return (pTrackingScenario != null) ? pTrackingScenario : (pTrackingScenario = new TrackingScenarioElements());
	}
	
	public ParserRule getTrackingScenarioRule() {
		return getTrackingScenarioAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/treelevel.html
	//// TODO
	//TreeLevel:
	//	"treelevel" level=STRING;
	public TreeLevelElements getTreeLevelAccess() {
		return (pTreeLevel != null) ? pTreeLevel : (pTreeLevel = new TreeLevelElements());
	}
	
	public ParserRule getTreeLevelRule() {
		return getTreeLevelAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/vacation.html
	//Vacation:
	//	"vacation" name=STRING intervals+=Interval3 ("," intervals+=Interval3)*;
	public VacationElements getVacationAccess() {
		return (pVacation != null) ? pVacation : (pVacation = new VacationElements());
	}
	
	public ParserRule getVacationRule() {
		return getVacationAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/vacation.resource.html
	//VacationResource returns Vacation:
	//	"vacation" name=STRING? intervals+=Interval3 ("," intervals+=Interval3)*;
	public VacationResourceElements getVacationResourceAccess() {
		return (pVacationResource != null) ? pVacationResource : (pVacationResource = new VacationResourceElements());
	}
	
	public ParserRule getVacationResourceRule() {
		return getVacationResourceAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/vacation.shift.html	
	//VacationShift: // TODO: both name and interval can be empty: explain
	//	"vacation" {VacationShift} name=STRING? (intervals+=Interval3 ("," intervals+=Interval3)*)?;
	public VacationShiftElements getVacationShiftAccess() {
		return (pVacationShift != null) ? pVacationShift : (pVacationShift = new VacationShiftElements());
	}
	
	public ParserRule getVacationShiftRule() {
		return getVacationShiftAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/warn.html
	//Warn:
	//	"warn" expression=LogicalExpression;
	public WarnElements getWarnAccess() {
		return (pWarn != null) ? pWarn : (pWarn = new WarnElements());
	}
	
	public ParserRule getWarnRule() {
		return getWarnAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/weekstartsmonday.html;
	//// http://www.taskjuggler.org/tj3/manual/weekstartssunday.html
	//WeekStarts:
	//	sunday?="weekstartssunday" | monday?="weekstartsmonday";
	public WeekStartsElements getWeekStartsAccess() {
		return (pWeekStarts != null) ? pWeekStarts : (pWeekStarts = new WeekStartsElements());
	}
	
	public ParserRule getWeekStartsRule() {
		return getWeekStartsAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/weeklymax.html
	//WeeklyMax:
	//	"weeklymax" Limit;
	public WeeklyMaxElements getWeeklyMaxAccess() {
		return (pWeeklyMax != null) ? pWeeklyMax : (pWeeklyMax = new WeeklyMaxElements());
	}
	
	public ParserRule getWeeklyMaxRule() {
		return getWeeklyMaxAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/weeklymin.html
	//WeeklyMin:
	//	"weeklymin" Limit;
	public WeeklyMinElements getWeeklyMinAccess() {
		return (pWeeklyMin != null) ? pWeeklyMin : (pWeeklyMin = new WeeklyMinElements());
	}
	
	public ParserRule getWeeklyMinRule() {
		return getWeeklyMinAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/width.column.html
	//Width:
	//	"width" width=XFloat;
	public WidthElements getWidthAccess() {
		return (pWidth != null) ? pWidth : (pWidth = new WidthElements());
	}
	
	public ParserRule getWidthRule() {
		return getWidthAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/work.html
	//Work:
	//	"work" value=XFloat unit=WorkQuantityUnit;
	public WorkElements getWorkAccess() {
		return (pWork != null) ? pWork : (pWork = new WorkElements());
	}
	
	public ParserRule getWorkRule() {
		return getWorkAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
	//WorkingHours:
	//	"workinghours" (weekdays+=Weekdays ("," weekdays+=Weekdays)*) (off?="off" | hours+=WorkHours ("," hours+=WorkHours)*);
	public WorkingHoursElements getWorkingHoursAccess() {
		return (pWorkingHours != null) ? pWorkingHours : (pWorkingHours = new WorkingHoursElements());
	}
	
	public ParserRule getWorkingHoursRule() {
		return getWorkingHoursAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/yearlyworkingdays.html
	//YearlyWorkingDays:
	//	"yearlyworkingdays" yearlyWorkingDays=INT;
	public YearlyWorkingDaysElements getYearlyWorkingDaysAccess() {
		return (pYearlyWorkingDays != null) ? pYearlyWorkingDays : (pYearlyWorkingDays = new YearlyWorkingDaysElements());
	}
	
	public ParserRule getYearlyWorkingDaysRule() {
		return getYearlyWorkingDaysAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/chargeset.html
	//AccountShare:
	//	account=[Account] share=XFloat;
	public AccountShareElements getAccountShareAccess() {
		return (pAccountShare != null) ? pAccountShare : (pAccountShare = new AccountShareElements());
	}
	
	public ParserRule getAccountShareRule() {
		return getAccountShareAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/columns.html
	//ColumnAttribute:
	//	CellColor | CellText | End | FontColor | HAlign | ListItem | ListType | Period | Scale | Start | Title | ToolTip |
	//	Width;
	public ColumnAttributeElements getColumnAttributeAccess() {
		return (pColumnAttribute != null) ? pColumnAttribute : (pColumnAttribute = new ColumnAttributeElements());
	}
	
	public ParserRule getColumnAttributeRule() {
		return getColumnAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/columns.html
	//// TODO: extend column id to user defined column ids.
	//Column:
	//	id=ColumnId attribute=ColumnAttribute;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//Criterion:
	//	(scenario=[Scenario] ".")? criterionId=CriterionId;
	public CriterionElements getCriterionAccess() {
		return (pCriterion != null) ? pCriterion : (pCriterion = new CriterionElements());
	}
	
	public ParserRule getCriterionRule() {
		return getCriterionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//CriterionId:
	//	columnId=ColumnId ("." direction=CriterionDirection)?;
	public CriterionIdElements getCriterionIdAccess() {
		return (pCriterionId != null) ? pCriterionId : (pCriterionId = new CriterionIdElements());
	}
	
	public ParserRule getCriterionIdRule() {
		return getCriterionIdAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/duration.html
	//// http://www.taskjuggler.org/tj3/manual/effort.html
	//// http://www.taskjuggler.org/tj3/manual/gapduration.html
	//// http://www.taskjuggler.org/tj3/manual/gaplength.html
	//// http://www.taskjuggler.org/tj3/manual/interval1.html
	//// http://www.taskjuggler.org/tj3/manual/interval2.html
	//// http://www.taskjuggler.org/tj3/manual/interval3.html
	//// http://www.taskjuggler.org/tj3/manual/interval4.html
	//// http://www.taskjuggler.org/tj3/manual/length.html
	//// http://www.taskjuggler.org/tj3/manual/remaining.html
	//DurationQuantity:
	//	value=XFloat unit=TimeUnit;
	public DurationQuantityElements getDurationQuantityAccess() {
		return (pDurationQuantity != null) ? pDurationQuantity : (pDurationQuantity = new DurationQuantityElements());
	}
	
	public ParserRule getDurationQuantityRule() {
		return getDurationQuantityAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/date.extend.html
	//// http://www.taskjuggler.org/tj3/manual/reference.extend.html
	//// http://www.taskjuggler.org/tj3/manual/richtext.extend.html
	//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
	//// http://www.taskjuggler.org/tj3/manual/text.extend.html
	//ExtendAttribute:
	//	id=ID name=STRING ("{" inherit?="inherit" & scenariospecific?="scenariospecific" "}")?;
	public ExtendAttributeElements getExtendAttributeAccess() {
		return (pExtendAttribute != null) ? pExtendAttribute : (pExtendAttribute = new ExtendAttributeElements());
	}
	
	public ParserRule getExtendAttributeRule() {
		return getExtendAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/limits.task.html
	//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
	//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
	//// http://www.taskjuggler.org/tj3/manual/limits.html
	//Limit:
	//	value=XFloat unit=TimeUnit ("{" attributes+=LimitAttribute* "}")?;
	public LimitElements getLimitAccess() {
		return (pLimit != null) ? pLimit : (pLimit = new LimitElements());
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}

	//LimitAttribute:
	//	"end" end=ISODATE | "period" period=Interval1 | "resources" resources+=[Resource] ("," resources+=[Resource])* |
	//	"start" start=ISODATE;
	public LimitAttributeElements getLimitAttributeAccess() {
		return (pLimitAttribute != null) ? pLimitAttribute : (pLimitAttribute = new LimitAttributeElements());
	}
	
	public ParserRule getLimitAttributeRule() {
		return getLimitAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
	//// http://www.taskjuggler.org/tj3/manual/numberformat.html
	//RealFormat:
	//	negativePrefix=STRING negativeSuffix=STRING thousandsSeparator=STRING fractionSeparator=STRING fractionDigits=INT;
	public RealFormatElements getRealFormatAccess() {
		return (pRealFormat != null) ? pRealFormat : (pRealFormat = new RealFormatElements());
	}
	
	public ParserRule getRealFormatRule() {
		return getRealFormatAccess().getRule();
	}

	//// supports Shifts
	//ShiftLimit:
	//	shift=[Shift] (intervals+=Interval3 ("," intervals+=Interval3)*)?;
	public ShiftLimitElements getShiftLimitAccess() {
		return (pShiftLimit != null) ? pShiftLimit : (pShiftLimit = new ShiftLimitElements());
	}
	
	public ParserRule getShiftLimitRule() {
		return getShiftLimitAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//Sort:
	//	(id?=ID | criteria+=Criterion) ("," criteria+=Criterion)*;
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	//TaskDependency:
	//	task=[Task|TaskPath] ("{" (gapDuration=GapDuration? & gapLength=GapLength? & policy=DependsPolicy?) "}")?;
	public TaskDependencyElements getTaskDependencyAccess() {
		return (pTaskDependency != null) ? pTaskDependency : (pTaskDependency = new TaskDependencyElements());
	}
	
	public ParserRule getTaskDependencyRule() {
		return getTaskDependencyAccess().getRule();
	}

	//TaskPath:
	//	"!"* ID ("." ID)*;
	public TaskPathElements getTaskPathAccess() {
		return (pTaskPath != null) ? pTaskPath : (pTaskPath = new TaskPathElements());
	}
	
	public ParserRule getTaskPathRule() {
		return getTaskPathAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
	//TaskTimesheetAttribute:
	//	End //	| StatusTimesheet
	//	| Priority | Remaining | Work;
	public TaskTimesheetAttributeElements getTaskTimesheetAttributeAccess() {
		return (pTaskTimesheetAttribute != null) ? pTaskTimesheetAttribute : (pTaskTimesheetAttribute = new TaskTimesheetAttributeElements());
	}
	
	public ParserRule getTaskTimesheetAttributeRule() {
		return getTaskTimesheetAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timesheet.html
	//TimesheetAttribute:
	//	NewTask | ShiftTimesheet | / *StatusTimesheet | * / TaskTimesheet;
	public TimesheetAttributeElements getTimesheetAttributeAccess() {
		return (pTimesheetAttribute != null) ? pTimesheetAttribute : (pTimesheetAttribute = new TimesheetAttributeElements());
	}
	
	public ParserRule getTimesheetAttributeRule() {
		return getTimesheetAttributeAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/timesheetreport.html
	//TimesheetReportAttribute:
	//	End | HideResource | Period | Start;
	public TimesheetReportAttributeElements getTimesheetReportAttributeAccess() {
		return (pTimesheetReportAttribute != null) ? pTimesheetReportAttribute : (pTimesheetReportAttribute = new TimesheetReportAttributeElements());
	}
	
	public ParserRule getTimesheetReportAttributeRule() {
		return getTimesheetReportAttributeAccess().getRule();
	}

	//RichText:
	//	text=STRING;
	public RichTextElements getRichTextAccess() {
		return (pRichText != null) ? pRichText : (pRichText = new RichTextElements());
	}
	
	public ParserRule getRichTextRule() {
		return getRichTextAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
	//WorkHours:
	//	start=TIME "-" stop=TIME;
	public WorkHoursElements getWorkHoursAccess() {
		return (pWorkHours != null) ? pWorkHours : (pWorkHours = new WorkHoursElements());
	}
	
	public ParserRule getWorkHoursRule() {
		return getWorkHoursAccess().getRule();
	}

	//Weekdays:
	//	first=Weekday ("-" last=Weekday)?;
	public WeekdaysElements getWeekdaysAccess() {
		return (pWeekdays != null) ? pWeekdays : (pWeekdays = new WeekdaysElements());
	}
	
	public ParserRule getWeekdaysRule() {
		return getWeekdaysAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/charge.html
	//enum ChargeApplies:
	//	ONSTART="onstart" | ONEND="onend" | PERHOUR="perhour" | PERDAY="perday" | PERWEEK="perweek";
	public ChargeAppliesElements getChargeAppliesAccess() {
		return (unknownRuleChargeApplies != null) ? unknownRuleChargeApplies : (unknownRuleChargeApplies = new ChargeAppliesElements());
	}
	
	public EnumRule getChargeAppliesRule() {
		return getChargeAppliesAccess().getRule();
	}

	//enum Justification:
	//	LEFT="left" | CENTER="center" | RIGHT="right";
	public JustificationElements getJustificationAccess() {
		return (unknownRuleJustification != null) ? unknownRuleJustification : (unknownRuleJustification = new JustificationElements());
	}
	
	public EnumRule getJustificationRule() {
		return getJustificationAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/journalmode.html
	//enum JournalModeValue:
	//	JOURNAL="journal" | JOURNAL_SUB=" journal_sub" | STATUS_DOWN="status_down" | STATUS_UP="status_up" |
	//	ALERTS_DOWN="alerts_down";
	public JournalModeValueElements getJournalModeValueAccess() {
		return (unknownRuleJournalModeValue != null) ? unknownRuleJournalModeValue : (unknownRuleJournalModeValue = new JournalModeValueElements());
	}
	
	public EnumRule getJournalModeValueRule() {
		return getJournalModeValueAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
	//enum JournalEntrySortCriterion:
	//	DATE_DOWN="date.down" | DATE_UP="date.up" | ALERT_DOWN="alert.down" | ALERT_UP="alert.up" | PROPERTY_UP="property.up";
	public JournalEntrySortCriterionElements getJournalEntrySortCriterionAccess() {
		return (unknownRuleJournalEntrySortCriterion != null) ? unknownRuleJournalEntrySortCriterion : (unknownRuleJournalEntrySortCriterion = new JournalEntrySortCriterionElements());
	}
	
	public EnumRule getJournalEntrySortCriterionRule() {
		return getJournalEntrySortCriterionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
	//enum ListTypeValues:
	//	BULLETS="bullets" | COMMA="comma" | NUMBERED="numbered";
	public ListTypeValuesElements getListTypeValuesAccess() {
		return (unknownRuleListTypeValues != null) ? unknownRuleListTypeValues : (unknownRuleListTypeValues = new ListTypeValuesElements());
	}
	
	public EnumRule getListTypeValuesRule() {
		return getListTypeValuesAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//enum CriterionDirection:
	//	UP="up" | DOWN="down";
	public CriterionDirectionElements getCriterionDirectionAccess() {
		return (unknownRuleCriterionDirection != null) ? unknownRuleCriterionDirection : (unknownRuleCriterionDirection = new CriterionDirectionElements());
	}
	
	public EnumRule getCriterionDirectionRule() {
		return getCriterionDirectionAccess().getRule();
	}

	//enum YesNo:
	//	YES="yes" | NO="no";
	public YesNoElements getYesNoAccess() {
		return (unknownRuleYesNo != null) ? unknownRuleYesNo : (unknownRuleYesNo = new YesNoElements());
	}
	
	public EnumRule getYesNoRule() {
		return getYesNoAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/formats.html
	//enum ReportFormat:
	//	CSV="csv" | HTML="html" | NIKU="niku";
	public ReportFormatElements getReportFormatAccess() {
		return (unknownRuleReportFormat != null) ? unknownRuleReportFormat : (unknownRuleReportFormat = new ReportFormatElements());
	}
	
	public EnumRule getReportFormatRule() {
		return getReportFormatAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/loadunit.html
	//enum LoadDisplayUnit:
	//	DAYS="days" | HOURS="hours" | LONGAUTO="longauto" | MINUTES="minutes" | MONTHS="months" | SHORTAUTO="shortauto" |
	//	WEEKS="weeks" | YEARS="years";
	public LoadDisplayUnitElements getLoadDisplayUnitAccess() {
		return (unknownRuleLoadDisplayUnit != null) ? unknownRuleLoadDisplayUnit : (unknownRuleLoadDisplayUnit = new LoadDisplayUnitElements());
	}
	
	public EnumRule getLoadDisplayUnitRule() {
		return getLoadDisplayUnitAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/scale.column.html
	//enum ScaleResolution:
	//	HOUR="hour" | DAY="day" | WEEK="week" | MONTH="month" | QUARTER="quarter" | YEAR="year";
	public ScaleResolutionElements getScaleResolutionAccess() {
		return (unknownRuleScaleResolution != null) ? unknownRuleScaleResolution : (unknownRuleScaleResolution = new ScaleResolutionElements());
	}
	
	public EnumRule getScaleResolutionRule() {
		return getScaleResolutionAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/select.html
	//enum SelectArgument:
	//	MAXLOADED="maxloaded" | MINLOADED="minloaded" | MINALLOCATED="minallocated" | ORDER="order" | RANDOM="random";
	public SelectArgumentElements getSelectArgumentAccess() {
		return (unknownRuleSelectArgument != null) ? unknownRuleSelectArgument : (unknownRuleSelectArgument = new SelectArgumentElements());
	}
	
	public EnumRule getSelectArgumentRule() {
		return getSelectArgumentAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/columnid.html	
	//enum ColumnId:
	//	ALERT="alert" | ALERTMESSAGE="alertmessage" | ALERTSUMMARY="alertsummar" | ALERTTREND="alerttrend" | CHART="chart" |
	//	COMPLETE="complete" | COMPLETED="completed" | CRITICALNESS="criticalness" | COST="cost" | DAILY="daily" |
	//	DURATION="duration" | DUTIES="duties" | EFFICIENCY="efficiency" | EFFORT="effort" | EFFORTDONE="effortdone" |
	//	EFFORTLEFT="effortleft" | EMAIL="email" | END="end" | FLAGS="flags" | FOLLOWERS="followers" | FREETIME="freetime" |
	//	FREEWORK="freework" | FTE="fte" | HEADCOUNT="headcount" | HIERARCHINDEX="hierarchindex" | HOURLY="hourly" | ID="id" |
	//	INDEX="index" | JOURNAL="journal" | LINE="line" | MAXEND="maxend" | MAXSTART="maxstart" | MINEND="minend" |
	//	MINSTART="minstart" | MONTHLY="monthly" | NO="no" | NAME="name" | NOTE="note" | PATHCRITICALNESS="pathcriticalness" |
	//	PRECURSOR="precursor" | PRIORITY="priority" | QUARTERLY="quarterly" | RATE="rate" | RESOURCES="resources" |
	//	RESPONSIBLE="responsible" | REVENUE="revenue" | SCENARIO="scenario" | SEQNO="seqno" | START="start" | STATUS="status"
	//	| TARGETS="targets" | WBS="wbs" | WEEKLY="weekly" | YEARLY="yearly";
	public ColumnIdElements getColumnIdAccess() {
		return (unknownRuleColumnId != null) ? unknownRuleColumnId : (unknownRuleColumnId = new ColumnIdElements());
	}
	
	public EnumRule getColumnIdRule() {
		return getColumnIdAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/alert.html
	//enum AlertLevel:
	//	RED="red" | YELLOW="yellow" | GREEN="green";
	public AlertLevelElements getAlertLevelAccess() {
		return (unknownRuleAlertLevel != null) ? unknownRuleAlertLevel : (unknownRuleAlertLevel = new AlertLevelElements());
	}
	
	public EnumRule getAlertLevelRule() {
		return getAlertLevelAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/onend.html
	//// http://www.taskjuggler.org/tj3/manual/onstart.html
	//enum DependsPolicy:
	//	ONEND="onend" | ONSTART="onstart";
	public DependsPolicyElements getDependsPolicyAccess() {
		return (unknownRuleDependsPolicy != null) ? unknownRuleDependsPolicy : (unknownRuleDependsPolicy = new DependsPolicyElements());
	}
	
	public EnumRule getDependsPolicyRule() {
		return getDependsPolicyAccess().getRule();
	}

	//enum SchedulingPolicy:
	//	ALAP="alap" | ASAP="asap";
	public SchedulingPolicyElements getSchedulingPolicyAccess() {
		return (unknownRuleSchedulingPolicy != null) ? unknownRuleSchedulingPolicy : (unknownRuleSchedulingPolicy = new SchedulingPolicyElements());
	}
	
	public EnumRule getSchedulingPolicyRule() {
		return getSchedulingPolicyAccess().getRule();
	}

	//enum TimeUnit:
	//	MINUTE="min" | HOUR="h" | DAY="d" | WEEK="w" | MONTH="m" | YEAR="y";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//enum Weekday:
	//	MON="mon" | TUE="tue" | WED="wed" | THR="thu" | FRI="fri" | SAT="sat" | SUN="sun";
	public WeekdayElements getWeekdayAccess() {
		return (unknownRuleWeekday != null) ? unknownRuleWeekday : (unknownRuleWeekday = new WeekdayElements());
	}
	
	public EnumRule getWeekdayRule() {
		return getWeekdayAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/work.html
	//enum WorkQuantityUnit:
	//	PERCENT="%" | MINUTES="min" | HOURS="h" | DAYS="d";
	public WorkQuantityUnitElements getWorkQuantityUnitAccess() {
		return (unknownRuleWorkQuantityUnit != null) ? unknownRuleWorkQuantityUnit : (unknownRuleWorkQuantityUnit = new WorkQuantityUnitElements());
	}
	
	public EnumRule getWorkQuantityUnitRule() {
		return getWorkQuantityUnitAccess().getRule();
	}

	//// http://www.taskjuggler.org/tj3/manual/depends.html
	//// http://www.taskjuggler.org/tj3/manual/The_TaskJuggler_Syntax.html#ABSOLUTEID
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//// XFloat is permitting either an int or a float: eg: 4 and 4.0 are parsed as intended.
	//// this technique avoids a FLOAT terminal definition that would hide INT:
	//// eg: avoiding 4 would only be INT and 4.0 would only be FLOAT.
	//XFloat returns ecore::EFloat:
	//	FLOAT | INT;
	public XFloatElements getXFloatAccess() {
		return (pXFloat != null) ? pXFloat : (pXFloat = new XFloatElements());
	}
	
	public ParserRule getXFloatRule() {
		return getXFloatAccess().getRule();
	}

	//terminal FLOAT returns ecore::EFloat:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'" | "-8<-"->"->8-";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal TIME:
	//	(("0"? | "1") "0".."9" | "2" "0".."4") ":" "0".."5" "0".."9";
	public TerminalRule getTIMERule() {
		return (tTIME != null) ? tTIME : (tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME"));
	} 

	//// YYYY-MM-DD-HH:mm[:ss][xNNNN]  (x being + or -, NNNN being utc timezone offset
	//terminal ISODATE:
	//	"20" "0".."9" "0".."9" "-" ("0" "1".."9" | "1" "0".."2") "-" ("0" "1".."9" | ("1" | "2") "0".."9" | "3" ("0" | "1"))
	//	("-" (("0"? | "1") "0".."9" | "2" "0".."4") ":" "0".."5" "0".."9" (":" "0".."5" "0".."9")? (("+" | "-") "0".."5"
	//	"0".."9" "0".."5" "0".."9")?)?;
	public TerminalRule getISODATERule() {
		return (tISODATE != null) ? tISODATE : (tISODATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ISODATE"));
	} 

	//// commented out because conflict with enum TimeUnit example: 3d  TimUnit or RGB?
	//// for example, color spec of: http://www.taskjuggler.org/tj3/manual/cellcolor.column.html
	/// *
	//terminal RRGGBB: (('0'..'9')|('a'..'f')|('A'..'F')) (('0'..'9')|('a'..'f')|('A'..'F')) 
	//				(('0'..'9')|('a'..'f')|('A'..'F')) (('0'..'9')|('a'..'f')|('A'..'F')) 
	//				(('0'..'9')|('a'..'f')|('A'..'F')) (('0'..'9')|('a'..'f')|('A'..'F'));
	// * / terminal RGB:
	//	("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F");
	public TerminalRule getRGBRule() {
		return (tRGB != null) ? tRGB : (tRGB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RGB"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
